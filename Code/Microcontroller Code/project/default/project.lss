
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800200  00003cb2  00003d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  0080033e  0080033e  00003e84  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007f9  00000000  00000000  00003ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000269e  00000000  00000000  0000469d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000348  00000000  00000000  00006d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c3a  00000000  00000000  00007083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  00009cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000749  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001218  00000000  00000000  0000a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000478  00000000  00000000  0000b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_5>
      18:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 eb       	ldi	r30, 0xB2	; 178
      fc:	fc e3       	ldi	r31, 0x3C	; 60
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 33       	cpi	r26, 0x3E	; 62
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ae e3       	ldi	r26, 0x3E	; 62
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3a       	cpi	r26, 0xA3	; 163
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <main>
     122:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	8a ef       	ldi	r24, 0xFA	; 250
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	22 ee       	ldi	r18, 0xE2	; 226
     140:	34 e0       	ldi	r19, 0x04	; 4
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	22 ee       	ldi	r18, 0xE2	; 226
     1a6:	34 e0       	ldi	r19, 0x04	; 4
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
     1d0:	8a ef       	ldi	r24, 0xFA	; 250
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d8:	88 e2       	ldi	r24, 0x28	; 40
     1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1f8:	98 b1       	in	r25, 0x08	; 8
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1fe:	28 b1       	in	r18, 0x08	; 8
     200:	98 2f       	mov	r25, r24
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	92 2b       	or	r25, r18
     206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	22 ee       	ldi	r18, 0xE2	; 226
     210:	34 e0       	ldi	r19, 0x04	; 4
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	98 2b       	or	r25, r24
     228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	c9 01       	movw	r24, r18
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
     24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     250:	88 81       	ld	r24, Y
     252:	88 23       	and	r24, r24
     254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
     26e:	84 30       	cpi	r24, 0x04	; 4
     270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
     272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     274:	86 2f       	mov	r24, r22
     276:	81 58       	subi	r24, 0x81	; 129
     278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27a:	86 2f       	mov	r24, r22
     27c:	81 54       	subi	r24, 0x41	; 65
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     280:	86 2f       	mov	r24, r22
     282:	8d 56       	subi	r24, 0x6D	; 109
     284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28a:	86 2f       	mov	r24, r22
     28c:	8d 52       	subi	r24, 0x2D	; 45
     28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8a 01       	movw	r16, r20
     29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a0:	88 23       	and	r24, r24
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
     2a4:	66 23       	and	r22, r22
     2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
     2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b2:	c5 30       	cpi	r28, 0x05	; 5
     2b4:	d1 05       	cpc	r29, r1
     2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
     2b8:	c8 01       	movw	r24, r16
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     2c2:	cb 01       	movw	r24, r22
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 8d 03 	sts	0x038D, r25
     2ca:	80 93 8c 03 	sts	0x038C, r24
		lcd_wr_char(million);
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
     2de:	c8 01       	movw	r24, r16
     2e0:	68 ee       	ldi	r22, 0xE8	; 232
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	60 93 8e 03 	sts	0x038E, r22
     2ee:	90 93 8f 03 	sts	0x038F, r25
		thousand = temp%10 + 48;
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 a0 03 	sts	0x03A0, r25
     300:	80 93 9f 03 	sts	0x039F, r24
		lcd_wr_char(thousand);
     304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	d1 05       	cpc	r29, r1
     30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
     318:	c8 01       	movw	r24, r16
     31a:	64 e6       	ldi	r22, 0x64	; 100
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     322:	cb 01       	movw	r24, r22
     324:	60 93 8e 03 	sts	0x038E, r22
     328:	90 93 8f 03 	sts	0x038F, r25
		hundred = temp%10 + 48;
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 9a 03 	sts	0x039A, r25
     33a:	80 93 99 03 	sts	0x0399, r24
		lcd_wr_char(hundred);
     33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     344:	c2 30       	cpi	r28, 0x02	; 2
     346:	d1 05       	cpc	r29, r1
     348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
     352:	c8 01       	movw	r24, r16
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	60 93 8e 03 	sts	0x038E, r22
     362:	90 93 8f 03 	sts	0x038F, r25
		tens = temp%10 + 48;
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 96 03 	sts	0x0396, r25
     374:	80 93 95 03 	sts	0x0395, r24
		lcd_wr_char(tens);
     378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     37e:	c1 30       	cpi	r28, 0x01	; 1
     380:	d1 05       	cpc	r29, r1
     382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     388:	c8 01       	movw	r24, r16
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <__udivmodhi4>
     392:	c0 96       	adiw	r24, 0x30	; 48
     394:	90 93 9e 03 	sts	0x039E, r25
     398:	80 93 9d 03 	sts	0x039D, r24
		lcd_wr_char(unit);
     39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a4:	85 e4       	ldi	r24, 0x45	; 69
     3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <uart_start>:
//Input : void
//Output: void
/**********************************************************************************/
void uart_start(void)
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
     3b4:	a1 ec       	ldi	r26, 0xC1	; 193
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	88 61       	ori	r24, 0x18	; 24
     3bc:	8c 93       	st	X, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
     3be:	e2 ec       	ldi	r30, 0xC2	; 194
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	86 60       	ori	r24, 0x06	; 6
     3c6:	80 83       	st	Z, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
     3c8:	85 e0       	ldi	r24, 0x05	; 5
     3ca:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
     3ce:	10 92 c5 00 	sts	0x00C5, r1

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
     3d2:	8c 91       	ld	r24, X
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	8c 93       	st	X, r24
}
     3d8:	08 95       	ret

000003da <uart_sendint>:
//Description : pass the data to be sent through UART to this function
//				sends a byte of data at a time
//				To send multiple data, call this multiple times
/**********************************************************************************/
void uart_sendint(uint8_t data)
{
     3da:	98 2f       	mov	r25, r24
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     3dc:	80 91 c0 00 	lds	r24, 0x00C0
     3e0:	85 ff       	sbrs	r24, 5
     3e2:	fc cf       	rjmp	.-8      	; 0x3dc <uart_sendint+0x2>
	UDR0 = data; //send the data
     3e4:	90 93 c6 00 	sts	0x00C6, r25
	//while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
	//UDR0 = '\n';//send a new line just to be sure
}
     3e8:	08 95       	ret

000003ea <uart_sendint16>:
//Description : pass the data to be sent through UART to this function
//				sends 2 byte of data at a time
//				To send multiple data, call this multiple times
/**********************************************************************************/
void uart_sendint16(uint16_t data)
{
     3ea:	28 2f       	mov	r18, r24
	/*
	Use this to send a 16bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     3ec:	80 91 c0 00 	lds	r24, 0x00C0
     3f0:	85 ff       	sbrs	r24, 5
     3f2:	fc cf       	rjmp	.-8      	; 0x3ec <uart_sendint16+0x2>
	UDR0 = data;//send the lower bits
     3f4:	20 93 c6 00 	sts	0x00C6, r18
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     3f8:	80 91 c0 00 	lds	r24, 0x00C0
     3fc:	85 ff       	sbrs	r24, 5
     3fe:	fc cf       	rjmp	.-8      	; 0x3f8 <uart_sendint16+0xe>
	UDR0 = (data >> 8); //send the higher bits
     400:	90 93 c6 00 	sts	0x00C6, r25
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     404:	80 91 c0 00 	lds	r24, 0x00C0
     408:	85 ff       	sbrs	r24, 5
     40a:	fc cf       	rjmp	.-8      	; 0x404 <uart_sendint16+0x1a>
	UDR0 = '\n';//send a new line just to be sure
     40c:	8a e0       	ldi	r24, 0x0A	; 10
     40e:	80 93 c6 00 	sts	0x00C6, r24
}
     412:	08 95       	ret

00000414 <uart_sendstr>:
//Output: void
//Description : pass the pointer, which points to data to be sent through UART to this function
//				To send multiple data, call this multiple times
/**********************************************************************************/
void uart_sendstr(char *data)
{
     414:	fc 01       	movw	r30, r24
     416:	07 c0       	rjmp	.+14     	; 0x426 <uart_sendstr+0x12>
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     418:	80 91 c0 00 	lds	r24, 0x00C0
     41c:	85 ff       	sbrs	r24, 5
     41e:	fc cf       	rjmp	.-8      	; 0x418 <uart_sendstr+0x4>
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
     420:	90 93 c6 00 	sts	0x00C6, r25
		data += 1;//go to new bit in string
     424:	31 96       	adiw	r30, 0x01	; 1
{
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
     426:	90 81       	ld	r25, Z
     428:	99 23       	and	r25, r25
     42a:	b1 f7       	brne	.-20     	; 0x418 <uart_sendstr+0x4>
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     42c:	80 91 c0 00 	lds	r24, 0x00C0
     430:	85 ff       	sbrs	r24, 5
     432:	fc cf       	rjmp	.-8      	; 0x42c <uart_sendstr+0x18>
	UDR0 = '\n';//send a new line just to be sure
     434:	8a e0       	ldi	r24, 0x0A	; 10
     436:	80 93 c6 00 	sts	0x00C6, r24
}
     43a:	08 95       	ret

0000043c <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     43c:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     43e:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     440:	88 b9       	out	0x08, r24	; 8
}
     442:	08 95       	ret

00000444 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     444:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     446:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     448:	88 b9       	out	0x08, r24	; 8
}
     44a:	08 95       	ret

0000044c <__vector_25>:
//Format to send destination coordinates 's'---->'bot_id'------>'d'------->'x_destination'------->'y_destination'
//'z' or 'Z' is used to end the conversation
//As we are coordinating with multiple bots, it is necessary to close the connection as soon as the values are set.
/**********************************************************************************/
SIGNAL(SIG_USART0_RECV)     // ISR for receive complete interrupt
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	0b b6       	in	r0, 0x3b	; 59
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	2f 93       	push	r18
     45c:	3f 93       	push	r19
     45e:	4f 93       	push	r20
     460:	5f 93       	push	r21
     462:	6f 93       	push	r22
     464:	7f 93       	push	r23
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
	data = UDR0;
     46e:	20 91 c6 00 	lds	r18, 0x00C6
     472:	20 93 97 03 	sts	0x0397, r18
	check=1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 4b 03 	sts	0x034B, r25
     47e:	80 93 4a 03 	sts	0x034A, r24
	datac=data;         //making copy of data from UDR0 in 'data' variable
     482:	20 93 98 03 	sts	0x0398, r18
	if((data == 'F' || data== 'f') )
     486:	26 34       	cpi	r18, 0x46	; 70
     488:	11 f0       	breq	.+4      	; 0x48e <__vector_25+0x42>
     48a:	26 36       	cpi	r18, 0x66	; 102
     48c:	31 f4       	brne	.+12     	; 0x49a <__vector_25+0x4e>
	{
		testmsg=1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	90 93 6f 03 	sts	0x036F, r25
     496:	80 93 6e 03 	sts	0x036E, r24
	}

	if( (data == botid || data== botid2 ) && testmsg==1 && start == 0)
     49a:	30 91 0e 02 	lds	r19, 0x020E
     49e:	23 17       	cp	r18, r19
     4a0:	21 f0       	breq	.+8      	; 0x4aa <__vector_25+0x5e>
     4a2:	80 91 0f 02 	lds	r24, 0x020F
     4a6:	28 17       	cp	r18, r24
     4a8:	51 f5       	brne	.+84     	; 0x4fe <__vector_25+0xb2>
     4aa:	80 91 6e 03 	lds	r24, 0x036E
     4ae:	90 91 6f 03 	lds	r25, 0x036F
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	21 f5       	brne	.+72     	; 0x4fe <__vector_25+0xb2>
     4b6:	80 91 4c 03 	lds	r24, 0x034C
     4ba:	90 91 4d 03 	lds	r25, 0x034D
     4be:	89 2b       	or	r24, r25
     4c0:	f1 f4       	brne	.+60     	; 0x4fe <__vector_25+0xb2>
	{

		if( freebot==0)
     4c2:	80 91 80 03 	lds	r24, 0x0380
     4c6:	90 91 81 03 	lds	r25, 0x0381
     4ca:	89 2b       	or	r24, r25
     4cc:	a1 f4       	brne	.+40     	; 0x4f6 <__vector_25+0xaa>
     4ce:	e0 e1       	ldi	r30, 0x10	; 16
     4d0:	f2 e0       	ldi	r31, 0x02	; 2
     4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__vector_25+0x96>
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     4d4:	80 91 c0 00 	lds	r24, 0x00C0
     4d8:	85 ff       	sbrs	r24, 5
     4da:	fc cf       	rjmp	.-8      	; 0x4d4 <__vector_25+0x88>
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
     4dc:	90 93 c6 00 	sts	0x00C6, r25
		data += 1;//go to new bit in string
     4e0:	31 96       	adiw	r30, 0x01	; 1
{
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
     4e2:	90 81       	ld	r25, Z
     4e4:	99 23       	and	r25, r25
     4e6:	b1 f7       	brne	.-20     	; 0x4d4 <__vector_25+0x88>
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     4e8:	80 91 c0 00 	lds	r24, 0x00C0
     4ec:	85 ff       	sbrs	r24, 5
     4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <__vector_25+0x9c>
	UDR0 = '\n';//send a new line just to be sure
     4f0:	8a e0       	ldi	r24, 0x0A	; 10
     4f2:	80 93 c6 00 	sts	0x00C6, r24
		if( freebot==0)
		{
			uart_sendstr(testreply);

		}
		testmsg=0;
     4f6:	10 92 6f 03 	sts	0x036F, r1
     4fa:	10 92 6e 03 	sts	0x036E, r1
	}

	if(data == 'S' || data== 's')           // To send its initial coordinates and destination coordinates
     4fe:	23 35       	cpi	r18, 0x53	; 83
     500:	11 f0       	breq	.+4      	; 0x506 <__vector_25+0xba>
     502:	23 37       	cpi	r18, 0x73	; 115
     504:	31 f4       	brne	.+12     	; 0x512 <__vector_25+0xc6>
	{										// Format to set these values as specified in the above comments
		start=1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 4d 03 	sts	0x034D, r25
     50e:	80 93 4c 03 	sts	0x034C, r24
	}
	if(start)
     512:	80 91 4c 03 	lds	r24, 0x034C
     516:	90 91 4d 03 	lds	r25, 0x034D
     51a:	89 2b       	or	r24, r25
     51c:	09 f4       	brne	.+2      	; 0x520 <__vector_25+0xd4>
     51e:	78 c1       	rjmp	.+752    	; 0x810 <__vector_25+0x3c4>
	{
		if((data== botid2 || data== botid) && stop_s==1 && freebot==0)
     520:	80 91 0f 02 	lds	r24, 0x020F
     524:	28 17       	cp	r18, r24
     526:	11 f0       	breq	.+4      	; 0x52c <__vector_25+0xe0>
     528:	23 17       	cp	r18, r19
     52a:	49 f5       	brne	.+82     	; 0x57e <__vector_25+0x132>
     52c:	40 91 00 02 	lds	r20, 0x0200
     530:	50 91 01 02 	lds	r21, 0x0201
     534:	41 30       	cpi	r20, 0x01	; 1
     536:	51 05       	cpc	r21, r1
     538:	11 f5       	brne	.+68     	; 0x57e <__vector_25+0x132>
     53a:	80 91 80 03 	lds	r24, 0x0380
     53e:	90 91 81 03 	lds	r25, 0x0381
     542:	89 2b       	or	r24, r25
     544:	e1 f4       	brne	.+56     	; 0x57e <__vector_25+0x132>
		{
			stop_s=0;
     546:	10 92 01 02 	sts	0x0201, r1
     54a:	10 92 00 02 	sts	0x0200, r1
			id=1;
     54e:	50 93 4f 03 	sts	0x034F, r21
     552:	40 93 4e 03 	sts	0x034E, r20
     556:	e8 e1       	ldi	r30, 0x18	; 24
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	07 c0       	rjmp	.+14     	; 0x56a <__vector_25+0x11e>
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     55c:	80 91 c0 00 	lds	r24, 0x00C0
     560:	85 ff       	sbrs	r24, 5
     562:	fc cf       	rjmp	.-8      	; 0x55c <__vector_25+0x110>
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
     564:	90 93 c6 00 	sts	0x00C6, r25
		data += 1;//go to new bit in string
     568:	31 96       	adiw	r30, 0x01	; 1
{
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
     56a:	90 81       	ld	r25, Z
     56c:	99 23       	and	r25, r25
     56e:	b1 f7       	brne	.-20     	; 0x55c <__vector_25+0x110>
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     570:	80 91 c0 00 	lds	r24, 0x00C0
     574:	85 ff       	sbrs	r24, 5
     576:	fc cf       	rjmp	.-8      	; 0x570 <__vector_25+0x124>
	UDR0 = '\n';//send a new line just to be sure
     578:	8a e0       	ldi	r24, 0x0A	; 10
     57a:	80 93 c6 00 	sts	0x00C6, r24
		{
			stop_s=0;
			id=1;
			uart_sendstr(startreply);
		}
		if((data=='z' || data=='Z') && stop_s==0)
     57e:	2a 37       	cpi	r18, 0x7A	; 122
     580:	11 f0       	breq	.+4      	; 0x586 <__vector_25+0x13a>
     582:	2a 35       	cpi	r18, 0x5A	; 90
     584:	a1 f4       	brne	.+40     	; 0x5ae <__vector_25+0x162>
     586:	80 91 00 02 	lds	r24, 0x0200
     58a:	90 91 01 02 	lds	r25, 0x0201
     58e:	89 2b       	or	r24, r25
     590:	71 f4       	brne	.+28     	; 0x5ae <__vector_25+0x162>
		{
			stop_s=1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 01 02 	sts	0x0201, r25
     59a:	80 93 00 02 	sts	0x0200, r24
			id=0;
     59e:	10 92 4f 03 	sts	0x034F, r1
     5a2:	10 92 4e 03 	sts	0x034E, r1
			config_done=1;
     5a6:	90 93 57 03 	sts	0x0357, r25
     5aa:	80 93 56 03 	sts	0x0356, r24
		}
		if(stop_s==0 && id==1)        
     5ae:	80 91 00 02 	lds	r24, 0x0200
     5b2:	90 91 01 02 	lds	r25, 0x0201
     5b6:	89 2b       	or	r24, r25
     5b8:	09 f0       	breq	.+2      	; 0x5bc <__vector_25+0x170>
     5ba:	2a c1       	rjmp	.+596    	; 0x810 <__vector_25+0x3c4>
     5bc:	40 91 4e 03 	lds	r20, 0x034E
     5c0:	50 91 4f 03 	lds	r21, 0x034F
     5c4:	41 30       	cpi	r20, 0x01	; 1
     5c6:	51 05       	cpc	r21, r1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_25+0x180>
     5ca:	22 c1       	rjmp	.+580    	; 0x810 <__vector_25+0x3c4>
		{
			if(coordinates==2)
     5cc:	60 91 50 03 	lds	r22, 0x0350
     5d0:	70 91 51 03 	lds	r23, 0x0351
     5d4:	62 30       	cpi	r22, 0x02	; 2
     5d6:	71 05       	cpc	r23, r1
     5d8:	09 f0       	breq	.+2      	; 0x5dc <__vector_25+0x190>
     5da:	74 c0       	rjmp	.+232    	; 0x6c4 <__vector_25+0x278>
			{
				if(destination_act==2)                 
     5dc:	80 91 54 03 	lds	r24, 0x0354
     5e0:	90 91 55 03 	lds	r25, 0x0355
     5e4:	02 97       	sbiw	r24, 0x02	; 2
     5e6:	91 f5       	brne	.+100    	; 0x64c <__vector_25+0x200>
				{
					if(data==0x30)					// Decoding destination y-coordinate
     5e8:	20 33       	cpi	r18, 0x30	; 48
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <__vector_25+0x1aa>
					{
						y_dest=0;
     5ec:	10 92 91 03 	sts	0x0391, r1
     5f0:	10 92 90 03 	sts	0x0390, r1
     5f4:	25 c0       	rjmp	.+74     	; 0x640 <__vector_25+0x1f4>
					}
					else if(data==0x31)
     5f6:	21 33       	cpi	r18, 0x31	; 49
     5f8:	29 f4       	brne	.+10     	; 0x604 <__vector_25+0x1b8>
					{
						y_dest=1;
     5fa:	50 93 91 03 	sts	0x0391, r21
     5fe:	40 93 90 03 	sts	0x0390, r20
     602:	1e c0       	rjmp	.+60     	; 0x640 <__vector_25+0x1f4>
					}
					else if(data==0x32)
     604:	22 33       	cpi	r18, 0x32	; 50
     606:	29 f4       	brne	.+10     	; 0x612 <__vector_25+0x1c6>
					{
						y_dest=2;
     608:	70 93 91 03 	sts	0x0391, r23
     60c:	60 93 90 03 	sts	0x0390, r22
     610:	17 c0       	rjmp	.+46     	; 0x640 <__vector_25+0x1f4>
					}
					else if(data==0x33)
     612:	23 33       	cpi	r18, 0x33	; 51
     614:	19 f4       	brne	.+6      	; 0x61c <__vector_25+0x1d0>
					{
						y_dest=3;
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e c0       	rjmp	.+28     	; 0x638 <__vector_25+0x1ec>
					}
					else if(data==0x34)
     61c:	24 33       	cpi	r18, 0x34	; 52
     61e:	19 f4       	brne	.+6      	; 0x626 <__vector_25+0x1da>
					{
						y_dest=4;
     620:	84 e0       	ldi	r24, 0x04	; 4
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	09 c0       	rjmp	.+18     	; 0x638 <__vector_25+0x1ec>
					}
					else if(data==0x35)
     626:	25 33       	cpi	r18, 0x35	; 53
     628:	19 f4       	brne	.+6      	; 0x630 <__vector_25+0x1e4>
					{
						y_dest=5;
     62a:	85 e0       	ldi	r24, 0x05	; 5
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	04 c0       	rjmp	.+8      	; 0x638 <__vector_25+0x1ec>
					}
					else if(data==0x36)
     630:	26 33       	cpi	r18, 0x36	; 54
     632:	31 f4       	brne	.+12     	; 0x640 <__vector_25+0x1f4>
					{
						y_dest=6;
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 91 03 	sts	0x0391, r25
     63c:	80 93 90 03 	sts	0x0390, r24
					}
					destination_act=3;
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 55 03 	sts	0x0355, r25
     648:	80 93 54 03 	sts	0x0354, r24
				}
				if(destination_act==1) 				//ASCII value of 8
     64c:	80 91 54 03 	lds	r24, 0x0354
     650:	90 91 55 03 	lds	r25, 0x0355
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	91 05       	cpc	r25, r1
     658:	59 f5       	brne	.+86     	; 0x6b0 <__vector_25+0x264>
				{
					if(data==0x30)					// Decoding destination x-coordinate
     65a:	20 33       	cpi	r18, 0x30	; 48
     65c:	29 f4       	brne	.+10     	; 0x668 <__vector_25+0x21c>
					{
						x_dest=0;
     65e:	10 92 a2 03 	sts	0x03A2, r1
     662:	10 92 a1 03 	sts	0x03A1, r1
     666:	1e c0       	rjmp	.+60     	; 0x6a4 <__vector_25+0x258>
					}
					else if(data==0x31)
     668:	21 33       	cpi	r18, 0x31	; 49
     66a:	c1 f0       	breq	.+48     	; 0x69c <__vector_25+0x250>
					{
						x_dest=1;
					}
					else if(data==0x32)
     66c:	22 33       	cpi	r18, 0x32	; 50
     66e:	19 f4       	brne	.+6      	; 0x676 <__vector_25+0x22a>
					{
						x_dest=2;
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	13 c0       	rjmp	.+38     	; 0x69c <__vector_25+0x250>
					}
					else if(data==0x33)
     676:	23 33       	cpi	r18, 0x33	; 51
     678:	19 f4       	brne	.+6      	; 0x680 <__vector_25+0x234>
					{
						x_dest=3;
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e c0       	rjmp	.+28     	; 0x69c <__vector_25+0x250>
					}
					else if(data==0x34)
     680:	24 33       	cpi	r18, 0x34	; 52
     682:	19 f4       	brne	.+6      	; 0x68a <__vector_25+0x23e>
					{
						x_dest=4;
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	09 c0       	rjmp	.+18     	; 0x69c <__vector_25+0x250>
					}
					else if(data==0x35)
     68a:	25 33       	cpi	r18, 0x35	; 53
     68c:	19 f4       	brne	.+6      	; 0x694 <__vector_25+0x248>
					{
						x_dest=5;
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	04 c0       	rjmp	.+8      	; 0x69c <__vector_25+0x250>
					}
					else if(data==0x36)
     694:	26 33       	cpi	r18, 0x36	; 54
     696:	31 f4       	brne	.+12     	; 0x6a4 <__vector_25+0x258>
					{
						x_dest=6;
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	90 93 a2 03 	sts	0x03A2, r25
     6a0:	80 93 a1 03 	sts	0x03A1, r24
					}
					destination_act=2;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 55 03 	sts	0x0355, r25
     6ac:	80 93 54 03 	sts	0x0354, r24
				}
				if(data == 'd' || data == 'D') 			//ASCII value of 8
     6b0:	24 36       	cpi	r18, 0x64	; 100
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <__vector_25+0x26c>
     6b4:	24 34       	cpi	r18, 0x44	; 68
     6b6:	31 f4       	brne	.+12     	; 0x6c4 <__vector_25+0x278>
				{
					destination_act=1;  
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 55 03 	sts	0x0355, r25
     6c0:	80 93 54 03 	sts	0x0354, r24
				}

			}
			if(x_recei==1 && coordinates==1)			// Decoding initial y-coordinate
     6c4:	80 91 52 03 	lds	r24, 0x0352
     6c8:	90 91 53 03 	lds	r25, 0x0353
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	b9 f5       	brne	.+110    	; 0x73e <__vector_25+0x2f2>
     6d0:	61 30       	cpi	r22, 0x01	; 1
     6d2:	71 05       	cpc	r23, r1
     6d4:	a1 f5       	brne	.+104    	; 0x73e <__vector_25+0x2f2>
			{
				if(data==0x30)
     6d6:	20 33       	cpi	r18, 0x30	; 48
     6d8:	29 f4       	brne	.+10     	; 0x6e4 <__vector_25+0x298>
				{
					y_coor=0;
     6da:	10 92 8b 03 	sts	0x038B, r1
     6de:	10 92 8a 03 	sts	0x038A, r1
     6e2:	23 c0       	rjmp	.+70     	; 0x72a <__vector_25+0x2de>
				}
				else if(data==0x31)
     6e4:	21 33       	cpi	r18, 0x31	; 49
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <__vector_25+0x2a6>
				{
					y_coor=1;
     6e8:	70 93 8b 03 	sts	0x038B, r23
     6ec:	60 93 8a 03 	sts	0x038A, r22
     6f0:	1c c0       	rjmp	.+56     	; 0x72a <__vector_25+0x2de>
				}
				else if(data==0x32)
     6f2:	22 33       	cpi	r18, 0x32	; 50
     6f4:	19 f4       	brne	.+6      	; 0x6fc <__vector_25+0x2b0>
				{
					y_coor=2;
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	13 c0       	rjmp	.+38     	; 0x722 <__vector_25+0x2d6>
				}
				else if(data==0x33)
     6fc:	23 33       	cpi	r18, 0x33	; 51
     6fe:	19 f4       	brne	.+6      	; 0x706 <__vector_25+0x2ba>
				{
					y_coor=3;
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e c0       	rjmp	.+28     	; 0x722 <__vector_25+0x2d6>
				}
				else if(data==0x34)
     706:	24 33       	cpi	r18, 0x34	; 52
     708:	19 f4       	brne	.+6      	; 0x710 <__vector_25+0x2c4>
				{
					y_coor=4;
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	09 c0       	rjmp	.+18     	; 0x722 <__vector_25+0x2d6>
				}
				else if(data==0x35)
     710:	25 33       	cpi	r18, 0x35	; 53
     712:	19 f4       	brne	.+6      	; 0x71a <__vector_25+0x2ce>
				{
					y_coor=5;
     714:	85 e0       	ldi	r24, 0x05	; 5
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	04 c0       	rjmp	.+8      	; 0x722 <__vector_25+0x2d6>
				}
				else if(data==0x36)
     71a:	26 33       	cpi	r18, 0x36	; 54
     71c:	31 f4       	brne	.+12     	; 0x72a <__vector_25+0x2de>
				{
					y_coor=6;
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 8b 03 	sts	0x038B, r25
     726:	80 93 8a 03 	sts	0x038A, r24
				}
				x_recei=0;
     72a:	10 92 53 03 	sts	0x0353, r1
     72e:	10 92 52 03 	sts	0x0352, r1
				coordinates=2;
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	90 93 51 03 	sts	0x0351, r25
     73a:	80 93 50 03 	sts	0x0350, r24
			}
			if(coordinates==1 && x_recei==0)				// Decoding initial x-coordinate
     73e:	40 91 50 03 	lds	r20, 0x0350
     742:	50 91 51 03 	lds	r21, 0x0351
     746:	41 30       	cpi	r20, 0x01	; 1
     748:	51 05       	cpc	r21, r1
     74a:	b1 f5       	brne	.+108    	; 0x7b8 <__vector_25+0x36c>
     74c:	80 91 52 03 	lds	r24, 0x0352
     750:	90 91 53 03 	lds	r25, 0x0353
     754:	89 2b       	or	r24, r25
     756:	81 f5       	brne	.+96     	; 0x7b8 <__vector_25+0x36c>
			{
				if(data==0x30)
     758:	20 33       	cpi	r18, 0x30	; 48
     75a:	29 f4       	brne	.+10     	; 0x766 <__vector_25+0x31a>
				{
					x_coor=0;
     75c:	10 92 9c 03 	sts	0x039C, r1
     760:	10 92 9b 03 	sts	0x039B, r1
     764:	23 c0       	rjmp	.+70     	; 0x7ac <__vector_25+0x360>
				}
				else if(data==0x31)
     766:	21 33       	cpi	r18, 0x31	; 49
     768:	29 f4       	brne	.+10     	; 0x774 <__vector_25+0x328>
				{
					x_coor=1;
     76a:	50 93 9c 03 	sts	0x039C, r21
     76e:	40 93 9b 03 	sts	0x039B, r20
     772:	1c c0       	rjmp	.+56     	; 0x7ac <__vector_25+0x360>
				}
				else if(data==0x32)
     774:	22 33       	cpi	r18, 0x32	; 50
     776:	19 f4       	brne	.+6      	; 0x77e <__vector_25+0x332>
				{
					x_coor=2;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <__vector_25+0x358>
				}
				else if(data==0x33)
     77e:	23 33       	cpi	r18, 0x33	; 51
     780:	19 f4       	brne	.+6      	; 0x788 <__vector_25+0x33c>
				{
					x_coor=3;
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e c0       	rjmp	.+28     	; 0x7a4 <__vector_25+0x358>
				}
				else if(data==0x34)
     788:	24 33       	cpi	r18, 0x34	; 52
     78a:	19 f4       	brne	.+6      	; 0x792 <__vector_25+0x346>
				{
					x_coor=4;
     78c:	84 e0       	ldi	r24, 0x04	; 4
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <__vector_25+0x358>
				}
				else if(data==0x35)
     792:	25 33       	cpi	r18, 0x35	; 53
     794:	19 f4       	brne	.+6      	; 0x79c <__vector_25+0x350>
				{
					x_coor=5;
     796:	85 e0       	ldi	r24, 0x05	; 5
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__vector_25+0x358>
				}
				else if(data==0x36)
     79c:	26 33       	cpi	r18, 0x36	; 54
     79e:	31 f4       	brne	.+12     	; 0x7ac <__vector_25+0x360>
				{
					x_coor=6;
     7a0:	86 e0       	ldi	r24, 0x06	; 6
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 9c 03 	sts	0x039C, r25
     7a8:	80 93 9b 03 	sts	0x039B, r24
				}
				x_recei=1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	90 93 53 03 	sts	0x0353, r25
     7b4:	80 93 52 03 	sts	0x0352, r24
			}
			if(data=='i' || data=='I')
     7b8:	29 36       	cpi	r18, 0x69	; 105
     7ba:	11 f0       	breq	.+4      	; 0x7c0 <__vector_25+0x374>
     7bc:	29 34       	cpi	r18, 0x49	; 73
     7be:	31 f4       	brne	.+12     	; 0x7cc <__vector_25+0x380>
			{
				coordinates=1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	90 93 51 03 	sts	0x0351, r25
     7c8:	80 93 50 03 	sts	0x0350, r24
			}
			if(data=='c' || data=='C')
     7cc:	23 36       	cpi	r18, 0x63	; 99
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <__vector_25+0x388>
     7d0:	23 34       	cpi	r18, 0x43	; 67
     7d2:	f1 f4       	brne	.+60     	; 0x810 <__vector_25+0x3c4>
			{
				uart_sendint(x_coor);
     7d4:	90 91 9b 03 	lds	r25, 0x039B
void uart_sendint(uint8_t data)
{
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     7d8:	80 91 c0 00 	lds	r24, 0x00C0
     7dc:	85 ff       	sbrs	r24, 5
     7de:	fc cf       	rjmp	.-8      	; 0x7d8 <__vector_25+0x38c>
	UDR0 = data; //send the data
     7e0:	90 93 c6 00 	sts	0x00C6, r25
				coordinates=1;
			}
			if(data=='c' || data=='C')
			{
				uart_sendint(x_coor);
				uart_sendint(y_coor);
     7e4:	90 91 8a 03 	lds	r25, 0x038A
void uart_sendint(uint8_t data)
{
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     7e8:	80 91 c0 00 	lds	r24, 0x00C0
     7ec:	85 ff       	sbrs	r24, 5
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <__vector_25+0x39c>
	UDR0 = data; //send the data
     7f0:	90 93 c6 00 	sts	0x00C6, r25
			}
			if(data=='c' || data=='C')
			{
				uart_sendint(x_coor);
				uart_sendint(y_coor);
				uart_sendint(x_dest);
     7f4:	90 91 a1 03 	lds	r25, 0x03A1
void uart_sendint(uint8_t data)
{
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     7f8:	80 91 c0 00 	lds	r24, 0x00C0
     7fc:	85 ff       	sbrs	r24, 5
     7fe:	fc cf       	rjmp	.-8      	; 0x7f8 <__vector_25+0x3ac>
	UDR0 = data; //send the data
     800:	90 93 c6 00 	sts	0x00C6, r25
void uart_sendint(uint8_t data)
{
	/*
	Use this to send a 8bit long piece of data
	 */
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     804:	80 91 c0 00 	lds	r24, 0x00C0
     808:	85 ff       	sbrs	r24, 5
     80a:	fc cf       	rjmp	.-8      	; 0x804 <__vector_25+0x3b8>
	UDR0 = data; //send the data
     80c:	90 93 c6 00 	sts	0x00C6, r25
				uart_sendint(x_dest);
				uart_sendint(x_dest);
			}
		}
	}
}
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <lcd_port_config>:
//Output: void
/**********************************************************************************/
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     832:	87 b1       	in	r24, 0x07	; 7
     834:	87 6f       	ori	r24, 0xF7	; 247
     836:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     838:	88 b1       	in	r24, 0x08	; 8
     83a:	80 78       	andi	r24, 0x80	; 128
     83c:	88 b9       	out	0x08, r24	; 8
}
     83e:	08 95       	ret

00000840 <adc_pin_config>:
//Output: void
/**********************************************************************************/
//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     840:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     842:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     844:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     848:	10 92 08 01 	sts	0x0108, r1
}
     84c:	08 95       	ret

0000084e <motion_pin_config>:
//Input : void
//Output: void
/**********************************************************************************/
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     84e:	81 b1       	in	r24, 0x01	; 1
     850:	8f 60       	ori	r24, 0x0F	; 15
     852:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     854:	82 b1       	in	r24, 0x02	; 2
     856:	80 7f       	andi	r24, 0xF0	; 240
     858:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     85a:	ea e0       	ldi	r30, 0x0A	; 10
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	80 81       	ld	r24, Z
     860:	88 61       	ori	r24, 0x18	; 24
     862:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     864:	eb e0       	ldi	r30, 0x0B	; 11
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	80 81       	ld	r24, Z
     86a:	88 61       	ori	r24, 0x18	; 24
     86c:	80 83       	st	Z, r24
}
     86e:	08 95       	ret

00000870 <timer5_init>:
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
/**********************************************************************************/
void timer5_init()
{
	TCCR5B = 0x00;  //Stop
     870:	e1 e2       	ldi	r30, 0x21	; 33
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	10 82       	st	Z, r1
	TCNT5H = 0xFF;  //Counter higher 8-bit value to which OCR5xH value is compared with
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;  //Counter lower 8-bit value to which OCR5xH value is compared with
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;  //Output compare register high value for Left Motor
     882:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;  //Output compare register low value for Left Motor
     886:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;  //Output compare register high value for Right Motor
     88a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;  //Output compare register low value for Right Motor
     88e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;  //Output compare register high value for Motor C1
     892:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;  //Output compare register low value for Motor C1
     896:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;  /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     89a:	89 ea       	ldi	r24, 0xA9	; 169
     89c:	80 93 20 01 	sts	0x0120, r24
			For Overriding normal port functionality to OCRnA outputs.
			  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;  //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     8a0:	8b e0       	ldi	r24, 0x0B	; 11
     8a2:	80 83       	st	Z, r24
}
     8a4:	08 95       	ret

000008a6 <adc_init>:
//Input  : Void
//Output : void
/**********************************************************************************/
void adc_init()
{
	ADCSRA = 0x00;
     8a6:	ea e7       	ldi	r30, 0x7A	; 122
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	10 82       	st	Z, r1
	ADCSRB = 0x00;    //MUX5 = 0
     8ac:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;   //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;    //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     8ba:	86 e8       	ldi	r24, 0x86	; 134
     8bc:	80 83       	st	Z, r24
}
     8be:	08 95       	ret

000008c0 <ADC_Conversion>:
//Function For ADC Conversion
//Input  : channel number of the ADC
//Output : returns the sampled value
/**********************************************************************************/
unsigned char ADC_Conversion(unsigned char Ch)
{
     8c0:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     8c2:	88 30       	cpi	r24, 0x08	; 8
     8c4:	18 f0       	brcs	.+6      	; 0x8cc <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;
     8cc:	97 70       	andi	r25, 0x07	; 7
     8ce:	90 62       	ori	r25, 0x20	; 32
     8d0:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;   //Set start conversion bit
     8d4:	80 91 7a 00 	lds	r24, 0x007A
     8d8:	80 64       	ori	r24, 0x40	; 64
     8da:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);  //Wait for conversion to complete
     8de:	80 91 7a 00 	lds	r24, 0x007A
     8e2:	84 ff       	sbrs	r24, 4
     8e4:	fc cf       	rjmp	.-8      	; 0x8de <ADC_Conversion+0x1e>
	a=ADCH;
     8e6:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     8ea:	90 91 7a 00 	lds	r25, 0x007A
     8ee:	90 61       	ori	r25, 0x10	; 16
     8f0:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     8f4:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     8f8:	08 95       	ret

000008fa <print_sensor>:

/**********************************************************************************/
//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
/**********************************************************************************/
void print_sensor(char row, char coloumn,unsigned char channel)
{
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	18 2f       	mov	r17, r24
     900:	06 2f       	mov	r16, r22
     902:	84 2f       	mov	r24, r20

	ADC_Value = ADC_Conversion(channel);
     904:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     908:	48 2f       	mov	r20, r24
     90a:	80 93 92 03 	sts	0x0392, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     90e:	81 2f       	mov	r24, r17
     910:	60 2f       	mov	r22, r16
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	23 e0       	ldi	r18, 0x03	; 3
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
}
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <velocity>:
/**********************************************************************************/
//Function for velocity control
/**********************************************************************************/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     922:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     926:	60 93 2a 01 	sts	0x012A, r22
}
     92a:	08 95       	ret

0000092c <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     92c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     92e:	90 7f       	andi	r25, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     930:	8f 70       	andi	r24, 0x0F	; 15
     932:	89 2b       	or	r24, r25
	PORTA = PortARestore;    // executing the command
     934:	82 b9       	out	0x02, r24	; 2
}
     936:	08 95       	ret

00000938 <left_encoder_pin_config>:
/**********************************************************************************/
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
/**********************************************************************************/
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     938:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     93a:	74 9a       	sbi	0x0e, 4	; 14
}
     93c:	08 95       	ret

0000093e <right_encoder_pin_config>:
/**********************************************************************************/
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
/**********************************************************************************/
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     93e:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     940:	75 9a       	sbi	0x0e, 5	; 14
}
     942:	08 95       	ret

00000944 <left_position_encoder_interrupt_init>:
/**********************************************************************************/
//Function to configure INT5 (PORTE 5) pin as input for the left position encoder
/**********************************************************************************/
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     944:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     946:	ea e6       	ldi	r30, 0x6A	; 106
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     950:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     952:	78 94       	sei
}
     954:	08 95       	ret

00000956 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     956:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     958:	ea e6       	ldi	r30, 0x6A	; 106
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	88 60       	ori	r24, 0x08	; 8
     960:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     962:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     964:	78 94       	sei
}
     966:	08 95       	ret

00000968 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     968:	1f 92       	push	r1
     96a:	0f 92       	push	r0
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	0f 92       	push	r0
     970:	11 24       	eor	r1, r1
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     97a:	80 91 42 03 	lds	r24, 0x0342
     97e:	90 91 43 03 	lds	r25, 0x0343
     982:	a0 91 44 03 	lds	r26, 0x0344
     986:	b0 91 45 03 	lds	r27, 0x0345
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	a1 1d       	adc	r26, r1
     98e:	b1 1d       	adc	r27, r1
     990:	80 93 42 03 	sts	0x0342, r24
     994:	90 93 43 03 	sts	0x0343, r25
     998:	a0 93 44 03 	sts	0x0344, r26
     99c:	b0 93 45 03 	sts	0x0345, r27
}
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	af 93       	push	r26
     9c2:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     9c4:	80 91 3e 03 	lds	r24, 0x033E
     9c8:	90 91 3f 03 	lds	r25, 0x033F
     9cc:	a0 91 40 03 	lds	r26, 0x0340
     9d0:	b0 91 41 03 	lds	r27, 0x0341
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	a1 1d       	adc	r26, r1
     9d8:	b1 1d       	adc	r27, r1
     9da:	80 93 3e 03 	sts	0x033E, r24
     9de:	90 93 3f 03 	sts	0x033F, r25
     9e2:	a0 93 40 03 	sts	0x0340, r26
     9e6:	b0 93 41 03 	sts	0x0341, r27
}
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <forward>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     9fc:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     9fe:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a00:	86 60       	ori	r24, 0x06	; 6
	PORTA = PortARestore;    // executing the command
     a02:	82 b9       	out	0x02, r24	; 2


void forward (void) //both wheels forward
{
	motion_set(0x06);
}
     a04:	08 95       	ret

00000a06 <back>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a06:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a08:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a0a:	89 60       	ori	r24, 0x09	; 9
	PORTA = PortARestore;    // executing the command
     a0c:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
	motion_set(0x09);
}
     a0e:	08 95       	ret

00000a10 <left>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a10:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a12:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a14:	85 60       	ori	r24, 0x05	; 5
	PORTA = PortARestore;    // executing the command
     a16:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
}
     a18:	08 95       	ret

00000a1a <right>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a1a:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a1c:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a1e:	8a 60       	ori	r24, 0x0A	; 10
	PORTA = PortARestore;    // executing the command
     a20:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
}
     a22:	08 95       	ret

00000a24 <soft_left>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a24:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a26:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a28:	84 60       	ori	r24, 0x04	; 4
	PORTA = PortARestore;    // executing the command
     a2a:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
}
     a2c:	08 95       	ret

00000a2e <soft_right>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a2e:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a30:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a32:	82 60       	ori	r24, 0x02	; 2
	PORTA = PortARestore;    // executing the command
     a34:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
}
     a36:	08 95       	ret

00000a38 <soft_left_2>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a38:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a3a:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a3c:	81 60       	ori	r24, 0x01	; 1
	PORTA = PortARestore;    // executing the command
     a3e:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
}
     a40:	08 95       	ret

00000a42 <soft_right_2>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a42:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a44:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a46:	88 60       	ori	r24, 0x08	; 8
	PORTA = PortARestore;    // executing the command
     a48:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
}
     a4a:	08 95       	ret

00000a4c <stop>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a4c:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a4e:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
     a50:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
	motion_set(0x00);
}
     a52:	08 95       	ret

00000a54 <angle_rotate>:
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
	ShaftCountRight = 0;
     a54:	10 92 42 03 	sts	0x0342, r1
     a58:	10 92 43 03 	sts	0x0343, r1
     a5c:	10 92 44 03 	sts	0x0344, r1
     a60:	10 92 45 03 	sts	0x0345, r1
	ShaftCountLeft = 0;
     a64:	10 92 3e 03 	sts	0x033E, r1
     a68:	10 92 3f 03 	sts	0x033F, r1
     a6c:	10 92 40 03 	sts	0x0340, r1
     a70:	10 92 41 03 	sts	0x0341, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
     a80:	28 e4       	ldi	r18, 0x48	; 72
     a82:	31 ee       	ldi	r19, 0xE1	; 225
     a84:	42 e8       	ldi	r20, 0x82	; 130
     a86:	50 e4       	ldi	r21, 0x40	; 64
     a88:	0e 94 0e 1a 	call	0x341c	; 0x341c <__divsf3>
     a8c:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
     a90:	67 2b       	or	r22, r23
     a92:	21 f4       	brne	.+8      	; 0xa9c <angle_rotate+0x48>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     a94:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     a96:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
     a98:	82 b9       	out	0x02, r24	; 2
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
			break;
	}
	stop(); //Stop robot
}
     a9a:	08 95       	ret
     a9c:	ff cf       	rjmp	.-2      	; 0xa9c <angle_rotate+0x48>

00000a9e <linear_distance_mm>:
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;

	ShaftCountRight = 0;
     a9e:	10 92 42 03 	sts	0x0342, r1
     aa2:	10 92 43 03 	sts	0x0343, r1
     aa6:	10 92 44 03 	sts	0x0344, r1
     aaa:	10 92 45 03 	sts	0x0345, r1
     aae:	ff cf       	rjmp	.-2      	; 0xaae <linear_distance_mm+0x10>

00000ab0 <forward_mm>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     ab0:	22 b1       	in	r18, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     ab2:	20 7f       	andi	r18, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ab4:	26 60       	ori	r18, 0x06	; 6
	PORTA = PortARestore;    // executing the command
     ab6:	22 b9       	out	0x02, r18	; 2
//				bot moves DistanceInMM distance
/**********************************************************************************/
void forward_mm(unsigned int DistanceInMM)
{
	forward();
	linear_distance_mm(DistanceInMM);
     ab8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <linear_distance_mm>
}
     abc:	08 95       	ret

00000abe <back_mm>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     abe:	22 b1       	in	r18, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     ac0:	20 7f       	andi	r18, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ac2:	29 60       	ori	r18, 0x09	; 9
	PORTA = PortARestore;    // executing the command
     ac4:	22 b9       	out	0x02, r18	; 2
//				bot moves DistanceInMM distance
/**********************************************************************************/
void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
     ac6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <linear_distance_mm>
}
     aca:	08 95       	ret

00000acc <left_degrees>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     acc:	22 b1       	in	r18, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     ace:	20 7f       	andi	r18, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ad0:	25 60       	ori	r18, 0x05	; 5
	PORTA = PortARestore;    // executing the command
     ad2:	22 b9       	out	0x02, r18	; 2
/**********************************************************************************/
void left_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
	angle_rotate(Degrees);
     ad4:	0e 94 2a 05 	call	0xa54	; 0xa54 <angle_rotate>
}
     ad8:	08 95       	ret

00000ada <right_degrees>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     ada:	22 b1       	in	r18, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     adc:	20 7f       	andi	r18, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ade:	2a 60       	ori	r18, 0x0A	; 10
	PORTA = PortARestore;    // executing the command
     ae0:	22 b9       	out	0x02, r18	; 2
/**********************************************************************************/
void right_degrees(unsigned int Degrees)
{
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
	angle_rotate(Degrees);
     ae2:	0e 94 2a 05 	call	0xa54	; 0xa54 <angle_rotate>
}
     ae6:	08 95       	ret

00000ae8 <port_init>:
//Output: void
/**********************************************************************************/
//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     ae8:	87 b1       	in	r24, 0x07	; 7
     aea:	87 6f       	ori	r24, 0xF7	; 247
     aec:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     aee:	88 b1       	in	r24, 0x08	; 8
     af0:	80 78       	andi	r24, 0x80	; 128
     af2:	88 b9       	out	0x08, r24	; 8
//Output: void
/**********************************************************************************/
//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     af4:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     af6:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     af8:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     afc:	10 92 08 01 	sts	0x0108, r1
//Input : void
//Output: void
/**********************************************************************************/
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     b00:	81 b1       	in	r24, 0x01	; 1
     b02:	8f 60       	ori	r24, 0x0F	; 15
     b04:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     b06:	82 b1       	in	r24, 0x02	; 2
     b08:	80 7f       	andi	r24, 0xF0	; 240
     b0a:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     b0c:	ea e0       	ldi	r30, 0x0A	; 10
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	80 81       	ld	r24, Z
     b12:	88 61       	ori	r24, 0x18	; 24
     b14:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     b16:	eb e0       	ldi	r30, 0x0B	; 11
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	80 81       	ld	r24, Z
     b1c:	88 61       	ori	r24, 0x18	; 24
     b1e:	80 83       	st	Z, r24
/**********************************************************************************/
//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
/**********************************************************************************/
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     b20:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     b22:	74 9a       	sbi	0x0e, 4	; 14
/**********************************************************************************/
//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
/**********************************************************************************/
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     b24:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     b26:	75 9a       	sbi	0x0e, 5	; 14
	lcd_port_config();
	adc_pin_config();
	motion_pin_config();  //robot motion pins config
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
}
     b28:	08 95       	ret

00000b2a <init_devices>:
//Output : void
//Description : configures LCD ports,ADC pins,bot motor pins
/**********************************************************************************/
void init_devices()
{
	cli(); //Clears the global interrupt
     b2a:	f8 94       	cli
	port_init();  //Initializes all the ports
     b2c:	0e 94 74 05 	call	0xae8	; 0xae8 <port_init>
/**********************************************************************************/
//Function to configure INT5 (PORTE 5) pin as input for the left position encoder
/**********************************************************************************/
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     b30:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     b32:	ea e6       	ldi	r30, 0x6A	; 106
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	82 60       	ori	r24, 0x02	; 2
     b3a:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     b3c:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     b3e:	78 94       	sei
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     b40:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     b42:	ea e6       	ldi	r30, 0x6A	; 106
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     b4c:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     b4e:	78 94       	sei
//Input  : Void
//Output : void
/**********************************************************************************/
void adc_init()
{
	ADCSRA = 0x00;
     b50:	ea e7       	ldi	r30, 0x7A	; 122
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	10 82       	st	Z, r1
	ADCSRB = 0x00;    //MUX5 = 0
     b56:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;   //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     b5a:	80 e2       	ldi	r24, 0x20	; 32
     b5c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     b60:	80 e8       	ldi	r24, 0x80	; 128
     b62:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;    //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     b64:	86 e8       	ldi	r24, 0x86	; 134
     b66:	80 83       	st	Z, r24
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
/**********************************************************************************/
void timer5_init()
{
	TCCR5B = 0x00;  //Stop
     b68:	e1 e2       	ldi	r30, 0x21	; 33
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;  //Counter higher 8-bit value to which OCR5xH value is compared with
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;  //Counter lower 8-bit value to which OCR5xH value is compared with
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;  //Output compare register high value for Left Motor
     b7a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;  //Output compare register low value for Left Motor
     b7e:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;  //Output compare register high value for Right Motor
     b82:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;  //Output compare register low value for Right Motor
     b86:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;  //Output compare register high value for Motor C1
     b8a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;  //Output compare register low value for Motor C1
     b8e:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;  /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b92:	89 ea       	ldi	r24, 0xA9	; 169
     b94:	80 93 20 01 	sts	0x0120, r24
			For Overriding normal port functionality to OCRnA outputs.
			  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;  //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b98:	8b e0       	ldi	r24, 0x0B	; 11
     b9a:	80 83       	st	Z, r24
//Input : void
//Output: void
/**********************************************************************************/
void uart_start(void)
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
     b9c:	a1 ec       	ldi	r26, 0xC1	; 193
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	8c 91       	ld	r24, X
     ba2:	88 61       	ori	r24, 0x18	; 24
     ba4:	8c 93       	st	X, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
     ba6:	e2 ec       	ldi	r30, 0xC2	; 194
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	86 60       	ori	r24, 0x06	; 6
     bae:	80 83       	st	Z, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
     bb0:	85 e0       	ldi	r24, 0x05	; 5
     bb2:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
     bb6:	10 92 c5 00 	sts	0x00C5, r1

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
     bba:	8c 91       	ld	r24, X
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8c 93       	st	X, r24
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	adc_init();
	timer5_init();
	uart_start();
	sei();   // Enables the global interrupt
     bc0:	78 94       	sei
}
     bc2:	08 95       	ret

00000bc4 <adc_sample>:
//Output : void
//Description : samples the WL sensors
/**********************************************************************************/
void adc_sample()
{
	Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     bca:	80 93 46 03 	sts	0x0346, r24
	Center_white_line = ADC_Conversion(2);  //Getting data of Center WL Sensor
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     bd4:	80 93 47 03 	sts	0x0347, r24
	Right_white_line = ADC_Conversion(1);   //Getting data of Right WL Sensor
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     bde:	80 93 48 03 	sts	0x0348, r24
}
     be2:	08 95       	ret

00000be4 <adjust_path>:
//Output : void
//Description : Responsible for bringing robot back to track when it moves out of the track
//				
/**********************************************************************************/
void adjust_path()
{
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
	adc_sample();
     be8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	lcd_print(2,3,7,1);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	47 e0       	ldi	r20, 0x07	; 7
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	21 e0       	ldi	r18, 0x01	; 1
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	5c c0       	rjmp	.+184    	; 0xcba <adjust_path+0xd6>
	int backcount=0;
	while(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
	{	
		lcd_print(2,3,5,1);
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	45 e0       	ldi	r20, 0x05	; 5
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		left_degrees(2);
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		adc_sample();
     c1a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
     c1e:	80 91 47 03 	lds	r24, 0x0347
     c22:	80 34       	cpi	r24, 0x40	; 64
     c24:	08 f0       	brcs	.+2      	; 0xc28 <adjust_path+0x44>
     c26:	56 c0       	rjmp	.+172    	; 0xcd4 <adjust_path+0xf0>
     c28:	80 91 46 03 	lds	r24, 0x0346
     c2c:	80 34       	cpi	r24, 0x40	; 64
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <adjust_path+0x4e>
     c30:	51 c0       	rjmp	.+162    	; 0xcd4 <adjust_path+0xf0>
     c32:	80 91 48 03 	lds	r24, 0x0348
     c36:	80 34       	cpi	r24, 0x40	; 64
     c38:	08 f0       	brcs	.+2      	; 0xc3c <adjust_path+0x58>
     c3a:	4c c0       	rjmp	.+152    	; 0xcd4 <adjust_path+0xf0>
		{
			break;
		}
		right_degrees(4);
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		adc_sample();
     c44:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>

		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
     c48:	80 91 47 03 	lds	r24, 0x0347
     c4c:	80 34       	cpi	r24, 0x40	; 64
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <adjust_path+0x6e>
     c50:	41 c0       	rjmp	.+130    	; 0xcd4 <adjust_path+0xf0>
     c52:	80 91 46 03 	lds	r24, 0x0346
     c56:	80 34       	cpi	r24, 0x40	; 64
     c58:	e8 f5       	brcc	.+122    	; 0xcd4 <adjust_path+0xf0>
     c5a:	80 91 48 03 	lds	r24, 0x0348
     c5e:	80 34       	cpi	r24, 0x40	; 64
     c60:	c8 f5       	brcc	.+114    	; 0xcd4 <adjust_path+0xf0>
		{
			break;
		}

		right_degrees(2);
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		adc_sample();
     c6a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
     c6e:	80 91 47 03 	lds	r24, 0x0347
     c72:	80 34       	cpi	r24, 0x40	; 64
     c74:	78 f5       	brcc	.+94     	; 0xcd4 <adjust_path+0xf0>
     c76:	80 91 46 03 	lds	r24, 0x0346
     c7a:	80 34       	cpi	r24, 0x40	; 64
     c7c:	58 f5       	brcc	.+86     	; 0xcd4 <adjust_path+0xf0>
     c7e:	80 91 48 03 	lds	r24, 0x0348
     c82:	80 34       	cpi	r24, 0x40	; 64
     c84:	38 f5       	brcc	.+78     	; 0xcd4 <adjust_path+0xf0>
		{
			break;
		}
		left_degrees(4);
     c86:	84 e0       	ldi	r24, 0x04	; 4
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		adc_sample();
     c8e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>

		if(Center_white_line>=BLACK_LINE || Left_white_line>=BLACK_LINE || Right_white_line>=BLACK_LINE)
     c92:	80 91 47 03 	lds	r24, 0x0347
     c96:	80 34       	cpi	r24, 0x40	; 64
     c98:	e8 f4       	brcc	.+58     	; 0xcd4 <adjust_path+0xf0>
     c9a:	80 91 46 03 	lds	r24, 0x0346
     c9e:	80 34       	cpi	r24, 0x40	; 64
     ca0:	c8 f4       	brcc	.+50     	; 0xcd4 <adjust_path+0xf0>
     ca2:	80 91 48 03 	lds	r24, 0x0348
     ca6:	80 34       	cpi	r24, 0x40	; 64
     ca8:	a8 f4       	brcc	.+42     	; 0xcd4 <adjust_path+0xf0>
		{
			break;
		}


		back_mm(5);
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
		if(backcount > 20)
     cb2:	c5 31       	cpi	r28, 0x15	; 21
     cb4:	d1 05       	cpc	r29, r1
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <adjust_path+0xf0>
		{
			break;
		}
		backcount++;
     cb8:	21 96       	adiw	r28, 0x01	; 1
void adjust_path()
{
	adc_sample();
	lcd_print(2,3,7,1);
	int backcount=0;
	while(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
     cba:	80 91 47 03 	lds	r24, 0x0347
     cbe:	80 34       	cpi	r24, 0x40	; 64
     cc0:	48 f4       	brcc	.+18     	; 0xcd4 <adjust_path+0xf0>
     cc2:	80 91 46 03 	lds	r24, 0x0346
     cc6:	80 34       	cpi	r24, 0x40	; 64
     cc8:	28 f4       	brcc	.+10     	; 0xcd4 <adjust_path+0xf0>
     cca:	80 91 48 03 	lds	r24, 0x0348
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <adjust_path+0xf0>
     cd2:	97 cf       	rjmp	.-210    	; 0xc02 <adjust_path+0x1e>
		{
			break;
		}
		backcount++;
	}
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <sample_sensor>:
//Description : Responsible for sampling sensor values
//				
/**********************************************************************************/
void sample_sensor()
{
	Left_IR_sensor2 = ADC_Conversion(5);
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     ce0:	80 93 66 03 	sts	0x0366, r24
	Front_IR_Sensor = ADC_Conversion(6);
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     cea:	80 93 69 03 	sts	0x0369, r24
	Right_IR_sensor4 = ADC_Conversion(7);
     cee:	87 e0       	ldi	r24, 0x07	; 7
     cf0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     cf4:	80 93 67 03 	sts	0x0367, r24
	Front_Sharp_Sensor = ADC_Conversion(11);
     cf8:	8b e0       	ldi	r24, 0x0B	; 11
     cfa:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
     cfe:	80 93 68 03 	sts	0x0368, r24
}
     d02:	08 95       	ret

00000d04 <checkobst_backpath>:
//				checks if the sensor values are under acceptable values
//				If obstacle is detected, waits for the specified time and sample again
//				Returns when the obstacle moves
/**********************************************************************************/
void checkobst_backpath()
{
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
	sample_sensor();
     d18:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
     d1c:	c9 e1       	ldi	r28, 0x19	; 25
     d1e:	d0 e0       	ldi	r29, 0x00	; 0
     d20:	47 c0       	rjmp	.+142    	; 0xdb0 <checkobst_backpath+0xac>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     d22:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     d24:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
     d26:	82 b9       	out	0x02, r24	; 2
	sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		stop();
		//back_mm(80);
		_delay_ms(delayvalueback);
     d28:	60 91 34 02 	lds	r22, 0x0234
     d2c:	70 91 35 02 	lds	r23, 0x0235
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	4a e7       	ldi	r20, 0x7A	; 122
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
     d48:	7b 01       	movw	r14, r22
     d4a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
     d58:	88 23       	and	r24, r24
     d5a:	1c f4       	brge	.+6      	; 0xd62 <checkobst_backpath+0x5e>
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 c0       	rjmp	.+68     	; 0xda6 <checkobst_backpath+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
     d62:	c8 01       	movw	r24, r16
     d64:	b7 01       	movw	r22, r14
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	57 e4       	ldi	r21, 0x47	; 71
     d6e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
     d72:	18 16       	cp	r1, r24
     d74:	a4 f4       	brge	.+40     	; 0xd9e <checkobst_backpath+0x9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e2       	ldi	r20, 0x20	; 32
     d80:	51 e4       	ldi	r21, 0x41	; 65
     d82:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
     d86:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <checkobst_backpath+0x92>
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <checkobst_backpath+0x8a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	61 50       	subi	r22, 0x01	; 1
     d94:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	61 15       	cp	r22, r1
     d98:	71 05       	cpc	r23, r1
     d9a:	c1 f7       	brne	.-16     	; 0xd8c <checkobst_backpath+0x88>
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <checkobst_backpath+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	c8 01       	movw	r24, r16
     da0:	b7 01       	movw	r22, r14
     da2:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
     da6:	cb 01       	movw	r24, r22
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <checkobst_backpath+0xa4>
		sample_sensor();
     dac:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
//				Returns when the obstacle moves
/**********************************************************************************/
void checkobst_backpath()
{
	sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
     db0:	80 91 68 03 	lds	r24, 0x0368
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	20 91 04 02 	lds	r18, 0x0204
     dba:	30 91 05 02 	lds	r19, 0x0205
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <checkobst_backpath+0xc2>
     dc4:	ae cf       	rjmp	.-164    	; 0xd22 <checkobst_backpath+0x1e>
     dc6:	20 91 06 02 	lds	r18, 0x0206
     dca:	30 91 07 02 	lds	r19, 0x0207
     dce:	80 91 69 03 	lds	r24, 0x0369
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	08 f4       	brcc	.+2      	; 0xddc <checkobst_backpath+0xd8>
     dda:	a3 cf       	rjmp	.-186    	; 0xd22 <checkobst_backpath+0x1e>
     ddc:	80 91 66 03 	lds	r24, 0x0366
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	82 17       	cp	r24, r18
     de4:	93 07       	cpc	r25, r19
     de6:	08 f4       	brcc	.+2      	; 0xdea <checkobst_backpath+0xe6>
     de8:	9c cf       	rjmp	.-200    	; 0xd22 <checkobst_backpath+0x1e>
     dea:	80 91 67 03 	lds	r24, 0x0367
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	82 17       	cp	r24, r18
     df2:	93 07       	cpc	r25, r19
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <checkobst_backpath+0xf4>
     df6:	95 cf       	rjmp	.-214    	; 0xd22 <checkobst_backpath+0x1e>
		stop();
		//back_mm(80);
		_delay_ms(delayvalueback);
		sample_sensor();
	}
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	08 95       	ret

00000e0e <grid_forward>:
//Output : void
//Description : Responsible for moving bot by 1 grid
//				
/**********************************************************************************/
void grid_forward()
{
     e0e:	1f 93       	push	r17
	adc_sample(); 
     e10:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	lcd_print(2,3,8,1);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	63 e0       	ldi	r22, 0x03	; 3
     e18:	48 e0       	ldi	r20, 0x08	; 8
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	21 e0       	ldi	r18, 0x01	; 1
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		}
		adc_sample();
		sample_sensor();
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 )
		{
			obstflag=1;
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	87 c0       	rjmp	.+270    	; 0xf36 <grid_forward+0x128>
	lcd_print(2,3,8,1);
	while(!(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE) )
	{
		//forward_mm(5);

		checkobst_backpath();
     e28:	0e 94 82 06 	call	0xd04	; 0xd04 <checkobst_backpath>

		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE)
     e2c:	80 91 47 03 	lds	r24, 0x0347
     e30:	80 34       	cpi	r24, 0x40	; 64
     e32:	60 f0       	brcs	.+24     	; 0xe4c <grid_forward+0x3e>
     e34:	80 91 46 03 	lds	r24, 0x0346
     e38:	80 34       	cpi	r24, 0x40	; 64
     e3a:	40 f0       	brcs	.+16     	; 0xe4c <grid_forward+0x3e>
     e3c:	80 91 48 03 	lds	r24, 0x0348
     e40:	80 34       	cpi	r24, 0x40	; 64
     e42:	20 f4       	brcc	.+8      	; 0xe4c <grid_forward+0x3e>
		{
			left_degrees(1);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE)
     e4c:	80 91 47 03 	lds	r24, 0x0347
     e50:	80 34       	cpi	r24, 0x40	; 64
     e52:	60 f0       	brcs	.+24     	; 0xe6c <grid_forward+0x5e>
     e54:	80 91 46 03 	lds	r24, 0x0346
     e58:	80 34       	cpi	r24, 0x40	; 64
     e5a:	40 f4       	brcc	.+16     	; 0xe6c <grid_forward+0x5e>
     e5c:	80 91 48 03 	lds	r24, 0x0348
     e60:	80 34       	cpi	r24, 0x40	; 64
     e62:	20 f0       	brcs	.+8      	; 0xe6c <grid_forward+0x5e>
		{
			right_degrees(1);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
     e6c:	80 91 47 03 	lds	r24, 0x0347
     e70:	80 34       	cpi	r24, 0x40	; 64
     e72:	60 f0       	brcs	.+24     	; 0xe8c <grid_forward+0x7e>
     e74:	80 91 46 03 	lds	r24, 0x0346
     e78:	80 34       	cpi	r24, 0x40	; 64
     e7a:	40 f4       	brcc	.+16     	; 0xe8c <grid_forward+0x7e>
     e7c:	80 91 48 03 	lds	r24, 0x0348
     e80:	80 34       	cpi	r24, 0x40	; 64
     e82:	20 f4       	brcc	.+8      	; 0xe8c <grid_forward+0x7e>
		{
			forward_mm(5);
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE)
     e8c:	80 91 47 03 	lds	r24, 0x0347
     e90:	80 34       	cpi	r24, 0x40	; 64
     e92:	60 f4       	brcc	.+24     	; 0xeac <grid_forward+0x9e>
     e94:	80 91 46 03 	lds	r24, 0x0346
     e98:	80 34       	cpi	r24, 0x40	; 64
     e9a:	40 f4       	brcc	.+16     	; 0xeac <grid_forward+0x9e>
     e9c:	80 91 48 03 	lds	r24, 0x0348
     ea0:	80 34       	cpi	r24, 0x40	; 64
     ea2:	20 f0       	brcs	.+8      	; 0xeac <grid_forward+0x9e>
		{
			right_degrees(2);
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE)
     eac:	80 91 47 03 	lds	r24, 0x0347
     eb0:	80 34       	cpi	r24, 0x40	; 64
     eb2:	60 f4       	brcc	.+24     	; 0xecc <grid_forward+0xbe>
     eb4:	80 91 46 03 	lds	r24, 0x0346
     eb8:	80 34       	cpi	r24, 0x40	; 64
     eba:	40 f0       	brcs	.+16     	; 0xecc <grid_forward+0xbe>
     ebc:	80 91 48 03 	lds	r24, 0x0348
     ec0:	80 34       	cpi	r24, 0x40	; 64
     ec2:	20 f4       	brcc	.+8      	; 0xecc <grid_forward+0xbe>
		{
			left_degrees(2);
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE)
     ecc:	80 91 47 03 	lds	r24, 0x0347
     ed0:	80 34       	cpi	r24, 0x40	; 64
     ed2:	50 f4       	brcc	.+20     	; 0xee8 <grid_forward+0xda>
     ed4:	80 91 46 03 	lds	r24, 0x0346
     ed8:	80 34       	cpi	r24, 0x40	; 64
     eda:	30 f4       	brcc	.+12     	; 0xee8 <grid_forward+0xda>
     edc:	80 91 48 03 	lds	r24, 0x0348
     ee0:	80 34       	cpi	r24, 0x40	; 64
     ee2:	10 f4       	brcc	.+4      	; 0xee8 <grid_forward+0xda>
		{
			//stop();
			adjust_path();
     ee4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <adjust_path>

		}
		adc_sample();
     ee8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
		sample_sensor();
     eec:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 )
     ef0:	80 91 68 03 	lds	r24, 0x0368
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	20 91 04 02 	lds	r18, 0x0204
     efa:	30 91 05 02 	lds	r19, 0x0205
     efe:	28 17       	cp	r18, r24
     f00:	39 07       	cpc	r19, r25
     f02:	a0 f0       	brcs	.+40     	; 0xf2c <grid_forward+0x11e>
     f04:	20 91 06 02 	lds	r18, 0x0206
     f08:	30 91 07 02 	lds	r19, 0x0207
     f0c:	80 91 69 03 	lds	r24, 0x0369
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	50 f0       	brcs	.+20     	; 0xf2c <grid_forward+0x11e>
     f18:	80 91 66 03 	lds	r24, 0x0366
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	82 17       	cp	r24, r18
     f20:	93 07       	cpc	r25, r19
     f22:	20 f0       	brcs	.+8      	; 0xf2c <grid_forward+0x11e>
     f24:	80 91 67 03 	lds	r24, 0x0367
     f28:	88 23       	and	r24, r24
     f2a:	29 f0       	breq	.+10     	; 0xf36 <grid_forward+0x128>
		{
			obstflag=1;
     f2c:	10 93 5c 03 	sts	0x035C, r17
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
     f30:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
     f32:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
     f34:	82 b9       	out	0x02, r24	; 2
/**********************************************************************************/
void grid_forward()
{
	adc_sample(); 
	lcd_print(2,3,8,1);
	while(!(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE) )
     f36:	80 91 47 03 	lds	r24, 0x0347
     f3a:	80 34       	cpi	r24, 0x40	; 64
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <grid_forward+0x132>
     f3e:	74 cf       	rjmp	.-280    	; 0xe28 <grid_forward+0x1a>
     f40:	80 91 46 03 	lds	r24, 0x0346
     f44:	80 34       	cpi	r24, 0x40	; 64
     f46:	08 f4       	brcc	.+2      	; 0xf4a <grid_forward+0x13c>
     f48:	6f cf       	rjmp	.-290    	; 0xe28 <grid_forward+0x1a>
     f4a:	80 91 48 03 	lds	r24, 0x0348
     f4e:	80 34       	cpi	r24, 0x40	; 64
     f50:	08 f4       	brcc	.+2      	; 0xf54 <grid_forward+0x146>
     f52:	6a cf       	rjmp	.-300    	; 0xe28 <grid_forward+0x1a>
		{
			obstflag=1;
			stop();	
		}
	}
	forward_mm(90);
     f54:	8a e5       	ldi	r24, 0x5A	; 90
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
	return;
}
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret

00000f60 <handle_obst_backward>:
//Output : void
//Description : Responsible for rerouting the bot based on the obstacle position
//				
/**********************************************************************************/
void handle_obst_backward()
{
     f60:	af 92       	push	r10
     f62:	bf 92       	push	r11
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
	if((y_reached == 0) && currentcounty>2)			// bot is in the backward direction and bot has not matched counter 'y' coordinate
     f74:	80 91 7e 03 	lds	r24, 0x037E
     f78:	90 91 7f 03 	lds	r25, 0x037F
     f7c:	89 2b       	or	r24, r25
     f7e:	09 f0       	breq	.+2      	; 0xf82 <handle_obst_backward+0x22>
     f80:	12 c2       	rjmp	.+1060   	; 0x13a6 <handle_obst_backward+0x446>
     f82:	80 91 78 03 	lds	r24, 0x0378
     f86:	90 91 79 03 	lds	r25, 0x0379
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	91 05       	cpc	r25, r1
     f8e:	0c f4       	brge	.+2      	; 0xf92 <handle_obst_backward+0x32>
     f90:	7c c0       	rjmp	.+248    	; 0x108a <handle_obst_backward+0x12a>
	{
		//for(i=0;i<BOT_DELAY_BACKWARDY;i++)
		//{
		lcd_print(2,3,9,1);
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	63 e0       	ldi	r22, 0x03	; 3
     f96:	49 e0       	ldi	r20, 0x09	; 9
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	9e e4       	ldi	r25, 0x4E	; 78
     fa6:	29 e1       	ldi	r18, 0x19	; 25
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	f9 01       	movw	r30, r18
     fac:	31 97       	sbiw	r30, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <handle_obst_backward+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb2:	d9 f7       	brne	.-10     	; 0xfaa <handle_obst_backward+0x4a>
		_delay_ms(2000);
		sample_sensor();
     fb4:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
     fb8:	80 91 68 03 	lds	r24, 0x0368
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	20 91 04 02 	lds	r18, 0x0204
     fc2:	30 91 05 02 	lds	r19, 0x0205
     fc6:	28 17       	cp	r18, r24
     fc8:	39 07       	cpc	r19, r25
     fca:	b8 f0       	brcs	.+46     	; 0xffa <handle_obst_backward+0x9a>
     fcc:	20 91 06 02 	lds	r18, 0x0206
     fd0:	30 91 07 02 	lds	r19, 0x0207
     fd4:	80 91 69 03 	lds	r24, 0x0369
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	82 17       	cp	r24, r18
     fdc:	93 07       	cpc	r25, r19
     fde:	68 f0       	brcs	.+26     	; 0xffa <handle_obst_backward+0x9a>
     fe0:	80 91 66 03 	lds	r24, 0x0366
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	38 f0       	brcs	.+14     	; 0xffa <handle_obst_backward+0x9a>
     fec:	80 91 67 03 	lds	r24, 0x0367
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	82 17       	cp	r24, r18
     ff4:	93 07       	cpc	r25, r19
     ff6:	08 f0       	brcs	.+2      	; 0xffa <handle_obst_backward+0x9a>
     ff8:	ce c2       	rjmp	.+1436   	; 0x1596 <handle_obst_backward+0x636>
		{
			return;
		}
		sample_sensor();
     ffa:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		//}
		right_degrees(180);							// rerouting to other path by taking 180 degree turn
     ffe:	84 eb       	ldi	r24, 0xB4	; 180
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		back_mm(30);
    1006:	8e e1       	ldi	r24, 0x1E	; 30
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
		sample_sensor();
    100e:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		//if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
		//{
		grid_forward();								// moving forward by a grid_forward
    1012:	0e 94 07 07 	call	0xe0e	; 0xe0e <grid_forward>
		//_delay_ms(5000);
		left_degrees(90);
    1016:	8a e5       	ldi	r24, 0x5A	; 90
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		lcd_print(2,1,currentcountx,2);
    101e:	40 91 76 03 	lds	r20, 0x0376
    1022:	50 91 77 03 	lds	r21, 0x0377
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <handle_obst_backward+0xe0>
		//_delay_ms(5000);
		while(currentcountx!=1)						// rerouting till current 'x' is equal to 1
		{
			grid_forward();
    1028:	0e 94 07 07 	call	0xe0e	; 0xe0e <grid_forward>
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
    102c:	40 91 76 03 	lds	r20, 0x0376
    1030:	50 91 77 03 	lds	r21, 0x0377
    1034:	41 50       	subi	r20, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	50 93 77 03 	sts	0x0377, r21
    103c:	40 93 76 03 	sts	0x0376, r20
			lcd_print(2,1,currentcountx,2);
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		grid_forward();								// moving forward by a grid_forward
		//_delay_ms(5000);
		left_degrees(90);
		lcd_print(2,1,currentcountx,2);
		//_delay_ms(5000);
		while(currentcountx!=1)						// rerouting till current 'x' is equal to 1
    104c:	80 91 76 03 	lds	r24, 0x0376
    1050:	90 91 77 03 	lds	r25, 0x0377
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	39 f7       	brne	.-50     	; 0x1028 <handle_obst_backward+0xc8>
			grid_forward();
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
			lcd_print(2,1,currentcountx,2);
		}
		back_reroute=1;
    105a:	90 93 64 03 	sts	0x0364, r25
    105e:	80 93 63 03 	sts	0x0363, r24
		if((Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE))
    1062:	80 91 47 03 	lds	r24, 0x0347
    1066:	80 34       	cpi	r24, 0x40	; 64
    1068:	08 f4       	brcc	.+2      	; 0x106c <handle_obst_backward+0x10c>
    106a:	9f c0       	rjmp	.+318    	; 0x11aa <handle_obst_backward+0x24a>
    106c:	80 91 46 03 	lds	r24, 0x0346
    1070:	80 34       	cpi	r24, 0x40	; 64
    1072:	08 f4       	brcc	.+2      	; 0x1076 <handle_obst_backward+0x116>
    1074:	9a c0       	rjmp	.+308    	; 0x11aa <handle_obst_backward+0x24a>
    1076:	80 91 48 03 	lds	r24, 0x0348
    107a:	80 34       	cpi	r24, 0x40	; 64
    107c:	08 f4       	brcc	.+2      	; 0x1080 <handle_obst_backward+0x120>
    107e:	95 c0       	rjmp	.+298    	; 0x11aa <handle_obst_backward+0x24a>
		{
			left_degrees(90);
    1080:	8a e5       	ldi	r24, 0x5A	; 90
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
    1088:	86 c2       	rjmp	.+1292   	; 0x1596 <handle_obst_backward+0x636>
		else buzzer_on();

		//}

	}	
	else if((y_reached == 0) && currentcounty<1)	// rerouting when present 'y coordinate is lewss than 1' 
    108a:	18 16       	cp	r1, r24
    108c:	19 06       	cpc	r1, r25
    108e:	0c f4       	brge	.+2      	; 0x1092 <handle_obst_backward+0x132>
    1090:	90 c0       	rjmp	.+288    	; 0x11b2 <handle_obst_backward+0x252>
	{
		//for(i=0;i<BOT_DELAY_BACKWARDY;i++)
		//{
		lcd_print(2,3,9,1);
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	63 e0       	ldi	r22, 0x03	; 3
    1096:	49 e0       	ldi	r20, 0x09	; 9
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	9e e4       	ldi	r25, 0x4E	; 78
    10a6:	29 e1       	ldi	r18, 0x19	; 25
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	f9 01       	movw	r30, r18
    10ac:	31 97       	sbiw	r30, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <handle_obst_backward+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b2:	d9 f7       	brne	.-10     	; 0x10aa <handle_obst_backward+0x14a>
		_delay_ms(2000);
		sample_sensor();
    10b4:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    10b8:	80 91 68 03 	lds	r24, 0x0368
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	20 91 04 02 	lds	r18, 0x0204
    10c2:	30 91 05 02 	lds	r19, 0x0205
    10c6:	28 17       	cp	r18, r24
    10c8:	39 07       	cpc	r19, r25
    10ca:	b8 f0       	brcs	.+46     	; 0x10fa <handle_obst_backward+0x19a>
    10cc:	20 91 06 02 	lds	r18, 0x0206
    10d0:	30 91 07 02 	lds	r19, 0x0207
    10d4:	80 91 69 03 	lds	r24, 0x0369
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	82 17       	cp	r24, r18
    10dc:	93 07       	cpc	r25, r19
    10de:	68 f0       	brcs	.+26     	; 0x10fa <handle_obst_backward+0x19a>
    10e0:	80 91 66 03 	lds	r24, 0x0366
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	82 17       	cp	r24, r18
    10e8:	93 07       	cpc	r25, r19
    10ea:	38 f0       	brcs	.+14     	; 0x10fa <handle_obst_backward+0x19a>
    10ec:	80 91 67 03 	lds	r24, 0x0367
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	82 17       	cp	r24, r18
    10f4:	93 07       	cpc	r25, r19
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <handle_obst_backward+0x19a>
    10f8:	4e c2       	rjmp	.+1180   	; 0x1596 <handle_obst_backward+0x636>
		{
			return;
		}
		sample_sensor();
    10fa:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>


		right_degrees(180);
    10fe:	84 eb       	ldi	r24, 0xB4	; 180
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		back_mm(30);
    1106:	8e e1       	ldi	r24, 0x1E	; 30
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
		sample_sensor();
    110e:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		//if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
		//{
		grid_forward();
    1112:	0e 94 07 07 	call	0xe0e	; 0xe0e <grid_forward>
		//_delay_ms(5000);
		right_degrees(90);
    1116:	8a e5       	ldi	r24, 0x5A	; 90
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		lcd_print(2,1,currentcountx,2);
    111e:	40 91 76 03 	lds	r20, 0x0376
    1122:	50 91 77 03 	lds	r21, 0x0377
    1126:	1f c0       	rjmp	.+62     	; 0x1166 <handle_obst_backward+0x206>
		//_delay_ms(5000);
		while(currentcountx!=1)
		{
			grid_forward();
    1128:	0e 94 07 07 	call	0xe0e	; 0xe0e <grid_forward>
			adc_sample();
    112c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1130:	04 c0       	rjmp	.+8      	; 0x113a <handle_obst_backward+0x1da>
			while(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE)
			{
				forward_mm(5);
    1132:	85 e0       	ldi	r24, 0x05	; 5
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		//_delay_ms(5000);
		while(currentcountx!=1)
		{
			grid_forward();
			adc_sample();
			while(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE)
    113a:	80 91 47 03 	lds	r24, 0x0347
    113e:	80 34       	cpi	r24, 0x40	; 64
    1140:	40 f0       	brcs	.+16     	; 0x1152 <handle_obst_backward+0x1f2>
    1142:	80 91 46 03 	lds	r24, 0x0346
    1146:	80 34       	cpi	r24, 0x40	; 64
    1148:	20 f0       	brcs	.+8      	; 0x1152 <handle_obst_backward+0x1f2>
    114a:	80 91 48 03 	lds	r24, 0x0348
    114e:	80 34       	cpi	r24, 0x40	; 64
    1150:	80 f7       	brcc	.-32     	; 0x1132 <handle_obst_backward+0x1d2>
			{
				forward_mm(5);
			}
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
    1152:	40 91 76 03 	lds	r20, 0x0376
    1156:	50 91 77 03 	lds	r21, 0x0377
    115a:	41 50       	subi	r20, 0x01	; 1
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	50 93 77 03 	sts	0x0377, r21
    1162:	40 93 76 03 	sts	0x0376, r20
			lcd_print(2,1,currentcountx,2);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	22 e0       	ldi	r18, 0x02	; 2
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
		grid_forward();
		//_delay_ms(5000);
		right_degrees(90);
		lcd_print(2,1,currentcountx,2);
		//_delay_ms(5000);
		while(currentcountx!=1)
    1172:	80 91 76 03 	lds	r24, 0x0376
    1176:	90 91 77 03 	lds	r25, 0x0377
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	a1 f6       	brne	.-88     	; 0x1128 <handle_obst_backward+0x1c8>
			}
			//_delay_ms(5000);
			currentcountx=currentcountx-1;
			lcd_print(2,1,currentcountx,2);
		}
		back_reroute=1;
    1180:	90 93 64 03 	sts	0x0364, r25
    1184:	80 93 63 03 	sts	0x0363, r24
		if((Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE))
    1188:	80 91 47 03 	lds	r24, 0x0347
    118c:	80 34       	cpi	r24, 0x40	; 64
    118e:	68 f0       	brcs	.+26     	; 0x11aa <handle_obst_backward+0x24a>
    1190:	80 91 46 03 	lds	r24, 0x0346
    1194:	80 34       	cpi	r24, 0x40	; 64
    1196:	48 f0       	brcs	.+18     	; 0x11aa <handle_obst_backward+0x24a>
    1198:	80 91 48 03 	lds	r24, 0x0348
    119c:	80 34       	cpi	r24, 0x40	; 64
    119e:	28 f0       	brcs	.+10     	; 0x11aa <handle_obst_backward+0x24a>
		{
			right_degrees(90);
    11a0:	8a e5       	ldi	r24, 0x5A	; 90
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
    11a8:	f6 c1       	rjmp	.+1004   	; 0x1596 <handle_obst_backward+0x636>
}

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    11aa:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    11ac:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    11ae:	88 b9       	out	0x08, r24	; 8
    11b0:	f2 c1       	rjmp	.+996    	; 0x1596 <handle_obst_backward+0x636>
		else buzzer_on();

		//}

	}
	else if((y_reached == 0) && currentcounty<2 && currentcounty==1 && back_reroute == 1)
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <handle_obst_backward+0x258>
    11b6:	f7 c0       	rjmp	.+494    	; 0x13a6 <handle_obst_backward+0x446>
    11b8:	80 91 63 03 	lds	r24, 0x0363
    11bc:	90 91 64 03 	lds	r25, 0x0364
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <handle_obst_backward+0x266>
    11c4:	f0 c0       	rjmp	.+480    	; 0x13a6 <handle_obst_backward+0x446>
	{
		lcd_print(2,3,9,1);
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	63 e0       	ldi	r22, 0x03	; 3
    11ca:	49 e0       	ldi	r20, 0x09	; 9
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	9e e4       	ldi	r25, 0x4E	; 78
    11da:	29 e1       	ldi	r18, 0x19	; 25
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	f9 01       	movw	r30, r18
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <handle_obst_backward+0x280>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	d9 f7       	brne	.-10     	; 0x11de <handle_obst_backward+0x27e>
		_delay_ms(2000);
		sample_sensor();
    11e8:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    11ec:	80 91 68 03 	lds	r24, 0x0368
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	20 91 04 02 	lds	r18, 0x0204
    11f6:	30 91 05 02 	lds	r19, 0x0205
    11fa:	28 17       	cp	r18, r24
    11fc:	39 07       	cpc	r19, r25
    11fe:	b8 f0       	brcs	.+46     	; 0x122e <handle_obst_backward+0x2ce>
    1200:	20 91 06 02 	lds	r18, 0x0206
    1204:	30 91 07 02 	lds	r19, 0x0207
    1208:	80 91 69 03 	lds	r24, 0x0369
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	82 17       	cp	r24, r18
    1210:	93 07       	cpc	r25, r19
    1212:	68 f0       	brcs	.+26     	; 0x122e <handle_obst_backward+0x2ce>
    1214:	80 91 66 03 	lds	r24, 0x0366
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	82 17       	cp	r24, r18
    121c:	93 07       	cpc	r25, r19
    121e:	38 f0       	brcs	.+14     	; 0x122e <handle_obst_backward+0x2ce>
    1220:	80 91 67 03 	lds	r24, 0x0367
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	82 17       	cp	r24, r18
    1228:	93 07       	cpc	r25, r19
    122a:	08 f0       	brcs	.+2      	; 0x122e <handle_obst_backward+0x2ce>
    122c:	b4 c1       	rjmp	.+872    	; 0x1596 <handle_obst_backward+0x636>
		{
			return;
		}
		back_mm(60);
    122e:	8c e3       	ldi	r24, 0x3C	; 60
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1236:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1238:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    123a:	82 b9       	out	0x02, r24	; 2
		{
			return;
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
    123c:	60 91 34 02 	lds	r22, 0x0234
    1240:	70 91 35 02 	lds	r23, 0x0235
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    124c:	5b 01       	movw	r10, r22
    124e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a e7       	ldi	r20, 0x7A	; 122
    1256:	53 e4       	ldi	r21, 0x43	; 67
    1258:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    125c:	7b 01       	movw	r14, r22
    125e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    126c:	88 23       	and	r24, r24
    126e:	1c f4       	brge	.+6      	; 0x1276 <handle_obst_backward+0x316>
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	24 c0       	rjmp	.+72     	; 0x12be <handle_obst_backward+0x35e>
		__ticks = 1;
	else if (__tmp > 65535)
    1276:	c8 01       	movw	r24, r16
    1278:	b7 01       	movw	r22, r14
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	b4 f4       	brge	.+44     	; 0x12b6 <handle_obst_backward+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	c6 01       	movw	r24, r12
    128c:	b5 01       	movw	r22, r10
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    129a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    129e:	89 e1       	ldi	r24, 0x19	; 25
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <handle_obst_backward+0x34e>
    12a4:	fc 01       	movw	r30, r24
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <handle_obst_backward+0x346>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	61 50       	subi	r22, 0x01	; 1
    12ac:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	c1 f7       	brne	.-16     	; 0x12a4 <handle_obst_backward+0x344>
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <handle_obst_backward+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b6:	c8 01       	movw	r24, r16
    12b8:	b7 01       	movw	r22, r14
    12ba:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    12be:	cb 01       	movw	r24, r22
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <handle_obst_backward+0x360>
		sample_sensor();
    12c4:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    12c8:	c9 e1       	ldi	r28, 0x19	; 25
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
    12cc:	47 c0       	rjmp	.+142    	; 0x135c <handle_obst_backward+0x3fc>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    12ce:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    12d0:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    12d2:	82 b9       	out	0x02, r24	; 2
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{

			stop();
			_delay_ms(delayvalueback);
    12d4:	60 91 34 02 	lds	r22, 0x0234
    12d8:	70 91 35 02 	lds	r23, 0x0235
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    12e4:	5b 01       	movw	r10, r22
    12e6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	53 e4       	ldi	r21, 0x43	; 67
    12f0:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    12f4:	7b 01       	movw	r14, r22
    12f6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	1c f4       	brge	.+6      	; 0x130e <handle_obst_backward+0x3ae>
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	22 c0       	rjmp	.+68     	; 0x1352 <handle_obst_backward+0x3f2>
		__ticks = 1;
	else if (__tmp > 65535)
    130e:	c8 01       	movw	r24, r16
    1310:	b7 01       	movw	r22, r14
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	57 e4       	ldi	r21, 0x47	; 71
    131a:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	a4 f4       	brge	.+40     	; 0x134a <handle_obst_backward+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	c6 01       	movw	r24, r12
    1324:	b5 01       	movw	r22, r10
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1332:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <handle_obst_backward+0x3e2>
    1338:	ce 01       	movw	r24, r28
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <handle_obst_backward+0x3da>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	61 50       	subi	r22, 0x01	; 1
    1340:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	61 15       	cp	r22, r1
    1344:	71 05       	cpc	r23, r1
    1346:	c1 f7       	brne	.-16     	; 0x1338 <handle_obst_backward+0x3d8>
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <handle_obst_backward+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134a:	c8 01       	movw	r24, r16
    134c:	b7 01       	movw	r22, r14
    134e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1352:	cb 01       	movw	r24, r22
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <handle_obst_backward+0x3f4>
			sample_sensor();
    1358:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    135c:	80 91 68 03 	lds	r24, 0x0368
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	20 91 04 02 	lds	r18, 0x0204
    1366:	30 91 05 02 	lds	r19, 0x0205
    136a:	28 17       	cp	r18, r24
    136c:	39 07       	cpc	r19, r25
    136e:	08 f4       	brcc	.+2      	; 0x1372 <handle_obst_backward+0x412>
    1370:	ae cf       	rjmp	.-164    	; 0x12ce <handle_obst_backward+0x36e>
    1372:	20 91 06 02 	lds	r18, 0x0206
    1376:	30 91 07 02 	lds	r19, 0x0207
    137a:	80 91 69 03 	lds	r24, 0x0369
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	82 17       	cp	r24, r18
    1382:	93 07       	cpc	r25, r19
    1384:	08 f4       	brcc	.+2      	; 0x1388 <handle_obst_backward+0x428>
    1386:	a3 cf       	rjmp	.-186    	; 0x12ce <handle_obst_backward+0x36e>
    1388:	80 91 66 03 	lds	r24, 0x0366
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	82 17       	cp	r24, r18
    1390:	93 07       	cpc	r25, r19
    1392:	08 f4       	brcc	.+2      	; 0x1396 <handle_obst_backward+0x436>
    1394:	9c cf       	rjmp	.-200    	; 0x12ce <handle_obst_backward+0x36e>
    1396:	80 91 67 03 	lds	r24, 0x0367
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	82 17       	cp	r24, r18
    139e:	93 07       	cpc	r25, r19
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <handle_obst_backward+0x444>
    13a2:	95 cf       	rjmp	.-214    	; 0x12ce <handle_obst_backward+0x36e>
    13a4:	f8 c0       	rjmp	.+496    	; 0x1596 <handle_obst_backward+0x636>
			stop();
			_delay_ms(delayvalueback);
			sample_sensor();
		}
	}
	else if(currentcountx>2 && currentcounty>=2)
    13a6:	80 91 76 03 	lds	r24, 0x0376
    13aa:	90 91 77 03 	lds	r25, 0x0377
    13ae:	03 97       	sbiw	r24, 0x03	; 3
    13b0:	0c f4       	brge	.+2      	; 0x13b4 <handle_obst_backward+0x454>
    13b2:	ef c0       	rjmp	.+478    	; 0x1592 <handle_obst_backward+0x632>
    13b4:	80 91 78 03 	lds	r24, 0x0378
    13b8:	90 91 79 03 	lds	r25, 0x0379
    13bc:	02 97       	sbiw	r24, 0x02	; 2
    13be:	0c f4       	brge	.+2      	; 0x13c2 <handle_obst_backward+0x462>
    13c0:	e8 c0       	rjmp	.+464    	; 0x1592 <handle_obst_backward+0x632>
    13c2:	80 e2       	ldi	r24, 0x20	; 32
    13c4:	9e e4       	ldi	r25, 0x4E	; 78
    13c6:	29 e1       	ldi	r18, 0x19	; 25
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <handle_obst_backward+0x46c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	d9 f7       	brne	.-10     	; 0x13ca <handle_obst_backward+0x46a>
	{
		_delay_ms(2000);
		sample_sensor();
    13d4:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		if(!(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor))
    13d8:	80 91 68 03 	lds	r24, 0x0368
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	20 91 04 02 	lds	r18, 0x0204
    13e2:	30 91 05 02 	lds	r19, 0x0205
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	b8 f0       	brcs	.+46     	; 0x141a <handle_obst_backward+0x4ba>
    13ec:	20 91 06 02 	lds	r18, 0x0206
    13f0:	30 91 07 02 	lds	r19, 0x0207
    13f4:	80 91 69 03 	lds	r24, 0x0369
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	82 17       	cp	r24, r18
    13fc:	93 07       	cpc	r25, r19
    13fe:	68 f0       	brcs	.+26     	; 0x141a <handle_obst_backward+0x4ba>
    1400:	80 91 66 03 	lds	r24, 0x0366
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	82 17       	cp	r24, r18
    1408:	93 07       	cpc	r25, r19
    140a:	38 f0       	brcs	.+14     	; 0x141a <handle_obst_backward+0x4ba>
    140c:	80 91 67 03 	lds	r24, 0x0367
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	82 17       	cp	r24, r18
    1414:	93 07       	cpc	r25, r19
    1416:	08 f0       	brcs	.+2      	; 0x141a <handle_obst_backward+0x4ba>
    1418:	be c0       	rjmp	.+380    	; 0x1596 <handle_obst_backward+0x636>
		{
			return;
		}
		back_mm(60);
    141a:	8c e3       	ldi	r24, 0x3C	; 60
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1422:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1424:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1426:	82 b9       	out	0x02, r24	; 2
		{
			return;
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
    1428:	60 91 34 02 	lds	r22, 0x0234
    142c:	70 91 35 02 	lds	r23, 0x0235
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1438:	5b 01       	movw	r10, r22
    143a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a e7       	ldi	r20, 0x7A	; 122
    1442:	53 e4       	ldi	r21, 0x43	; 67
    1444:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1448:	7b 01       	movw	r14, r22
    144a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	1c f4       	brge	.+6      	; 0x1462 <handle_obst_backward+0x502>
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	24 c0       	rjmp	.+72     	; 0x14aa <handle_obst_backward+0x54a>
		__ticks = 1;
	else if (__tmp > 65535)
    1462:	c8 01       	movw	r24, r16
    1464:	b7 01       	movw	r22, r14
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	b4 f4       	brge	.+44     	; 0x14a2 <handle_obst_backward+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1476:	c6 01       	movw	r24, r12
    1478:	b5 01       	movw	r22, r10
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e2       	ldi	r20, 0x20	; 32
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1486:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    148a:	89 e1       	ldi	r24, 0x19	; 25
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	05 c0       	rjmp	.+10     	; 0x149a <handle_obst_backward+0x53a>
    1490:	fc 01       	movw	r30, r24
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <handle_obst_backward+0x532>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	61 50       	subi	r22, 0x01	; 1
    1498:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149a:	61 15       	cp	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	c1 f7       	brne	.-16     	; 0x1490 <handle_obst_backward+0x530>
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <handle_obst_backward+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a2:	c8 01       	movw	r24, r16
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    14aa:	cb 01       	movw	r24, r22
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <handle_obst_backward+0x54c>
		sample_sensor();
    14b0:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    14b4:	c9 e1       	ldi	r28, 0x19	; 25
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
    14b8:	47 c0       	rjmp	.+142    	; 0x1548 <handle_obst_backward+0x5e8>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    14ba:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    14bc:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    14be:	82 b9       	out	0x02, r24	; 2
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{

			stop();
			_delay_ms(delayvalueback);
    14c0:	60 91 34 02 	lds	r22, 0x0234
    14c4:	70 91 35 02 	lds	r23, 0x0235
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    14d0:	5b 01       	movw	r10, r22
    14d2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a e7       	ldi	r20, 0x7A	; 122
    14da:	53 e4       	ldi	r21, 0x43	; 67
    14dc:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    14e0:	7b 01       	movw	r14, r22
    14e2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	1c f4       	brge	.+6      	; 0x14fa <handle_obst_backward+0x59a>
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	22 c0       	rjmp	.+68     	; 0x153e <handle_obst_backward+0x5de>
		__ticks = 1;
	else if (__tmp > 65535)
    14fa:	c8 01       	movw	r24, r16
    14fc:	b7 01       	movw	r22, r14
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	a4 f4       	brge	.+40     	; 0x1536 <handle_obst_backward+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	c6 01       	movw	r24, r12
    1510:	b5 01       	movw	r22, r10
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    151e:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1522:	05 c0       	rjmp	.+10     	; 0x152e <handle_obst_backward+0x5ce>
    1524:	ce 01       	movw	r24, r28
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <handle_obst_backward+0x5c6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	61 50       	subi	r22, 0x01	; 1
    152c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	61 15       	cp	r22, r1
    1530:	71 05       	cpc	r23, r1
    1532:	c1 f7       	brne	.-16     	; 0x1524 <handle_obst_backward+0x5c4>
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <handle_obst_backward+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1536:	c8 01       	movw	r24, r16
    1538:	b7 01       	movw	r22, r14
    153a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    153e:	cb 01       	movw	r24, r22
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <handle_obst_backward+0x5e0>
			sample_sensor();
    1544:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		}
		back_mm(60);
		stop();
		_delay_ms(delayvalueback);
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1548:	80 91 68 03 	lds	r24, 0x0368
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	20 91 04 02 	lds	r18, 0x0204
    1552:	30 91 05 02 	lds	r19, 0x0205
    1556:	28 17       	cp	r18, r24
    1558:	39 07       	cpc	r19, r25
    155a:	08 f4       	brcc	.+2      	; 0x155e <handle_obst_backward+0x5fe>
    155c:	ae cf       	rjmp	.-164    	; 0x14ba <handle_obst_backward+0x55a>
    155e:	20 91 06 02 	lds	r18, 0x0206
    1562:	30 91 07 02 	lds	r19, 0x0207
    1566:	80 91 69 03 	lds	r24, 0x0369
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	08 f4       	brcc	.+2      	; 0x1574 <handle_obst_backward+0x614>
    1572:	a3 cf       	rjmp	.-186    	; 0x14ba <handle_obst_backward+0x55a>
    1574:	80 91 66 03 	lds	r24, 0x0366
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	08 f4       	brcc	.+2      	; 0x1582 <handle_obst_backward+0x622>
    1580:	9c cf       	rjmp	.-200    	; 0x14ba <handle_obst_backward+0x55a>
    1582:	80 91 67 03 	lds	r24, 0x0367
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	82 17       	cp	r24, r18
    158a:	93 07       	cpc	r25, r19
    158c:	08 f4       	brcc	.+2      	; 0x1590 <handle_obst_backward+0x630>
    158e:	95 cf       	rjmp	.-214    	; 0x14ba <handle_obst_backward+0x55a>
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <handle_obst_backward+0x636>
		}
	}
	else 
	{	

		checkobst_backpath();
    1592:	0e 94 82 06 	call	0xd04	; 0xd04 <checkobst_backpath>
	}
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	ff 90       	pop	r15
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	bf 90       	pop	r11
    15a8:	af 90       	pop	r10
    15aa:	08 95       	ret

000015ac <reposition>:
//			    this function takes the robot to the start position where it will be in a position to receive the next order
//				First, bot takes a left turn and then moves forwrd till the time it reaches intersection
//				Then, takes left again and aligns itself to get ready for next order
/**********************************************************************************/
void reposition()
{
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
	forward_mm(10);
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
	left_degrees(90);					// take left by 90 degrees
    15b8:	8a e5       	ldi	r24, 0x5A	; 90
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
	obstflag=0;							// clearing obstacle flag
    15c0:	10 92 5c 03 	sts	0x035C, r1
	adc_sample();						// sample ADC values
    15c4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	sample_sensor();					// sample Obstacle sensor values
    15c8:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
	checkobst_backpath();				// check for obstacles
    15cc:	0e 94 82 06 	call	0xd04	; 0xd04 <checkobst_backpath>

	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 < thresh_Front_IR_Sensor)
	{
		sample_sensor();
		obstflag=1;						// set the flag if obstacle is detected
    15d0:	01 e0       	ldi	r16, 0x01	; 1
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <reposition+0x36>
	sample_sensor();					// sample Obstacle sensor values
	checkobst_backpath();				// check for obstacles

	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 < thresh_Front_IR_Sensor)
	{
		sample_sensor();
    15d4:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		obstflag=1;						// set the flag if obstacle is detected
    15d8:	00 93 5c 03 	sts	0x035C, r16
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    15dc:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    15de:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    15e0:	82 b9       	out	0x02, r24	; 2
	obstflag=0;							// clearing obstacle flag
	adc_sample();						// sample ADC values
	sample_sensor();					// sample Obstacle sensor values
	checkobst_backpath();				// check for obstacles

	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 < thresh_Front_IR_Sensor)
    15e2:	80 91 68 03 	lds	r24, 0x0368
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	20 91 04 02 	lds	r18, 0x0204
    15ec:	30 91 05 02 	lds	r19, 0x0205
    15f0:	28 17       	cp	r18, r24
    15f2:	39 07       	cpc	r19, r25
    15f4:	78 f3       	brcs	.-34     	; 0x15d4 <reposition+0x28>
    15f6:	20 91 06 02 	lds	r18, 0x0206
    15fa:	30 91 07 02 	lds	r19, 0x0207
    15fe:	80 91 69 03 	lds	r24, 0x0369
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	28 f3       	brcs	.-54     	; 0x15d4 <reposition+0x28>
    160a:	80 91 66 03 	lds	r24, 0x0366
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	82 17       	cp	r24, r18
    1612:	93 07       	cpc	r25, r19
    1614:	f8 f2       	brcs	.-66     	; 0x15d4 <reposition+0x28>
    1616:	80 91 67 03 	lds	r24, 0x0367
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	82 17       	cp	r24, r18
    161e:	93 07       	cpc	r25, r19
    1620:	c8 f2       	brcs	.-78     	; 0x15d4 <reposition+0x28>
		sample_sensor();
		obstflag=0;						
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
			obstflag=1;
    1622:	01 e0       	ldi	r16, 0x01	; 1
		stop();
	}

	while(1)							// loop till a intersection is found(start point)
	{
		adc_sample();
    1624:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
		sample_sensor();
    1628:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		obstflag=0;						
    162c:	10 92 5c 03 	sts	0x035C, r1
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1630:	80 91 68 03 	lds	r24, 0x0368
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	20 91 04 02 	lds	r18, 0x0204
    163a:	30 91 05 02 	lds	r19, 0x0205
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	b0 f0       	brcs	.+44     	; 0x1670 <reposition+0xc4>
    1644:	20 91 06 02 	lds	r18, 0x0206
    1648:	30 91 07 02 	lds	r19, 0x0207
    164c:	80 91 69 03 	lds	r24, 0x0369
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	82 17       	cp	r24, r18
    1654:	93 07       	cpc	r25, r19
    1656:	60 f0       	brcs	.+24     	; 0x1670 <reposition+0xc4>
    1658:	80 91 66 03 	lds	r24, 0x0366
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	82 17       	cp	r24, r18
    1660:	93 07       	cpc	r25, r19
    1662:	30 f0       	brcs	.+12     	; 0x1670 <reposition+0xc4>
    1664:	80 91 67 03 	lds	r24, 0x0367
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	82 17       	cp	r24, r18
    166c:	93 07       	cpc	r25, r19
    166e:	28 f4       	brcc	.+10     	; 0x167a <reposition+0xce>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1670:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1672:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1674:	82 b9       	out	0x02, r24	; 2
		sample_sensor();
		obstflag=0;						
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
			obstflag=1;
    1676:	00 93 5c 03 	sts	0x035C, r16
		}

		if((Center_white_line>BLACK_LINE && Left_white_line>BLACK_LINE && Right_white_line>BLACK_LINE) && obstflag ==0)
    167a:	80 91 47 03 	lds	r24, 0x0347
    167e:	81 34       	cpi	r24, 0x41	; 65
    1680:	68 f0       	brcs	.+26     	; 0x169c <reposition+0xf0>
    1682:	80 91 46 03 	lds	r24, 0x0346
    1686:	81 34       	cpi	r24, 0x41	; 65
    1688:	58 f0       	brcs	.+22     	; 0x16a0 <reposition+0xf4>
    168a:	80 91 48 03 	lds	r24, 0x0348
    168e:	81 34       	cpi	r24, 0x41	; 65
    1690:	38 f0       	brcs	.+14     	; 0x16a0 <reposition+0xf4>
    1692:	80 91 5c 03 	lds	r24, 0x035C
    1696:	88 23       	and	r24, r24
    1698:	19 f4       	brne	.+6      	; 0x16a0 <reposition+0xf4>
    169a:	79 c0       	rjmp	.+242    	; 0x178e <reposition+0x1e2>
		{
			break;						// break when the start point is reached
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    169c:	80 34       	cpi	r24, 0x40	; 64
    169e:	80 f0       	brcs	.+32     	; 0x16c0 <reposition+0x114>
    16a0:	80 91 46 03 	lds	r24, 0x0346
    16a4:	80 34       	cpi	r24, 0x40	; 64
    16a6:	60 f0       	brcs	.+24     	; 0x16c0 <reposition+0x114>
    16a8:	80 91 48 03 	lds	r24, 0x0348
    16ac:	80 34       	cpi	r24, 0x40	; 64
    16ae:	40 f4       	brcc	.+16     	; 0x16c0 <reposition+0x114>
    16b0:	80 91 5c 03 	lds	r24, 0x035C
    16b4:	88 23       	and	r24, r24
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <reposition+0x114>
		{
			left_degrees(1);			// adjust bot to the path
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    16c0:	80 91 47 03 	lds	r24, 0x0347
    16c4:	80 34       	cpi	r24, 0x40	; 64
    16c6:	80 f0       	brcs	.+32     	; 0x16e8 <reposition+0x13c>
    16c8:	80 91 46 03 	lds	r24, 0x0346
    16cc:	80 34       	cpi	r24, 0x40	; 64
    16ce:	60 f4       	brcc	.+24     	; 0x16e8 <reposition+0x13c>
    16d0:	80 91 48 03 	lds	r24, 0x0348
    16d4:	80 34       	cpi	r24, 0x40	; 64
    16d6:	40 f0       	brcs	.+16     	; 0x16e8 <reposition+0x13c>
    16d8:	80 91 5c 03 	lds	r24, 0x035C
    16dc:	88 23       	and	r24, r24
    16de:	21 f4       	brne	.+8      	; 0x16e8 <reposition+0x13c>
		{
			right_degrees(1);			// adjust bot to the path
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    16e8:	80 91 47 03 	lds	r24, 0x0347
    16ec:	80 34       	cpi	r24, 0x40	; 64
    16ee:	80 f0       	brcs	.+32     	; 0x1710 <reposition+0x164>
    16f0:	80 91 46 03 	lds	r24, 0x0346
    16f4:	80 34       	cpi	r24, 0x40	; 64
    16f6:	60 f4       	brcc	.+24     	; 0x1710 <reposition+0x164>
    16f8:	80 91 48 03 	lds	r24, 0x0348
    16fc:	80 34       	cpi	r24, 0x40	; 64
    16fe:	40 f4       	brcc	.+16     	; 0x1710 <reposition+0x164>
    1700:	80 91 5c 03 	lds	r24, 0x035C
    1704:	88 23       	and	r24, r24
    1706:	21 f4       	brne	.+8      	; 0x1710 <reposition+0x164>
		{
			forward_mm(5);				// move bot along the line
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		}

		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    1710:	80 91 47 03 	lds	r24, 0x0347
    1714:	80 34       	cpi	r24, 0x40	; 64
    1716:	80 f4       	brcc	.+32     	; 0x1738 <reposition+0x18c>
    1718:	80 91 46 03 	lds	r24, 0x0346
    171c:	80 34       	cpi	r24, 0x40	; 64
    171e:	60 f4       	brcc	.+24     	; 0x1738 <reposition+0x18c>
    1720:	80 91 48 03 	lds	r24, 0x0348
    1724:	80 34       	cpi	r24, 0x40	; 64
    1726:	40 f0       	brcs	.+16     	; 0x1738 <reposition+0x18c>
    1728:	80 91 5c 03 	lds	r24, 0x035C
    172c:	88 23       	and	r24, r24
    172e:	21 f4       	brne	.+8      	; 0x1738 <reposition+0x18c>
		{
			right_degrees(2);			// adjust bot
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		}

		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    1738:	80 91 47 03 	lds	r24, 0x0347
    173c:	80 34       	cpi	r24, 0x40	; 64
    173e:	80 f4       	brcc	.+32     	; 0x1760 <reposition+0x1b4>
    1740:	80 91 46 03 	lds	r24, 0x0346
    1744:	80 34       	cpi	r24, 0x40	; 64
    1746:	60 f0       	brcs	.+24     	; 0x1760 <reposition+0x1b4>
    1748:	80 91 48 03 	lds	r24, 0x0348
    174c:	80 34       	cpi	r24, 0x40	; 64
    174e:	40 f4       	brcc	.+16     	; 0x1760 <reposition+0x1b4>
    1750:	80 91 5c 03 	lds	r24, 0x035C
    1754:	88 23       	and	r24, r24
    1756:	21 f4       	brne	.+8      	; 0x1760 <reposition+0x1b4>
		{
			left_degrees(2);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		}

		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    1760:	80 91 47 03 	lds	r24, 0x0347
    1764:	80 34       	cpi	r24, 0x40	; 64
    1766:	08 f0       	brcs	.+2      	; 0x176a <reposition+0x1be>
    1768:	5d cf       	rjmp	.-326    	; 0x1624 <reposition+0x78>
    176a:	80 91 46 03 	lds	r24, 0x0346
    176e:	80 34       	cpi	r24, 0x40	; 64
    1770:	08 f0       	brcs	.+2      	; 0x1774 <reposition+0x1c8>
    1772:	58 cf       	rjmp	.-336    	; 0x1624 <reposition+0x78>
    1774:	80 91 48 03 	lds	r24, 0x0348
    1778:	80 34       	cpi	r24, 0x40	; 64
    177a:	08 f0       	brcs	.+2      	; 0x177e <reposition+0x1d2>
    177c:	53 cf       	rjmp	.-346    	; 0x1624 <reposition+0x78>
    177e:	80 91 5c 03 	lds	r24, 0x035C
    1782:	88 23       	and	r24, r24
    1784:	09 f0       	breq	.+2      	; 0x1788 <reposition+0x1dc>
    1786:	4e cf       	rjmp	.-356    	; 0x1624 <reposition+0x78>
		{
			//stop();
			adjust_path();
    1788:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <adjust_path>
    178c:	4b cf       	rjmp	.-362    	; 0x1624 <reposition+0x78>
		}
	}
	forward_mm(80);
    178e:	80 e5       	ldi	r24, 0x50	; 80
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
    1796:	08 ea       	ldi	r16, 0xA8	; 168
    1798:	11 e6       	ldi	r17, 0x61	; 97
    179a:	c8 01       	movw	r24, r16
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <reposition+0x1f0>
	_delay_ms(100);
	left_degrees(90);
    17a0:	8a e5       	ldi	r24, 0x5A	; 90
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
    17a8:	c8 01       	movw	r24, r16
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <reposition+0x1fe>
	_delay_ms(100);
	back_mm(15);
    17ae:	8f e0       	ldi	r24, 0x0F	; 15
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    17b6:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    17b8:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    17ba:	82 b9       	out	0x02, r24	; 2
	_delay_ms(100);
	left_degrees(90);
	_delay_ms(100);
	back_mm(15);
	stop();
}
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <backroute>:
//				Updating the present coordinates of the robot based on the WL sensor readings
//				Taking the right decision to whether turn right or left when 'x' coordinates matches
//				Reaching the counter.
/**********************************************************************************/
int backroute()
{
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	adc_sample();
    17dc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	sample_sensor();
    17e0:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
	flag=0;
    17e4:	10 92 49 03 	sts	0x0349, r1
	obstflag=0;
    17e8:	10 92 5c 03 	sts	0x035C, r1
	x_coor=currentcountx;
    17ec:	80 91 76 03 	lds	r24, 0x0376
    17f0:	90 91 77 03 	lds	r25, 0x0377
    17f4:	90 93 9c 03 	sts	0x039C, r25
    17f8:	80 93 9b 03 	sts	0x039B, r24
	y_coor=currentcounty;
    17fc:	80 91 78 03 	lds	r24, 0x0378
    1800:	90 91 79 03 	lds	r25, 0x0379
    1804:	90 93 8b 03 	sts	0x038B, r25
    1808:	80 93 8a 03 	sts	0x038A, r24
	print_sensor(1,1,3);    //Prints value of White Line Sensor1
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	43 e0       	ldi	r20, 0x03	; 3
    1812:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	print_sensor(1,5,2);    //Prints Value of White Line Sensor2
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	42 e0       	ldi	r20, 0x02	; 2
    181c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	print_sensor(1,9,1);    //Prints Value of White Line Sensor3
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	69 e0       	ldi	r22, 0x09	; 9
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	lcd_print(2,1,currentcountx,2);
    182a:	40 91 76 03 	lds	r20, 0x0376
    182e:	50 91 77 03 	lds	r21, 0x0377
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	22 e0       	ldi	r18, 0x02	; 2
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	lcd_print(2,5,currentcounty,2);
    183e:	40 91 78 03 	lds	r20, 0x0378
    1842:	50 91 79 03 	lds	r21, 0x0379
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	65 e0       	ldi	r22, 0x05	; 5
    184a:	22 e0       	ldi	r18, 0x02	; 2
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		obstflag=1;								//Obstacle found
    1852:	99 24       	eor	r9, r9
    1854:	93 94       	inc	r9
    1856:	c9 e1       	ldi	r28, 0x19	; 25
    1858:	d0 e0       	ldi	r29, 0x00	; 0
    185a:	51 c0       	rjmp	.+162    	; 0x18fe <backroute+0x13c>
    185c:	90 92 5c 03 	sts	0x035C, r9
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1860:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1862:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1864:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    1866:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    1868:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    186a:	88 b9       	out	0x08, r24	; 8
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		obstflag=1;								//Obstacle found
		stop();
		buzzer_on();
		_delay_ms(delayvalueback);				//Backpath delay to sense next value
    186c:	60 91 34 02 	lds	r22, 0x0234
    1870:	70 91 35 02 	lds	r23, 0x0235
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    187c:	5b 01       	movw	r10, r22
    187e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	53 e4       	ldi	r21, 0x43	; 67
    1888:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    188c:	7b 01       	movw	r14, r22
    188e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	1c f4       	brge	.+6      	; 0x18a6 <backroute+0xe4>
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	22 c0       	rjmp	.+68     	; 0x18ea <backroute+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
    18a6:	c8 01       	movw	r24, r16
    18a8:	b7 01       	movw	r22, r14
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	a4 f4       	brge	.+40     	; 0x18e2 <backroute+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	c6 01       	movw	r24, r12
    18bc:	b5 01       	movw	r22, r10
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    18ca:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    18ce:	05 c0       	rjmp	.+10     	; 0x18da <backroute+0x118>
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <backroute+0x110>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18da:	61 15       	cp	r22, r1
    18dc:	71 05       	cpc	r23, r1
    18de:	c1 f7       	brne	.-16     	; 0x18d0 <backroute+0x10e>
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <backroute+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	c8 01       	movw	r24, r16
    18e4:	b7 01       	movw	r22, r14
    18e6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    18ea:	cb 01       	movw	r24, r22
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <backroute+0x12a>
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    18f0:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    18f2:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    18f4:	88 b9       	out	0x08, r24	; 8
		obstflag=1;								//Obstacle found
		stop();
		buzzer_on();
		_delay_ms(delayvalueback);				//Backpath delay to sense next value
		buzzer_off();
		sample_sensor();
    18f6:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		handle_obst_backward();					//handling the obstacle with rerouting if the obstacle does not move with the delay time
    18fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
	print_sensor(1,1,3);    //Prints value of White Line Sensor1
	print_sensor(1,5,2);    //Prints Value of White Line Sensor2
	print_sensor(1,9,1);    //Prints Value of White Line Sensor3
	lcd_print(2,1,currentcountx,2);
	lcd_print(2,5,currentcounty,2);
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    18fe:	80 91 68 03 	lds	r24, 0x0368
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	20 91 04 02 	lds	r18, 0x0204
    1908:	30 91 05 02 	lds	r19, 0x0205
    190c:	28 17       	cp	r18, r24
    190e:	39 07       	cpc	r19, r25
    1910:	08 f4       	brcc	.+2      	; 0x1914 <backroute+0x152>
    1912:	a4 cf       	rjmp	.-184    	; 0x185c <backroute+0x9a>
    1914:	20 91 06 02 	lds	r18, 0x0206
    1918:	30 91 07 02 	lds	r19, 0x0207
    191c:	80 91 69 03 	lds	r24, 0x0369
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 17       	cp	r24, r18
    1924:	93 07       	cpc	r25, r19
    1926:	08 f4       	brcc	.+2      	; 0x192a <backroute+0x168>
    1928:	99 cf       	rjmp	.-206    	; 0x185c <backroute+0x9a>
    192a:	80 91 66 03 	lds	r24, 0x0366
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	82 17       	cp	r24, r18
    1932:	93 07       	cpc	r25, r19
    1934:	08 f4       	brcc	.+2      	; 0x1938 <backroute+0x176>
    1936:	92 cf       	rjmp	.-220    	; 0x185c <backroute+0x9a>
    1938:	80 91 67 03 	lds	r24, 0x0367
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	82 17       	cp	r24, r18
    1940:	93 07       	cpc	r25, r19
    1942:	08 f4       	brcc	.+2      	; 0x1946 <backroute+0x184>
    1944:	8b cf       	rjmp	.-234    	; 0x185c <backroute+0x9a>
    1946:	83 c0       	rjmp	.+262    	; 0x1a4e <backroute+0x28c>
		sample_sensor();
		handle_obst_backward();					//handling the obstacle with rerouting if the obstacle does not move with the delay time
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		sample_sensor();
    1948:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    194c:	4b c0       	rjmp	.+150    	; 0x19e4 <backroute+0x222>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			obstflag=1;
    194e:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1952:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1954:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1956:	82 b9       	out	0x02, r24	; 2
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    1958:	60 91 34 02 	lds	r22, 0x0234
    195c:	70 91 35 02 	lds	r23, 0x0235
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1968:	5b 01       	movw	r10, r22
    196a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4a e7       	ldi	r20, 0x7A	; 122
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1978:	7b 01       	movw	r14, r22
    197a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	1c f4       	brge	.+6      	; 0x1992 <backroute+0x1d0>
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	22 c0       	rjmp	.+68     	; 0x19d6 <backroute+0x214>
		__ticks = 1;
	else if (__tmp > 65535)
    1992:	c8 01       	movw	r24, r16
    1994:	b7 01       	movw	r22, r14
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	a4 f4       	brge	.+40     	; 0x19ce <backroute+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	c6 01       	movw	r24, r12
    19a8:	b5 01       	movw	r22, r10
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    19b6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <backroute+0x204>
    19bc:	c4 01       	movw	r24, r8
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <backroute+0x1fc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	61 50       	subi	r22, 0x01	; 1
    19c4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	61 15       	cp	r22, r1
    19c8:	71 05       	cpc	r23, r1
    19ca:	c1 f7       	brne	.-16     	; 0x19bc <backroute+0x1fa>
    19cc:	07 c0       	rjmp	.+14     	; 0x19dc <backroute+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	c8 01       	movw	r24, r16
    19d0:	b7 01       	movw	r22, r14
    19d2:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    19d6:	cb 01       	movw	r24, r22
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <backroute+0x216>
			sample_sensor();
    19dc:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    19e0:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
		handle_obst_backward();					//handling the obstacle with rerouting if the obstacle does not move with the delay time
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    19e4:	80 91 68 03 	lds	r24, 0x0368
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	20 91 04 02 	lds	r18, 0x0204
    19ee:	30 91 05 02 	lds	r19, 0x0205
    19f2:	28 17       	cp	r18, r24
    19f4:	39 07       	cpc	r19, r25
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <backroute+0x238>
    19f8:	aa cf       	rjmp	.-172    	; 0x194e <backroute+0x18c>
    19fa:	20 91 06 02 	lds	r18, 0x0206
    19fe:	30 91 07 02 	lds	r19, 0x0207
    1a02:	80 91 69 03 	lds	r24, 0x0369
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	82 17       	cp	r24, r18
    1a0a:	93 07       	cpc	r25, r19
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <backroute+0x24e>
    1a0e:	9f cf       	rjmp	.-194    	; 0x194e <backroute+0x18c>
    1a10:	80 91 66 03 	lds	r24, 0x0366
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 17       	cp	r24, r18
    1a18:	93 07       	cpc	r25, r19
    1a1a:	08 f4       	brcc	.+2      	; 0x1a1e <backroute+0x25c>
    1a1c:	98 cf       	rjmp	.-208    	; 0x194e <backroute+0x18c>
    1a1e:	80 91 67 03 	lds	r24, 0x0367
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	82 17       	cp	r24, r18
    1a26:	93 07       	cpc	r25, r19
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <backroute+0x26a>
    1a2a:	91 cf       	rjmp	.-222    	; 0x194e <backroute+0x18c>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		flag=1;
    1a2c:	70 92 49 03 	sts	0x0349, r7
		last_choice=1;
    1a30:	d0 93 59 03 	sts	0x0359, r29
    1a34:	c0 93 58 03 	sts	0x0358, r28
		forward_mm(5);
    1a38:	85 e0       	ldi	r24, 0x05	; 5
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    1a40:	10 92 7b 03 	sts	0x037B, r1
    1a44:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    1a48:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <backroute+0x29a>
    1a4e:	59 e1       	ldi	r21, 0x19	; 25
    1a50:	85 2e       	mov	r8, r21
    1a52:	91 2c       	mov	r9, r1
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			obstflag=1;
    1a54:	77 24       	eor	r7, r7
    1a56:	73 94       	inc	r7
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    1a58:	c1 e0       	ldi	r28, 0x01	; 1
    1a5a:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(delayvalueback);				//Backpath delay to sense next value
		buzzer_off();
		sample_sensor();
		handle_obst_backward();					//handling the obstacle with rerouting if the obstacle does not move with the delay time
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
    1a5c:	80 91 47 03 	lds	r24, 0x0347
    1a60:	80 34       	cpi	r24, 0x40	; 64
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <backroute+0x2a4>
    1a64:	95 c0       	rjmp	.+298    	; 0x1b90 <backroute+0x3ce>
    1a66:	80 91 46 03 	lds	r24, 0x0346
    1a6a:	80 34       	cpi	r24, 0x40	; 64
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <backroute+0x2ae>
    1a6e:	90 c0       	rjmp	.+288    	; 0x1b90 <backroute+0x3ce>
    1a70:	80 91 48 03 	lds	r24, 0x0348
    1a74:	80 34       	cpi	r24, 0x40	; 64
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <backroute+0x2b8>
    1a78:	8b c0       	rjmp	.+278    	; 0x1b90 <backroute+0x3ce>
    1a7a:	80 91 5c 03 	lds	r24, 0x035C
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <backroute+0x2c2>
    1a82:	62 cf       	rjmp	.-316    	; 0x1948 <backroute+0x186>
    1a84:	85 c0       	rjmp	.+266    	; 0x1b90 <backroute+0x3ce>
		back_s=0;
		adc_sample();
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    1a86:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    1a8a:	4b c0       	rjmp	.+150    	; 0x1b22 <backroute+0x360>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1a8c:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1a90:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1a92:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1a94:	82 b9       	out	0x02, r24	; 2

		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    1a96:	60 91 34 02 	lds	r22, 0x0234
    1a9a:	70 91 35 02 	lds	r23, 0x0235
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1aa6:	5b 01       	movw	r10, r22
    1aa8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	53 e4       	ldi	r21, 0x43	; 67
    1ab2:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1ab6:	7b 01       	movw	r14, r22
    1ab8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	1c f4       	brge	.+6      	; 0x1ad0 <backroute+0x30e>
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	22 c0       	rjmp	.+68     	; 0x1b14 <backroute+0x352>
		__ticks = 1;
	else if (__tmp > 65535)
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	a4 f4       	brge	.+40     	; 0x1b0c <backroute+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	c6 01       	movw	r24, r12
    1ae6:	b5 01       	movw	r22, r10
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1af4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <backroute+0x342>
    1afa:	c4 01       	movw	r24, r8
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <backroute+0x33a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	61 50       	subi	r22, 0x01	; 1
    1b02:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	61 15       	cp	r22, r1
    1b06:	71 05       	cpc	r23, r1
    1b08:	c1 f7       	brne	.-16     	; 0x1afa <backroute+0x338>
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <backroute+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	b7 01       	movw	r22, r14
    1b10:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1b14:	cb 01       	movw	r24, r22
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <backroute+0x354>
			sample_sensor();
    1b1a:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    1b1e:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
		adc_sample();
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1b22:	80 91 68 03 	lds	r24, 0x0368
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	20 91 04 02 	lds	r18, 0x0204
    1b2c:	30 91 05 02 	lds	r19, 0x0205
    1b30:	28 17       	cp	r18, r24
    1b32:	39 07       	cpc	r19, r25
    1b34:	08 f4       	brcc	.+2      	; 0x1b38 <backroute+0x376>
    1b36:	aa cf       	rjmp	.-172    	; 0x1a8c <backroute+0x2ca>
    1b38:	20 91 06 02 	lds	r18, 0x0206
    1b3c:	30 91 07 02 	lds	r19, 0x0207
    1b40:	80 91 69 03 	lds	r24, 0x0369
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	82 17       	cp	r24, r18
    1b48:	93 07       	cpc	r25, r19
    1b4a:	08 f4       	brcc	.+2      	; 0x1b4e <backroute+0x38c>
    1b4c:	9f cf       	rjmp	.-194    	; 0x1a8c <backroute+0x2ca>
    1b4e:	80 91 66 03 	lds	r24, 0x0366
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	82 17       	cp	r24, r18
    1b56:	93 07       	cpc	r25, r19
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <backroute+0x39a>
    1b5a:	98 cf       	rjmp	.-208    	; 0x1a8c <backroute+0x2ca>
    1b5c:	80 91 67 03 	lds	r24, 0x0367
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	08 f4       	brcc	.+2      	; 0x1b6a <backroute+0x3a8>
    1b68:	91 cf       	rjmp	.-222    	; 0x1a8c <backroute+0x2ca>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=2;
    1b6a:	d0 93 59 03 	sts	0x0359, r29
    1b6e:	c0 93 58 03 	sts	0x0358, r28
		left_degrees(2);
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		forward_mm(5);
    1b7a:	85 e0       	ldi	r24, 0x05	; 5
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    1b82:	10 92 7b 03 	sts	0x037B, r1
    1b86:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    1b8a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <backroute+0x3dc>
    1b90:	49 e1       	ldi	r20, 0x19	; 25
    1b92:	84 2e       	mov	r8, r20
    1b94:	91 2c       	mov	r9, r1
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1b96:	77 24       	eor	r7, r7
    1b98:	73 94       	inc	r7
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=2;
    1b9a:	c2 e0       	ldi	r28, 0x02	; 2
    1b9c:	d0 e0       	ldi	r29, 0x00	; 0
		last_choice=1;
		forward_mm(5);
		back_s=0;
		adc_sample();
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
    1b9e:	80 91 47 03 	lds	r24, 0x0347
    1ba2:	80 34       	cpi	r24, 0x40	; 64
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <backroute+0x3e6>
    1ba6:	95 c0       	rjmp	.+298    	; 0x1cd2 <backroute+0x510>
    1ba8:	80 91 46 03 	lds	r24, 0x0346
    1bac:	80 34       	cpi	r24, 0x40	; 64
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <backroute+0x3f0>
    1bb0:	90 c0       	rjmp	.+288    	; 0x1cd2 <backroute+0x510>
    1bb2:	80 91 48 03 	lds	r24, 0x0348
    1bb6:	80 34       	cpi	r24, 0x40	; 64
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <backroute+0x3fa>
    1bba:	8b c0       	rjmp	.+278    	; 0x1cd2 <backroute+0x510>
    1bbc:	80 91 5c 03 	lds	r24, 0x035C
    1bc0:	88 23       	and	r24, r24
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <backroute+0x404>
    1bc4:	60 cf       	rjmp	.-320    	; 0x1a86 <backroute+0x2c4>
    1bc6:	85 c0       	rjmp	.+266    	; 0x1cd2 <backroute+0x510>
		adc_sample();
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{

		sample_sensor();
    1bc8:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    1bcc:	4b c0       	rjmp	.+150    	; 0x1c64 <backroute+0x4a2>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1bce:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1bd2:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1bd4:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1bd6:	82 b9       	out	0x02, r24	; 2

		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    1bd8:	60 91 34 02 	lds	r22, 0x0234
    1bdc:	70 91 35 02 	lds	r23, 0x0235
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1be8:	5b 01       	movw	r10, r22
    1bea:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1bf8:	7b 01       	movw	r14, r22
    1bfa:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	1c f4       	brge	.+6      	; 0x1c12 <backroute+0x450>
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	22 c0       	rjmp	.+68     	; 0x1c56 <backroute+0x494>
		__ticks = 1;
	else if (__tmp > 65535)
    1c12:	c8 01       	movw	r24, r16
    1c14:	b7 01       	movw	r22, r14
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	a4 f4       	brge	.+40     	; 0x1c4e <backroute+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	c6 01       	movw	r24, r12
    1c28:	b5 01       	movw	r22, r10
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1c36:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <backroute+0x484>
    1c3c:	c4 01       	movw	r24, r8
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <backroute+0x47c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	61 50       	subi	r22, 0x01	; 1
    1c44:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	61 15       	cp	r22, r1
    1c48:	71 05       	cpc	r23, r1
    1c4a:	c1 f7       	brne	.-16     	; 0x1c3c <backroute+0x47a>
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <backroute+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	c8 01       	movw	r24, r16
    1c50:	b7 01       	movw	r22, r14
    1c52:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1c56:	cb 01       	movw	r24, r22
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <backroute+0x496>
			sample_sensor();
    1c5c:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    1c60:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{

		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1c64:	80 91 68 03 	lds	r24, 0x0368
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	20 91 04 02 	lds	r18, 0x0204
    1c6e:	30 91 05 02 	lds	r19, 0x0205
    1c72:	28 17       	cp	r18, r24
    1c74:	39 07       	cpc	r19, r25
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <backroute+0x4b8>
    1c78:	aa cf       	rjmp	.-172    	; 0x1bce <backroute+0x40c>
    1c7a:	20 91 06 02 	lds	r18, 0x0206
    1c7e:	30 91 07 02 	lds	r19, 0x0207
    1c82:	80 91 69 03 	lds	r24, 0x0369
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	82 17       	cp	r24, r18
    1c8a:	93 07       	cpc	r25, r19
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <backroute+0x4ce>
    1c8e:	9f cf       	rjmp	.-194    	; 0x1bce <backroute+0x40c>
    1c90:	80 91 66 03 	lds	r24, 0x0366
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	82 17       	cp	r24, r18
    1c98:	93 07       	cpc	r25, r19
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <backroute+0x4dc>
    1c9c:	98 cf       	rjmp	.-208    	; 0x1bce <backroute+0x40c>
    1c9e:	80 91 67 03 	lds	r24, 0x0367
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	82 17       	cp	r24, r18
    1ca6:	93 07       	cpc	r25, r19
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <backroute+0x4ea>
    1caa:	91 cf       	rjmp	.-222    	; 0x1bce <backroute+0x40c>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=3;
    1cac:	d0 93 59 03 	sts	0x0359, r29
    1cb0:	c0 93 58 03 	sts	0x0358, r28
		right_degrees(2);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		forward_mm(5);
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    1cc4:	10 92 7b 03 	sts	0x037B, r1
    1cc8:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    1ccc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <backroute+0x51e>
    1cd2:	39 e1       	ldi	r19, 0x19	; 25
    1cd4:	83 2e       	mov	r8, r19
    1cd6:	91 2c       	mov	r9, r1

		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1cd8:	77 24       	eor	r7, r7
    1cda:	73 94       	inc	r7
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=3;
    1cdc:	c3 e0       	ldi	r28, 0x03	; 3
    1cde:	d0 e0       	ldi	r29, 0x00	; 0
		left_degrees(2);
		forward_mm(5);
		back_s=0;
		adc_sample();
	}
	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    1ce0:	80 91 47 03 	lds	r24, 0x0347
    1ce4:	80 34       	cpi	r24, 0x40	; 64
    1ce6:	08 f4       	brcc	.+2      	; 0x1cea <backroute+0x528>
    1ce8:	95 c0       	rjmp	.+298    	; 0x1e14 <backroute+0x652>
    1cea:	80 91 46 03 	lds	r24, 0x0346
    1cee:	80 34       	cpi	r24, 0x40	; 64
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <backroute+0x532>
    1cf2:	90 c0       	rjmp	.+288    	; 0x1e14 <backroute+0x652>
    1cf4:	80 91 48 03 	lds	r24, 0x0348
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <backroute+0x53c>
    1cfc:	8b c0       	rjmp	.+278    	; 0x1e14 <backroute+0x652>
    1cfe:	80 91 5c 03 	lds	r24, 0x035C
    1d02:	88 23       	and	r24, r24
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <backroute+0x546>
    1d06:	60 cf       	rjmp	.-320    	; 0x1bc8 <backroute+0x406>
    1d08:	85 c0       	rjmp	.+266    	; 0x1e14 <backroute+0x652>
		back_s=0;
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    1d0a:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    1d0e:	4b c0       	rjmp	.+150    	; 0x1da6 <backroute+0x5e4>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1d10:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1d14:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1d16:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1d18:	82 b9       	out	0x02, r24	; 2

		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    1d1a:	60 91 34 02 	lds	r22, 0x0234
    1d1e:	70 91 35 02 	lds	r23, 0x0235
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1d2a:	5b 01       	movw	r10, r22
    1d2c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	53 e4       	ldi	r21, 0x43	; 67
    1d36:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1d3a:	7b 01       	movw	r14, r22
    1d3c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	1c f4       	brge	.+6      	; 0x1d54 <backroute+0x592>
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	22 c0       	rjmp	.+68     	; 0x1d98 <backroute+0x5d6>
		__ticks = 1;
	else if (__tmp > 65535)
    1d54:	c8 01       	movw	r24, r16
    1d56:	b7 01       	movw	r22, r14
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	a4 f4       	brge	.+40     	; 0x1d90 <backroute+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	c6 01       	movw	r24, r12
    1d6a:	b5 01       	movw	r22, r10
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1d78:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1d7c:	05 c0       	rjmp	.+10     	; 0x1d88 <backroute+0x5c6>
    1d7e:	c4 01       	movw	r24, r8
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <backroute+0x5be>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	61 50       	subi	r22, 0x01	; 1
    1d86:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	61 15       	cp	r22, r1
    1d8a:	71 05       	cpc	r23, r1
    1d8c:	c1 f7       	brne	.-16     	; 0x1d7e <backroute+0x5bc>
    1d8e:	07 c0       	rjmp	.+14     	; 0x1d9e <backroute+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	c8 01       	movw	r24, r16
    1d92:	b7 01       	movw	r22, r14
    1d94:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1d98:	cb 01       	movw	r24, r22
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <backroute+0x5d8>
			sample_sensor();
    1d9e:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    1da2:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1da6:	80 91 68 03 	lds	r24, 0x0368
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	20 91 04 02 	lds	r18, 0x0204
    1db0:	30 91 05 02 	lds	r19, 0x0205
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <backroute+0x5fa>
    1dba:	aa cf       	rjmp	.-172    	; 0x1d10 <backroute+0x54e>
    1dbc:	20 91 06 02 	lds	r18, 0x0206
    1dc0:	30 91 07 02 	lds	r19, 0x0207
    1dc4:	80 91 69 03 	lds	r24, 0x0369
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	82 17       	cp	r24, r18
    1dcc:	93 07       	cpc	r25, r19
    1dce:	08 f4       	brcc	.+2      	; 0x1dd2 <backroute+0x610>
    1dd0:	9f cf       	rjmp	.-194    	; 0x1d10 <backroute+0x54e>
    1dd2:	80 91 66 03 	lds	r24, 0x0366
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	82 17       	cp	r24, r18
    1dda:	93 07       	cpc	r25, r19
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <backroute+0x61e>
    1dde:	98 cf       	rjmp	.-208    	; 0x1d10 <backroute+0x54e>
    1de0:	80 91 67 03 	lds	r24, 0x0367
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	82 17       	cp	r24, r18
    1de8:	93 07       	cpc	r25, r19
    1dea:	08 f4       	brcc	.+2      	; 0x1dee <backroute+0x62c>
    1dec:	91 cf       	rjmp	.-222    	; 0x1d10 <backroute+0x54e>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=4;
    1dee:	d0 93 59 03 	sts	0x0359, r29
    1df2:	c0 93 58 03 	sts	0x0358, r28
		right_degrees(5);
    1df6:	85 e0       	ldi	r24, 0x05	; 5
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		forward_mm(2);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    1e06:	10 92 7b 03 	sts	0x037B, r1
    1e0a:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    1e0e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <backroute+0x660>
    1e14:	29 e1       	ldi	r18, 0x19	; 25
    1e16:	82 2e       	mov	r8, r18
    1e18:	91 2c       	mov	r9, r1
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1e1a:	77 24       	eor	r7, r7
    1e1c:	73 94       	inc	r7
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=4;
    1e1e:	c4 e0       	ldi	r28, 0x04	; 4
    1e20:	d0 e0       	ldi	r29, 0x00	; 0
		right_degrees(2);
		forward_mm(5);
		back_s=0;
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    1e22:	80 91 47 03 	lds	r24, 0x0347
    1e26:	80 34       	cpi	r24, 0x40	; 64
    1e28:	08 f0       	brcs	.+2      	; 0x1e2c <backroute+0x66a>
    1e2a:	95 c0       	rjmp	.+298    	; 0x1f56 <backroute+0x794>
    1e2c:	80 91 46 03 	lds	r24, 0x0346
    1e30:	80 34       	cpi	r24, 0x40	; 64
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <backroute+0x674>
    1e34:	90 c0       	rjmp	.+288    	; 0x1f56 <backroute+0x794>
    1e36:	80 91 48 03 	lds	r24, 0x0348
    1e3a:	80 34       	cpi	r24, 0x40	; 64
    1e3c:	08 f4       	brcc	.+2      	; 0x1e40 <backroute+0x67e>
    1e3e:	8b c0       	rjmp	.+278    	; 0x1f56 <backroute+0x794>
    1e40:	80 91 5c 03 	lds	r24, 0x035C
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <backroute+0x688>
    1e48:	60 cf       	rjmp	.-320    	; 0x1d0a <backroute+0x548>
    1e4a:	85 c0       	rjmp	.+266    	; 0x1f56 <backroute+0x794>
		back_s=0;
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
    1e4c:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    1e50:	4b c0       	rjmp	.+150    	; 0x1ee8 <backroute+0x726>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1e52:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1e56:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1e58:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1e5a:	82 b9       	out	0x02, r24	; 2

		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    1e5c:	60 91 34 02 	lds	r22, 0x0234
    1e60:	70 91 35 02 	lds	r23, 0x0235
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    1e6c:	5b 01       	movw	r10, r22
    1e6e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	53 e4       	ldi	r21, 0x43	; 67
    1e78:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1e7c:	7b 01       	movw	r14, r22
    1e7e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	1c f4       	brge	.+6      	; 0x1e96 <backroute+0x6d4>
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	22 c0       	rjmp	.+68     	; 0x1eda <backroute+0x718>
		__ticks = 1;
	else if (__tmp > 65535)
    1e96:	c8 01       	movw	r24, r16
    1e98:	b7 01       	movw	r22, r14
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	a4 f4       	brge	.+40     	; 0x1ed2 <backroute+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	c6 01       	movw	r24, r12
    1eac:	b5 01       	movw	r22, r10
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    1eba:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <backroute+0x708>
    1ec0:	c4 01       	movw	r24, r8
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <backroute+0x700>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	61 50       	subi	r22, 0x01	; 1
    1ec8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	61 15       	cp	r22, r1
    1ecc:	71 05       	cpc	r23, r1
    1ece:	c1 f7       	brne	.-16     	; 0x1ec0 <backroute+0x6fe>
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <backroute+0x71e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    1eda:	cb 01       	movw	r24, r22
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <backroute+0x71a>
			sample_sensor();
    1ee0:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    1ee4:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    1ee8:	80 91 68 03 	lds	r24, 0x0368
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	20 91 04 02 	lds	r18, 0x0204
    1ef2:	30 91 05 02 	lds	r19, 0x0205
    1ef6:	28 17       	cp	r18, r24
    1ef8:	39 07       	cpc	r19, r25
    1efa:	08 f4       	brcc	.+2      	; 0x1efe <backroute+0x73c>
    1efc:	aa cf       	rjmp	.-172    	; 0x1e52 <backroute+0x690>
    1efe:	20 91 06 02 	lds	r18, 0x0206
    1f02:	30 91 07 02 	lds	r19, 0x0207
    1f06:	80 91 69 03 	lds	r24, 0x0369
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	82 17       	cp	r24, r18
    1f0e:	93 07       	cpc	r25, r19
    1f10:	08 f4       	brcc	.+2      	; 0x1f14 <backroute+0x752>
    1f12:	9f cf       	rjmp	.-194    	; 0x1e52 <backroute+0x690>
    1f14:	80 91 66 03 	lds	r24, 0x0366
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	82 17       	cp	r24, r18
    1f1c:	93 07       	cpc	r25, r19
    1f1e:	08 f4       	brcc	.+2      	; 0x1f22 <backroute+0x760>
    1f20:	98 cf       	rjmp	.-208    	; 0x1e52 <backroute+0x690>
    1f22:	80 91 67 03 	lds	r24, 0x0367
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	82 17       	cp	r24, r18
    1f2a:	93 07       	cpc	r25, r19
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <backroute+0x76e>
    1f2e:	91 cf       	rjmp	.-222    	; 0x1e52 <backroute+0x690>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=5;
    1f30:	d0 93 59 03 	sts	0x0359, r29
    1f34:	c0 93 58 03 	sts	0x0358, r28
		left_degrees(5);
    1f38:	85 e0       	ldi	r24, 0x05	; 5
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		forward_mm(2);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    1f48:	10 92 7b 03 	sts	0x037B, r1
    1f4c:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    1f50:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <backroute+0x7a2>
    1f56:	99 e1       	ldi	r25, 0x19	; 25
    1f58:	89 2e       	mov	r8, r25
    1f5a:	91 2c       	mov	r9, r1
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    1f5c:	77 24       	eor	r7, r7
    1f5e:	73 94       	inc	r7
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		last_choice=5;
    1f60:	c5 e0       	ldi	r28, 0x05	; 5
    1f62:	d0 e0       	ldi	r29, 0x00	; 0
		right_degrees(5);
		forward_mm(2);
		back_s=0;
		adc_sample();
	}
	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
    1f64:	80 91 47 03 	lds	r24, 0x0347
    1f68:	90 91 46 03 	lds	r25, 0x0346
    1f6c:	80 34       	cpi	r24, 0x40	; 64
    1f6e:	70 f4       	brcc	.+28     	; 0x1f8c <backroute+0x7ca>
    1f70:	90 34       	cpi	r25, 0x40	; 64
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <backroute+0x7b4>
    1f74:	c4 c0       	rjmp	.+392    	; 0x20fe <backroute+0x93c>
    1f76:	80 91 48 03 	lds	r24, 0x0348
    1f7a:	81 34       	cpi	r24, 0x41	; 65
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <backroute+0x7be>
    1f7e:	bf c0       	rjmp	.+382    	; 0x20fe <backroute+0x93c>
    1f80:	80 91 5c 03 	lds	r24, 0x035C
    1f84:	88 23       	and	r24, r24
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <backroute+0x7c8>
    1f88:	61 cf       	rjmp	.-318    	; 0x1e4c <backroute+0x68a>
    1f8a:	b9 c0       	rjmp	.+370    	; 0x20fe <backroute+0x93c>
		forward_mm(2);
		back_s=0;
		adc_sample();
	}

	if((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (flag==0) && (last_choice!=6) && (last_choice!=9) && (obstflag==0))
    1f8c:	90 34       	cpi	r25, 0x40	; 64
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <backroute+0x7d0>
    1f90:	b6 c0       	rjmp	.+364    	; 0x20fe <backroute+0x93c>
    1f92:	80 91 48 03 	lds	r24, 0x0348
    1f96:	80 34       	cpi	r24, 0x40	; 64
    1f98:	08 f4       	brcc	.+2      	; 0x1f9c <backroute+0x7da>
    1f9a:	b1 c0       	rjmp	.+354    	; 0x20fe <backroute+0x93c>
    1f9c:	80 91 49 03 	lds	r24, 0x0349
    1fa0:	88 23       	and	r24, r24
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <backroute+0x7e4>
    1fa4:	ac c0       	rjmp	.+344    	; 0x20fe <backroute+0x93c>
    1fa6:	80 91 58 03 	lds	r24, 0x0358
    1faa:	90 91 59 03 	lds	r25, 0x0359
    1fae:	86 30       	cpi	r24, 0x06	; 6
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <backroute+0x7f4>
    1fb4:	a4 c0       	rjmp	.+328    	; 0x20fe <backroute+0x93c>
    1fb6:	09 97       	sbiw	r24, 0x09	; 9
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <backroute+0x7fa>
    1fba:	a1 c0       	rjmp	.+322    	; 0x20fe <backroute+0x93c>
    1fbc:	80 91 5c 03 	lds	r24, 0x035C
    1fc0:	88 23       	and	r24, r24
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <backroute+0x804>
    1fc4:	9c c0       	rjmp	.+312    	; 0x20fe <backroute+0x93c>
	{
		last_choice=6;
    1fc6:	86 e0       	ldi	r24, 0x06	; 6
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	90 93 59 03 	sts	0x0359, r25
    1fce:	80 93 58 03 	sts	0x0358, r24
		flag=1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	80 93 49 03 	sts	0x0349, r24
		back_s=0;
    1fd8:	10 92 7b 03 	sts	0x037B, r1
    1fdc:	10 92 7a 03 	sts	0x037A, r1
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    1fe0:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    1fe2:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    1fe4:	82 b9       	out	0x02, r24	; 2
	{
		last_choice=6;
		flag=1;
		back_s=0;
		stop();
		if(flagrightturn==0)
    1fe6:	80 91 84 03 	lds	r24, 0x0384
    1fea:	90 91 85 03 	lds	r25, 0x0385
    1fee:	89 2b       	or	r24, r25
    1ff0:	99 f4       	brne	.+38     	; 0x2018 <backroute+0x856>
		{
			if(dest_backward==1)
    1ff2:	80 91 5a 03 	lds	r24, 0x035A
    1ff6:	90 91 5b 03 	lds	r25, 0x035B
    1ffa:	20 91 78 03 	lds	r18, 0x0378
    1ffe:	30 91 79 03 	lds	r19, 0x0379
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	19 f4       	brne	.+6      	; 0x200c <backroute+0x84a>
			{
				currentcounty = currentcounty-1;
    2006:	21 50       	subi	r18, 0x01	; 1
    2008:	30 40       	sbci	r19, 0x00	; 0
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <backroute+0x84e>
			}
			else 
			{
				currentcounty = currentcounty+1;
    200c:	2f 5f       	subi	r18, 0xFF	; 255
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	30 93 79 03 	sts	0x0379, r19
    2014:	20 93 78 03 	sts	0x0378, r18
			}
		}
		if(flagrightturn==1)
    2018:	80 91 84 03 	lds	r24, 0x0384
    201c:	90 91 85 03 	lds	r25, 0x0385
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	49 f4       	brne	.+18     	; 0x2036 <backroute+0x874>
		{
			currentcountx=currentcountx-1;
    2024:	80 91 76 03 	lds	r24, 0x0376
    2028:	90 91 77 03 	lds	r25, 0x0377
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	90 93 77 03 	sts	0x0377, r25
    2032:	80 93 76 03 	sts	0x0376, r24
		}
		forward_mm(5);
    2036:	85 e0       	ldi	r24, 0x05	; 5
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		if((currentcounty == des_county) && y_reached==0)
    203e:	20 91 78 03 	lds	r18, 0x0378
    2042:	30 91 79 03 	lds	r19, 0x0379
    2046:	80 91 0c 02 	lds	r24, 0x020C
    204a:	90 91 0d 02 	lds	r25, 0x020D
    204e:	28 17       	cp	r18, r24
    2050:	39 07       	cpc	r19, r25
    2052:	09 f0       	breq	.+2      	; 0x2056 <backroute+0x894>
    2054:	40 c0       	rjmp	.+128    	; 0x20d6 <backroute+0x914>
    2056:	80 91 7e 03 	lds	r24, 0x037E
    205a:	90 91 7f 03 	lds	r25, 0x037F
    205e:	89 2b       	or	r24, r25
    2060:	09 f0       	breq	.+2      	; 0x2064 <backroute+0x8a2>
    2062:	39 c0       	rjmp	.+114    	; 0x20d6 <backroute+0x914>
    2064:	88 e8       	ldi	r24, 0x88	; 136
    2066:	93 e1       	ldi	r25, 0x13	; 19
    2068:	29 e1       	ldi	r18, 0x19	; 25
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	f9 01       	movw	r30, r18
    206e:	31 97       	sbiw	r30, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <backroute+0x8ac>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	d9 f7       	brne	.-10     	; 0x206c <backroute+0x8aa>
		{
			_delay_ms(500);
			flagrightturn=1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	90 93 85 03 	sts	0x0385, r25
    207e:	80 93 84 03 	sts	0x0384, r24
			forward_mm(50); //Moves robot forward 100mm
    2082:	82 e3       	ldi	r24, 0x32	; 50
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
			if(dest_backward==1)
    208a:	80 91 5a 03 	lds	r24, 0x035A
    208e:	90 91 5b 03 	lds	r25, 0x035B
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	29 f4       	brne	.+10     	; 0x20a0 <backroute+0x8de>
			{
				right_degrees(90);
    2096:	8a e5       	ldi	r24, 0x5A	; 90
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <backroute+0x8e6>
			}
			else
			{
				left_degrees(90);
    20a0:	8a e5       	ldi	r24, 0x5A	; 90
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
    20a8:	88 e8       	ldi	r24, 0x88	; 136
    20aa:	93 e1       	ldi	r25, 0x13	; 19
    20ac:	29 e1       	ldi	r18, 0x19	; 25
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	f9 01       	movw	r30, r18
    20b2:	31 97       	sbiw	r30, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <backroute+0x8f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	d9 f7       	brne	.-10     	; 0x20b0 <backroute+0x8ee>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    20ba:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    20bc:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    20be:	86 60       	ori	r24, 0x06	; 6
	PORTA = PortARestore;    // executing the command
    20c0:	82 b9       	out	0x02, r24	; 2
				left_degrees(90);
			}

			_delay_ms(500);
			forward();
			y_reached=1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	90 93 7f 03 	sts	0x037F, r25
    20ca:	80 93 7e 03 	sts	0x037E, r24
			forward_mm(20);
    20ce:	84 e1       	ldi	r24, 0x14	; 20
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		}
		if((currentcountx == des_countx))
    20d6:	20 91 76 03 	lds	r18, 0x0376
    20da:	30 91 77 03 	lds	r19, 0x0377
    20de:	80 91 0a 02 	lds	r24, 0x020A
    20e2:	90 91 0b 02 	lds	r25, 0x020B
    20e6:	28 17       	cp	r18, r24
    20e8:	39 07       	cpc	r19, r25
    20ea:	49 f4       	brne	.+18     	; 0x20fe <backroute+0x93c>
    20ec:	88 e8       	ldi	r24, 0x88	; 136
    20ee:	93 e1       	ldi	r25, 0x13	; 19
    20f0:	29 e1       	ldi	r18, 0x19	; 25
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	f9 01       	movw	r30, r18
    20f6:	31 97       	sbiw	r30, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <backroute+0x934>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	d9 f7       	brne	.-10     	; 0x20f4 <backroute+0x932>
		{
			_delay_ms(500);
		}
	}

	if((currentcountx == des_countx) && (currentcounty == des_county) )
    20fe:	20 91 76 03 	lds	r18, 0x0376
    2102:	30 91 77 03 	lds	r19, 0x0377
    2106:	80 91 0a 02 	lds	r24, 0x020A
    210a:	90 91 0b 02 	lds	r25, 0x020B
    210e:	28 17       	cp	r18, r24
    2110:	39 07       	cpc	r19, r25
    2112:	b9 f5       	brne	.+110    	; 0x2182 <backroute+0x9c0>
    2114:	20 91 78 03 	lds	r18, 0x0378
    2118:	30 91 79 03 	lds	r19, 0x0379
    211c:	80 91 0c 02 	lds	r24, 0x020C
    2120:	90 91 0d 02 	lds	r25, 0x020D
    2124:	28 17       	cp	r18, r24
    2126:	39 07       	cpc	r19, r25
    2128:	61 f5       	brne	.+88     	; 0x2182 <backroute+0x9c0>
	{
		last_choice=0;
    212a:	10 92 59 03 	sts	0x0359, r1
    212e:	10 92 58 03 	sts	0x0358, r1
		forward_mm(50);
    2132:	82 e3       	ldi	r24, 0x32	; 50
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		config_done=0;
    213a:	10 92 57 03 	sts	0x0357, r1
    213e:	10 92 56 03 	sts	0x0356, r1
		flag_startreached=1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	90 93 6d 03 	sts	0x036D, r25
    214a:	80 93 6c 03 	sts	0x036C, r24
		flagturn=0;
    214e:	10 92 83 03 	sts	0x0383, r1
    2152:	10 92 82 03 	sts	0x0382, r1
		flagrightturn=0;
    2156:	10 92 85 03 	sts	0x0385, r1
    215a:	10 92 84 03 	sts	0x0384, r1
		y_reached=0;
    215e:	10 92 7f 03 	sts	0x037F, r1
    2162:	10 92 7e 03 	sts	0x037E, r1
		back_s=0;
    2166:	10 92 7b 03 	sts	0x037B, r1
    216a:	10 92 7a 03 	sts	0x037A, r1
		count=100;
    216e:	84 e6       	ldi	r24, 0x64	; 100
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	90 93 03 02 	sts	0x0203, r25
    2176:	80 93 02 02 	sts	0x0202, r24
		dest_backward=0;
    217a:	10 92 5b 03 	sts	0x035B, r1
    217e:	10 92 5a 03 	sts	0x035A, r1
	}
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
    2182:	80 91 47 03 	lds	r24, 0x0347
    2186:	80 34       	cpi	r24, 0x40	; 64
    2188:	08 f0       	brcs	.+2      	; 0x218c <backroute+0x9ca>
    218a:	95 c0       	rjmp	.+298    	; 0x22b6 <__stack+0xb7>
    218c:	80 91 46 03 	lds	r24, 0x0346
    2190:	80 34       	cpi	r24, 0x40	; 64
    2192:	08 f0       	brcs	.+2      	; 0x2196 <backroute+0x9d4>
    2194:	90 c0       	rjmp	.+288    	; 0x22b6 <__stack+0xb7>
    2196:	80 91 48 03 	lds	r24, 0x0348
    219a:	80 34       	cpi	r24, 0x40	; 64
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <backroute+0x9de>
    219e:	8b c0       	rjmp	.+278    	; 0x22b6 <__stack+0xb7>
    21a0:	80 91 5c 03 	lds	r24, 0x035C
    21a4:	88 23       	and	r24, r24
    21a6:	09 f0       	breq	.+2      	; 0x21aa <backroute+0x9e8>
    21a8:	86 c0       	rjmp	.+268    	; 0x22b6 <__stack+0xb7>
	{
		last_choice=8;
    21aa:	88 e0       	ldi	r24, 0x08	; 8
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	90 93 59 03 	sts	0x0359, r25
    21b2:	80 93 58 03 	sts	0x0358, r24
		adjust_path();
    21b6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <adjust_path>
    21ba:	7d c0       	rjmp	.+250    	; 0x22b6 <__stack+0xb7>
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
	{
		sample_sensor();
    21bc:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    21c0:	4b c0       	rjmp	.+150    	; 0x2258 <__stack+0x59>
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    21c2:	70 92 5c 03 	sts	0x035C, r7
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    21c6:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    21c8:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    21ca:	82 b9       	out	0x02, r24	; 2

		{
			obstflag=1;
			stop();
			//buzzer_on();
			_delay_ms(delayvalueback);
    21cc:	60 91 34 02 	lds	r22, 0x0234
    21d0:	70 91 35 02 	lds	r23, 0x0235
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    21dc:	5b 01       	movw	r10, r22
    21de:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    21ec:	7b 01       	movw	r14, r22
    21ee:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	1c f4       	brge	.+6      	; 0x2206 <__stack+0x7>
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	22 c0       	rjmp	.+68     	; 0x224a <__stack+0x4b>
		__ticks = 1;
	else if (__tmp > 65535)
    2206:	c8 01       	movw	r24, r16
    2208:	b7 01       	movw	r22, r14
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	a4 f4       	brge	.+40     	; 0x2242 <__stack+0x43>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	c6 01       	movw	r24, r12
    221c:	b5 01       	movw	r22, r10
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    222a:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    222e:	05 c0       	rjmp	.+10     	; 0x223a <__stack+0x3b>
    2230:	c4 01       	movw	r24, r8
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <__stack+0x33>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	61 50       	subi	r22, 0x01	; 1
    2238:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223a:	61 15       	cp	r22, r1
    223c:	71 05       	cpc	r23, r1
    223e:	c1 f7       	brne	.-16     	; 0x2230 <__stack+0x31>
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <__stack+0x51>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	c8 01       	movw	r24, r16
    2244:	b7 01       	movw	r22, r14
    2246:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    224a:	cb 01       	movw	r24, r22
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <__stack+0x4d>
			sample_sensor();
    2250:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
			handle_obst_backward();
    2254:	0e 94 b0 07 	call	0xf60	; 0xf60 <handle_obst_backward>
		adjust_path();
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    2258:	80 91 68 03 	lds	r24, 0x0368
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	20 91 04 02 	lds	r18, 0x0204
    2262:	30 91 05 02 	lds	r19, 0x0205
    2266:	28 17       	cp	r18, r24
    2268:	39 07       	cpc	r19, r25
    226a:	08 f4       	brcc	.+2      	; 0x226e <__stack+0x6f>
    226c:	aa cf       	rjmp	.-172    	; 0x21c2 <backroute+0xa00>
    226e:	20 91 06 02 	lds	r18, 0x0206
    2272:	30 91 07 02 	lds	r19, 0x0207
    2276:	80 91 69 03 	lds	r24, 0x0369
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	82 17       	cp	r24, r18
    227e:	93 07       	cpc	r25, r19
    2280:	08 f4       	brcc	.+2      	; 0x2284 <__stack+0x85>
    2282:	9f cf       	rjmp	.-194    	; 0x21c2 <backroute+0xa00>
    2284:	80 91 66 03 	lds	r24, 0x0366
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	82 17       	cp	r24, r18
    228c:	93 07       	cpc	r25, r19
    228e:	08 f4       	brcc	.+2      	; 0x2292 <__stack+0x93>
    2290:	98 cf       	rjmp	.-208    	; 0x21c2 <backroute+0xa00>
    2292:	80 91 67 03 	lds	r24, 0x0367
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	82 17       	cp	r24, r18
    229a:	93 07       	cpc	r25, r19
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <__stack+0xa1>
    229e:	91 cf       	rjmp	.-222    	; 0x21c2 <backroute+0xa00>
			//buzzer_on();
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		forward_mm(5);
    22a0:	85 e0       	ldi	r24, 0x05	; 5
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		last_choice=9;
    22a8:	d0 93 59 03 	sts	0x0359, r29
    22ac:	c0 93 58 03 	sts	0x0358, r28
		adc_sample();
    22b0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    22b4:	07 c0       	rjmp	.+14     	; 0x22c4 <__stack+0xc5>
    22b6:	89 e1       	ldi	r24, 0x19	; 25
    22b8:	88 2e       	mov	r8, r24
    22ba:	91 2c       	mov	r9, r1
	{
		sample_sensor();
		while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)

		{
			obstflag=1;
    22bc:	77 24       	eor	r7, r7
    22be:	73 94       	inc	r7
			_delay_ms(delayvalueback);
			sample_sensor();
			handle_obst_backward();
		}
		forward_mm(5);
		last_choice=9;
    22c0:	c9 e0       	ldi	r28, 0x09	; 9
    22c2:	d0 e0       	ldi	r29, 0x00	; 0
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
	{
		last_choice=8;
		adjust_path();
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0)  )
    22c4:	80 91 47 03 	lds	r24, 0x0347
    22c8:	80 34       	cpi	r24, 0x40	; 64
    22ca:	b0 f0       	brcs	.+44     	; 0x22f8 <__stack+0xf9>
    22cc:	80 91 46 03 	lds	r24, 0x0346
    22d0:	80 34       	cpi	r24, 0x40	; 64
    22d2:	90 f0       	brcs	.+36     	; 0x22f8 <__stack+0xf9>
    22d4:	80 91 48 03 	lds	r24, 0x0348
    22d8:	80 34       	cpi	r24, 0x40	; 64
    22da:	70 f0       	brcs	.+28     	; 0x22f8 <__stack+0xf9>
    22dc:	80 91 58 03 	lds	r24, 0x0358
    22e0:	90 91 59 03 	lds	r25, 0x0359
    22e4:	86 30       	cpi	r24, 0x06	; 6
    22e6:	91 05       	cpc	r25, r1
    22e8:	11 f0       	breq	.+4      	; 0x22ee <__stack+0xef>
    22ea:	09 97       	sbiw	r24, 0x09	; 9
    22ec:	29 f4       	brne	.+10     	; 0x22f8 <__stack+0xf9>
    22ee:	80 91 5c 03 	lds	r24, 0x035C
    22f2:	88 23       	and	r24, r24
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <__stack+0xf9>
    22f6:	62 cf       	rjmp	.-316    	; 0x21bc <backroute+0x9fa>
		last_choice=9;
		adc_sample();

	}

	if(flag_startreached==1)
    22f8:	80 91 6c 03 	lds	r24, 0x036C
    22fc:	90 91 6d 03 	lds	r25, 0x036D
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	11 f4       	brne	.+4      	; 0x2308 <__stack+0x109>
	{
		reposition(); 
    2304:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <reposition>
	}

	return (1);
}
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	df 90       	pop	r13
    231a:	cf 90       	pop	r12
    231c:	bf 90       	pop	r11
    231e:	af 90       	pop	r10
    2320:	9f 90       	pop	r9
    2322:	8f 90       	pop	r8
    2324:	7f 90       	pop	r7
    2326:	08 95       	ret

00002328 <checkobst>:
//				checks if the sensor values are under acceptable values
//				If obstacle is detected, waits for the specified time and sample again
//				Returns when the obstacle moves
/**********************************************************************************/
void checkobst()
{
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
	sample_sensor();
    233c:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
    2340:	c9 e1       	ldi	r28, 0x19	; 25
    2342:	d0 e0       	ldi	r29, 0x00	; 0
    2344:	47 c0       	rjmp	.+142    	; 0x23d4 <checkobst+0xac>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2346:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2348:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    234a:	82 b9       	out	0x02, r24	; 2
{
	sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		stop();
		_delay_ms(delayvalueonward);
    234c:	60 91 32 02 	lds	r22, 0x0232
    2350:	70 91 33 02 	lds	r23, 0x0233
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    235c:	5b 01       	movw	r10, r22
    235e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a e7       	ldi	r20, 0x7A	; 122
    2366:	53 e4       	ldi	r21, 0x43	; 67
    2368:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    236c:	7b 01       	movw	r14, r22
    236e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	1c f4       	brge	.+6      	; 0x2386 <checkobst+0x5e>
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	22 c0       	rjmp	.+68     	; 0x23ca <checkobst+0xa2>
		__ticks = 1;
	else if (__tmp > 65535)
    2386:	c8 01       	movw	r24, r16
    2388:	b7 01       	movw	r22, r14
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	57 e4       	ldi	r21, 0x47	; 71
    2392:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    2396:	18 16       	cp	r1, r24
    2398:	a4 f4       	brge	.+40     	; 0x23c2 <checkobst+0x9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	c6 01       	movw	r24, r12
    239c:	b5 01       	movw	r22, r10
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    23aa:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <checkobst+0x92>
    23b0:	ce 01       	movw	r24, r28
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <checkobst+0x8a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	61 50       	subi	r22, 0x01	; 1
    23b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	61 15       	cp	r22, r1
    23bc:	71 05       	cpc	r23, r1
    23be:	c1 f7       	brne	.-16     	; 0x23b0 <checkobst+0x88>
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <checkobst+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	c8 01       	movw	r24, r16
    23c4:	b7 01       	movw	r22, r14
    23c6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    23ca:	cb 01       	movw	r24, r22
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <checkobst+0xa4>
		sample_sensor();
    23d0:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
//				Returns when the obstacle moves
/**********************************************************************************/
void checkobst()
{
	sample_sensor();
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    23d4:	80 91 68 03 	lds	r24, 0x0368
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	20 91 04 02 	lds	r18, 0x0204
    23de:	30 91 05 02 	lds	r19, 0x0205
    23e2:	28 17       	cp	r18, r24
    23e4:	39 07       	cpc	r19, r25
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <checkobst+0xc2>
    23e8:	ae cf       	rjmp	.-164    	; 0x2346 <checkobst+0x1e>
    23ea:	20 91 06 02 	lds	r18, 0x0206
    23ee:	30 91 07 02 	lds	r19, 0x0207
    23f2:	80 91 69 03 	lds	r24, 0x0369
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	82 17       	cp	r24, r18
    23fa:	93 07       	cpc	r25, r19
    23fc:	08 f4       	brcc	.+2      	; 0x2400 <checkobst+0xd8>
    23fe:	a3 cf       	rjmp	.-186    	; 0x2346 <checkobst+0x1e>
    2400:	80 91 66 03 	lds	r24, 0x0366
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	82 17       	cp	r24, r18
    2408:	93 07       	cpc	r25, r19
    240a:	08 f4       	brcc	.+2      	; 0x240e <checkobst+0xe6>
    240c:	9c cf       	rjmp	.-200    	; 0x2346 <checkobst+0x1e>
    240e:	80 91 67 03 	lds	r24, 0x0367
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	82 17       	cp	r24, r18
    2416:	93 07       	cpc	r25, r19
    2418:	08 f4       	brcc	.+2      	; 0x241c <checkobst+0xf4>
    241a:	95 cf       	rjmp	.-214    	; 0x2346 <checkobst+0x1e>
	{
		stop();
		_delay_ms(delayvalueonward);
		sample_sensor();
	}
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	08 95       	ret

00002432 <forward_mm_totable>:
//Output : void
//Description : distance to move with following the black line
//				
/**********************************************************************************/
void forward_mm_totable(int distance_togo)
{
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	8c 01       	movw	r16, r24
	int distance_travelled=0;
	adc_sample();
    243e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    2442:	c0 e0       	ldi	r28, 0x00	; 0
    2444:	d0 e0       	ldi	r29, 0x00	; 0
		sample_sensor();
		obstflag=0;
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
			obstflag=1;
    2446:	ff 24       	eor	r15, r15
    2448:	f3 94       	inc	r15
	int distance_travelled=0;
	adc_sample();

	while(1)
	{
		adc_sample();
    244a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
		sample_sensor();
    244e:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		obstflag=0;
    2452:	10 92 5c 03 	sts	0x035C, r1
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    2456:	80 91 68 03 	lds	r24, 0x0368
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	20 91 04 02 	lds	r18, 0x0204
    2460:	30 91 05 02 	lds	r19, 0x0205
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	b0 f0       	brcs	.+44     	; 0x2496 <forward_mm_totable+0x64>
    246a:	20 91 06 02 	lds	r18, 0x0206
    246e:	30 91 07 02 	lds	r19, 0x0207
    2472:	80 91 69 03 	lds	r24, 0x0369
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	82 17       	cp	r24, r18
    247a:	93 07       	cpc	r25, r19
    247c:	60 f0       	brcs	.+24     	; 0x2496 <forward_mm_totable+0x64>
    247e:	80 91 66 03 	lds	r24, 0x0366
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	30 f0       	brcs	.+12     	; 0x2496 <forward_mm_totable+0x64>
    248a:	80 91 67 03 	lds	r24, 0x0367
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	82 17       	cp	r24, r18
    2492:	93 07       	cpc	r25, r19
    2494:	28 f4       	brcc	.+10     	; 0x24a0 <forward_mm_totable+0x6e>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2496:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2498:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    249a:	82 b9       	out	0x02, r24	; 2
		sample_sensor();
		obstflag=0;
		if(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
		{
			stop();
			obstflag=1;
    249c:	f0 92 5c 03 	sts	0x035C, r15
		}

		if(distance_travelled >= distance_togo)
    24a0:	c0 17       	cp	r28, r16
    24a2:	d1 07       	cpc	r29, r17
    24a4:	0c f0       	brlt	.+2      	; 0x24a8 <forward_mm_totable+0x76>
    24a6:	91 c0       	rjmp	.+290    	; 0x25ca <forward_mm_totable+0x198>
		{
			break;
		}

		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    24a8:	80 91 47 03 	lds	r24, 0x0347
    24ac:	80 34       	cpi	r24, 0x40	; 64
    24ae:	80 f0       	brcs	.+32     	; 0x24d0 <forward_mm_totable+0x9e>
    24b0:	80 91 46 03 	lds	r24, 0x0346
    24b4:	80 34       	cpi	r24, 0x40	; 64
    24b6:	60 f0       	brcs	.+24     	; 0x24d0 <forward_mm_totable+0x9e>
    24b8:	80 91 48 03 	lds	r24, 0x0348
    24bc:	80 34       	cpi	r24, 0x40	; 64
    24be:	40 f4       	brcc	.+16     	; 0x24d0 <forward_mm_totable+0x9e>
    24c0:	80 91 5c 03 	lds	r24, 0x035C
    24c4:	88 23       	and	r24, r24
    24c6:	21 f4       	brne	.+8      	; 0x24d0 <forward_mm_totable+0x9e>
		{
			left_degrees(1);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    24d0:	80 91 47 03 	lds	r24, 0x0347
    24d4:	80 34       	cpi	r24, 0x40	; 64
    24d6:	80 f0       	brcs	.+32     	; 0x24f8 <forward_mm_totable+0xc6>
    24d8:	80 91 46 03 	lds	r24, 0x0346
    24dc:	80 34       	cpi	r24, 0x40	; 64
    24de:	60 f4       	brcc	.+24     	; 0x24f8 <forward_mm_totable+0xc6>
    24e0:	80 91 48 03 	lds	r24, 0x0348
    24e4:	80 34       	cpi	r24, 0x40	; 64
    24e6:	40 f0       	brcs	.+16     	; 0x24f8 <forward_mm_totable+0xc6>
    24e8:	80 91 5c 03 	lds	r24, 0x035C
    24ec:	88 23       	and	r24, r24
    24ee:	21 f4       	brne	.+8      	; 0x24f8 <forward_mm_totable+0xc6>
		{
			right_degrees(1);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    24f8:	80 91 47 03 	lds	r24, 0x0347
    24fc:	80 34       	cpi	r24, 0x40	; 64
    24fe:	88 f0       	brcs	.+34     	; 0x2522 <forward_mm_totable+0xf0>
    2500:	80 91 46 03 	lds	r24, 0x0346
    2504:	80 34       	cpi	r24, 0x40	; 64
    2506:	68 f4       	brcc	.+26     	; 0x2522 <forward_mm_totable+0xf0>
    2508:	80 91 48 03 	lds	r24, 0x0348
    250c:	80 34       	cpi	r24, 0x40	; 64
    250e:	48 f4       	brcc	.+18     	; 0x2522 <forward_mm_totable+0xf0>
    2510:	80 91 5c 03 	lds	r24, 0x035C
    2514:	88 23       	and	r24, r24
    2516:	29 f4       	brne	.+10     	; 0x2522 <forward_mm_totable+0xf0>
		{
			forward_mm(5);
    2518:	85 e0       	ldi	r24, 0x05	; 5
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
			distance_travelled=distance_travelled+5;
    2520:	25 96       	adiw	r28, 0x05	; 5

		}
		if(Center_white_line>=BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    2522:	80 91 47 03 	lds	r24, 0x0347
    2526:	80 34       	cpi	r24, 0x40	; 64
    2528:	88 f0       	brcs	.+34     	; 0x254c <forward_mm_totable+0x11a>
    252a:	80 91 46 03 	lds	r24, 0x0346
    252e:	80 34       	cpi	r24, 0x40	; 64
    2530:	68 f0       	brcs	.+26     	; 0x254c <forward_mm_totable+0x11a>
    2532:	80 91 48 03 	lds	r24, 0x0348
    2536:	80 34       	cpi	r24, 0x40	; 64
    2538:	48 f0       	brcs	.+18     	; 0x254c <forward_mm_totable+0x11a>
    253a:	80 91 5c 03 	lds	r24, 0x035C
    253e:	88 23       	and	r24, r24
    2540:	29 f4       	brne	.+10     	; 0x254c <forward_mm_totable+0x11a>
		{
			forward_mm(5);
    2542:	85 e0       	ldi	r24, 0x05	; 5
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
			distance_travelled=distance_travelled+5;
    254a:	25 96       	adiw	r28, 0x05	; 5

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line>=BLACK_LINE && obstflag ==0)
    254c:	80 91 47 03 	lds	r24, 0x0347
    2550:	80 34       	cpi	r24, 0x40	; 64
    2552:	80 f4       	brcc	.+32     	; 0x2574 <forward_mm_totable+0x142>
    2554:	80 91 46 03 	lds	r24, 0x0346
    2558:	80 34       	cpi	r24, 0x40	; 64
    255a:	60 f4       	brcc	.+24     	; 0x2574 <forward_mm_totable+0x142>
    255c:	80 91 48 03 	lds	r24, 0x0348
    2560:	80 34       	cpi	r24, 0x40	; 64
    2562:	40 f0       	brcs	.+16     	; 0x2574 <forward_mm_totable+0x142>
    2564:	80 91 5c 03 	lds	r24, 0x035C
    2568:	88 23       	and	r24, r24
    256a:	21 f4       	brne	.+8      	; 0x2574 <forward_mm_totable+0x142>
		{
			right_degrees(2);
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line>=BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    2574:	80 91 47 03 	lds	r24, 0x0347
    2578:	80 34       	cpi	r24, 0x40	; 64
    257a:	80 f4       	brcc	.+32     	; 0x259c <forward_mm_totable+0x16a>
    257c:	80 91 46 03 	lds	r24, 0x0346
    2580:	80 34       	cpi	r24, 0x40	; 64
    2582:	60 f0       	brcs	.+24     	; 0x259c <forward_mm_totable+0x16a>
    2584:	80 91 48 03 	lds	r24, 0x0348
    2588:	80 34       	cpi	r24, 0x40	; 64
    258a:	40 f4       	brcc	.+16     	; 0x259c <forward_mm_totable+0x16a>
    258c:	80 91 5c 03 	lds	r24, 0x035C
    2590:	88 23       	and	r24, r24
    2592:	21 f4       	brne	.+8      	; 0x259c <forward_mm_totable+0x16a>
		{
			left_degrees(2);
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>

		}
		if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && obstflag ==0)
    259c:	80 91 47 03 	lds	r24, 0x0347
    25a0:	80 34       	cpi	r24, 0x40	; 64
    25a2:	08 f0       	brcs	.+2      	; 0x25a6 <forward_mm_totable+0x174>
    25a4:	52 cf       	rjmp	.-348    	; 0x244a <forward_mm_totable+0x18>
    25a6:	80 91 46 03 	lds	r24, 0x0346
    25aa:	80 34       	cpi	r24, 0x40	; 64
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <forward_mm_totable+0x17e>
    25ae:	4d cf       	rjmp	.-358    	; 0x244a <forward_mm_totable+0x18>
    25b0:	80 91 48 03 	lds	r24, 0x0348
    25b4:	80 34       	cpi	r24, 0x40	; 64
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <forward_mm_totable+0x188>
    25b8:	48 cf       	rjmp	.-368    	; 0x244a <forward_mm_totable+0x18>
    25ba:	80 91 5c 03 	lds	r24, 0x035C
    25be:	88 23       	and	r24, r24
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <forward_mm_totable+0x192>
    25c2:	43 cf       	rjmp	.-378    	; 0x244a <forward_mm_totable+0x18>
		{
			//stop();
			adjust_path();
    25c4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <adjust_path>
    25c8:	40 cf       	rjmp	.-384    	; 0x244a <forward_mm_totable+0x18>

		}
	}


}
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	08 95       	ret

000025d6 <route>:
//				Updating the present coordinates of the robot based on the WL sensor readings
//				Taking the right decision to whether turn right or left when 'x' coordinates matches
//				Reaching the particular table.
/**********************************************************************************/
int route()
{
    25d6:	9f 92       	push	r9
    25d8:	af 92       	push	r10
    25da:	bf 92       	push	r11
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
	adc_sample();					//WL sensor reading
    25ec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	sample_sensor();				//Sharp sensor and IR sensor readings
    25f0:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
	flag=0;							
    25f4:	10 92 49 03 	sts	0x0349, r1
	obstflag=0;						//Obstacle indication
    25f8:	10 92 5c 03 	sts	0x035C, r1
	x_coor=currentcountx;			//Present 'x' coordinates
    25fc:	80 91 76 03 	lds	r24, 0x0376
    2600:	90 91 77 03 	lds	r25, 0x0377
    2604:	90 93 9c 03 	sts	0x039C, r25
    2608:	80 93 9b 03 	sts	0x039B, r24
	y_coor=currentcounty;			//Present 'y' coordinates
    260c:	80 91 78 03 	lds	r24, 0x0378
    2610:	90 91 79 03 	lds	r25, 0x0379
    2614:	90 93 8b 03 	sts	0x038B, r25
    2618:	80 93 8a 03 	sts	0x038A, r24
	print_sensor(1,1,3);    		//Prints value of White Line Sensor1
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	43 e0       	ldi	r20, 0x03	; 3
    2622:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	print_sensor(1,5,2);    		//Prints Value of White Line Sensor2
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	65 e0       	ldi	r22, 0x05	; 5
    262a:	42 e0       	ldi	r20, 0x02	; 2
    262c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	print_sensor(1,9,1);    		//Prints Value of White Line Sensor3
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	69 e0       	ldi	r22, 0x09	; 9
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 7d 04 	call	0x8fa	; 0x8fa <print_sensor>
	lcd_print(2,1,currentcountx,2);
    263a:	40 91 76 03 	lds	r20, 0x0376
    263e:	50 91 77 03 	lds	r21, 0x0377
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	22 e0       	ldi	r18, 0x02	; 2
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
	lcd_print(2,5,currentcounty,2);
    264e:	40 91 78 03 	lds	r20, 0x0378
    2652:	50 91 79 03 	lds	r21, 0x0379
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	65 e0       	ldi	r22, 0x05	; 5
    265a:	22 e0       	ldi	r18, 0x02	; 2
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>

	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		obstflag=1;					//obstacle found
    2662:	99 24       	eor	r9, r9
    2664:	93 94       	inc	r9
    2666:	c9 e1       	ldi	r28, 0x19	; 25
    2668:	d0 e0       	ldi	r29, 0x00	; 0
    266a:	51 c0       	rjmp	.+162    	; 0x270e <route+0x138>
    266c:	90 92 5c 03 	sts	0x035C, r9
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2670:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2672:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    2674:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2676:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    2678:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    267a:	88 b9       	out	0x08, r24	; 8
	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
	{
		obstflag=1;					//obstacle found
		stop();					
		buzzer_on();	
		_delay_ms(delayvalueonward);
    267c:	60 91 32 02 	lds	r22, 0x0232
    2680:	70 91 33 02 	lds	r23, 0x0233
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 9e 1b 	call	0x373c	; 0x373c <__floatunsisf>
    268c:	5b 01       	movw	r10, r22
    268e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a e7       	ldi	r20, 0x7A	; 122
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    269c:	7b 01       	movw	r14, r22
    269e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	1c f4       	brge	.+6      	; 0x26b6 <route+0xe0>
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	22 c0       	rjmp	.+68     	; 0x26fa <route+0x124>
		__ticks = 1;
	else if (__tmp > 65535)
    26b6:	c8 01       	movw	r24, r16
    26b8:	b7 01       	movw	r22, r14
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 ba 1a 	call	0x3574	; 0x3574 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	a4 f4       	brge	.+40     	; 0x26f2 <route+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	c6 01       	movw	r24, r12
    26cc:	b5 01       	movw	r22, r10
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 14 19 	call	0x3228	; 0x3228 <__mulsf3>
    26da:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <route+0x114>
    26e0:	ce 01       	movw	r24, r28
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <route+0x10c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	61 50       	subi	r22, 0x01	; 1
    26e8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	c1 f7       	brne	.-16     	; 0x26e0 <route+0x10a>
    26f0:	07 c0       	rjmp	.+14     	; 0x2700 <route+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	c8 01       	movw	r24, r16
    26f4:	b7 01       	movw	r22, r14
    26f6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__fixunssfsi>
    26fa:	cb 01       	movw	r24, r22
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <route+0x126>
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2700:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    2702:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    2704:	88 b9       	out	0x08, r24	; 8
		obstflag=1;					//obstacle found
		stop();					
		buzzer_on();	
		_delay_ms(delayvalueonward);
		buzzer_off();
		sample_sensor();
    2706:	0e 94 6d 06 	call	0xcda	; 0xcda <sample_sensor>
		//handle_obst_onward();
		checkobst();				//Function to handle the obstacle
    270a:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
	print_sensor(1,5,2);    		//Prints Value of White Line Sensor2
	print_sensor(1,9,1);    		//Prints Value of White Line Sensor3
	lcd_print(2,1,currentcountx,2);
	lcd_print(2,5,currentcounty,2);

	while(Front_Sharp_Sensor>thresh_Front_Sharp_Sensor || Front_IR_Sensor<thresh_Front_IR_Sensor || Left_IR_sensor2 <thresh_Front_IR_Sensor || Right_IR_sensor4 <thresh_Front_IR_Sensor)
    270e:	80 91 68 03 	lds	r24, 0x0368
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	20 91 04 02 	lds	r18, 0x0204
    2718:	30 91 05 02 	lds	r19, 0x0205
    271c:	28 17       	cp	r18, r24
    271e:	39 07       	cpc	r19, r25
    2720:	08 f4       	brcc	.+2      	; 0x2724 <route+0x14e>
    2722:	a4 cf       	rjmp	.-184    	; 0x266c <route+0x96>
    2724:	20 91 06 02 	lds	r18, 0x0206
    2728:	30 91 07 02 	lds	r19, 0x0207
    272c:	80 91 69 03 	lds	r24, 0x0369
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	82 17       	cp	r24, r18
    2734:	93 07       	cpc	r25, r19
    2736:	08 f4       	brcc	.+2      	; 0x273a <route+0x164>
    2738:	99 cf       	rjmp	.-206    	; 0x266c <route+0x96>
    273a:	80 91 66 03 	lds	r24, 0x0366
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 17       	cp	r24, r18
    2742:	93 07       	cpc	r25, r19
    2744:	08 f4       	brcc	.+2      	; 0x2748 <route+0x172>
    2746:	92 cf       	rjmp	.-220    	; 0x266c <route+0x96>
    2748:	80 91 67 03 	lds	r24, 0x0367
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	08 f4       	brcc	.+2      	; 0x2756 <route+0x180>
    2754:	8b cf       	rjmp	.-234    	; 0x266c <route+0x96>
	{
		obstflag=1;
	}
	else
	{
		obstflag=0;
    2756:	10 92 5c 03 	sts	0x035C, r1
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		checkobst();				//Function to handle the obstacle
		flag=1;
    275a:	ff 24       	eor	r15, r15
    275c:	f3 94       	inc	r15
		last_choice=1;				//To indicate the last option selected in the last route function 
    275e:	01 e0       	ldi	r16, 0x01	; 1
    2760:	10 e0       	ldi	r17, 0x00	; 0
    2762:	12 c0       	rjmp	.+36     	; 0x2788 <route+0x1b2>
		obstflag=0;
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
	{
		checkobst();				//Function to handle the obstacle
    2764:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		flag=1;
    2768:	f0 92 49 03 	sts	0x0349, r15
		last_choice=1;				//To indicate the last option selected in the last route function 
    276c:	10 93 59 03 	sts	0x0359, r17
    2770:	00 93 58 03 	sts	0x0358, r16
		forward_mm(5);
    2774:	85 e0       	ldi	r24, 0x05	; 5
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;					
    277c:	10 92 7b 03 	sts	0x037B, r1
    2780:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    2784:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
	else
	{
		obstflag=0;
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))  //4 cases
    2788:	80 91 47 03 	lds	r24, 0x0347
    278c:	80 34       	cpi	r24, 0x40	; 64
    278e:	10 f1       	brcs	.+68     	; 0x27d4 <route+0x1fe>
    2790:	80 91 46 03 	lds	r24, 0x0346
    2794:	80 34       	cpi	r24, 0x40	; 64
    2796:	f0 f4       	brcc	.+60     	; 0x27d4 <route+0x1fe>
    2798:	80 91 48 03 	lds	r24, 0x0348
    279c:	80 34       	cpi	r24, 0x40	; 64
    279e:	d0 f4       	brcc	.+52     	; 0x27d4 <route+0x1fe>
    27a0:	80 91 5c 03 	lds	r24, 0x035C
    27a4:	88 23       	and	r24, r24
    27a6:	f1 f2       	breq	.-68     	; 0x2764 <route+0x18e>
    27a8:	15 c0       	rjmp	.+42     	; 0x27d4 <route+0x1fe>
		adc_sample();
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    27aa:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		last_choice=2;
    27ae:	10 93 59 03 	sts	0x0359, r17
    27b2:	00 93 58 03 	sts	0x0358, r16
		left_degrees(2);			//Turn left
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		forward_mm(5);				//Move forward 5 mm
    27be:	85 e0       	ldi	r24, 0x05	; 5
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    27c6:	10 92 7b 03 	sts	0x037B, r1
    27ca:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    27ce:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <route+0x202>
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
	{
		checkobst();
		last_choice=2;
    27d4:	02 e0       	ldi	r16, 0x02	; 2
    27d6:	10 e0       	ldi	r17, 0x00	; 0
		forward_mm(5);
		back_s=0;					
		adc_sample();
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<BLACK_LINE) && (obstflag==0))
    27d8:	80 91 47 03 	lds	r24, 0x0347
    27dc:	80 34       	cpi	r24, 0x40	; 64
    27de:	10 f1       	brcs	.+68     	; 0x2824 <route+0x24e>
    27e0:	80 91 46 03 	lds	r24, 0x0346
    27e4:	80 34       	cpi	r24, 0x40	; 64
    27e6:	f0 f0       	brcs	.+60     	; 0x2824 <route+0x24e>
    27e8:	80 91 48 03 	lds	r24, 0x0348
    27ec:	80 34       	cpi	r24, 0x40	; 64
    27ee:	d0 f4       	brcc	.+52     	; 0x2824 <route+0x24e>
    27f0:	80 91 5c 03 	lds	r24, 0x035C
    27f4:	88 23       	and	r24, r24
    27f6:	c9 f2       	breq	.-78     	; 0x27aa <route+0x1d4>
    27f8:	15 c0       	rjmp	.+42     	; 0x2824 <route+0x24e>
		adc_sample();
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    27fa:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		last_choice=3;
    27fe:	10 93 59 03 	sts	0x0359, r17
    2802:	00 93 58 03 	sts	0x0358, r16
		right_degrees(2);			//Turn right by 2 degrees
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		forward_mm(5);				//Move forward 5 mm
    280e:	85 e0       	ldi	r24, 0x05	; 5
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		back_s=0;
    2816:	10 92 7b 03 	sts	0x037B, r1
    281a:	10 92 7a 03 	sts	0x037A, r1
		adc_sample();
    281e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <route+0x252>
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
		last_choice=3;
    2824:	03 e0       	ldi	r16, 0x03	; 3
    2826:	10 e0       	ldi	r17, 0x00	; 0
		forward_mm(5);				//Move forward 5 mm
		back_s=0;
		adc_sample();
	}

	while(Center_white_line>=BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    2828:	80 91 47 03 	lds	r24, 0x0347
    282c:	80 34       	cpi	r24, 0x40	; 64
    282e:	10 f1       	brcs	.+68     	; 0x2874 <route+0x29e>
    2830:	80 91 46 03 	lds	r24, 0x0346
    2834:	80 34       	cpi	r24, 0x40	; 64
    2836:	f0 f4       	brcc	.+60     	; 0x2874 <route+0x29e>
    2838:	80 91 48 03 	lds	r24, 0x0348
    283c:	80 34       	cpi	r24, 0x40	; 64
    283e:	d0 f0       	brcs	.+52     	; 0x2874 <route+0x29e>
    2840:	80 91 5c 03 	lds	r24, 0x035C
    2844:	88 23       	and	r24, r24
    2846:	c9 f2       	breq	.-78     	; 0x27fa <route+0x224>
    2848:	15 c0       	rjmp	.+42     	; 0x2874 <route+0x29e>
		adc_sample();
	}

	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    284a:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		last_choice=4;
    284e:	10 93 59 03 	sts	0x0359, r17
    2852:	00 93 58 03 	sts	0x0358, r16
		right_degrees(5);
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
		back_s=0;
    285e:	10 92 7b 03 	sts	0x037B, r1
    2862:	10 92 7a 03 	sts	0x037A, r1
		forward_mm(2);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		adc_sample();
    286e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <route+0x2a2>
	}

	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
		last_choice=4;
    2874:	04 e0       	ldi	r16, 0x04	; 4
    2876:	10 e0       	ldi	r17, 0x00	; 0
		forward_mm(5);				//Move forward 5 mm
		back_s=0;
		adc_sample();
	}

	while(Center_white_line<BLACK_LINE && (Left_white_line<BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (obstflag==0))
    2878:	80 91 47 03 	lds	r24, 0x0347
    287c:	80 34       	cpi	r24, 0x40	; 64
    287e:	10 f5       	brcc	.+68     	; 0x28c4 <route+0x2ee>
    2880:	80 91 46 03 	lds	r24, 0x0346
    2884:	80 34       	cpi	r24, 0x40	; 64
    2886:	f0 f4       	brcc	.+60     	; 0x28c4 <route+0x2ee>
    2888:	80 91 48 03 	lds	r24, 0x0348
    288c:	80 34       	cpi	r24, 0x40	; 64
    288e:	d0 f0       	brcs	.+52     	; 0x28c4 <route+0x2ee>
    2890:	80 91 5c 03 	lds	r24, 0x035C
    2894:	88 23       	and	r24, r24
    2896:	c9 f2       	breq	.-78     	; 0x284a <route+0x274>
    2898:	15 c0       	rjmp	.+42     	; 0x28c4 <route+0x2ee>

	}

	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
    289a:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		last_choice=5;
    289e:	10 93 59 03 	sts	0x0359, r17
    28a2:	00 93 58 03 	sts	0x0358, r16
		left_degrees(5);
    28a6:	85 e0       	ldi	r24, 0x05	; 5
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
		back_s=0;
    28ae:	10 92 7b 03 	sts	0x037B, r1
    28b2:	10 92 7a 03 	sts	0x037A, r1
		forward_mm(2);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		adc_sample();
    28be:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <route+0x2f2>
	}

	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
	{
		checkobst();
		last_choice=5;
    28c4:	05 e0       	ldi	r16, 0x05	; 5
    28c6:	10 e0       	ldi	r17, 0x00	; 0
		forward_mm(2);
		adc_sample();

	}

	while(Center_white_line<BLACK_LINE && (Left_white_line>=BLACK_LINE)  && (Right_white_line<=BLACK_LINE) && (obstflag==0))
    28c8:	80 91 47 03 	lds	r24, 0x0347
    28cc:	90 91 46 03 	lds	r25, 0x0346
    28d0:	80 34       	cpi	r24, 0x40	; 64
    28d2:	68 f4       	brcc	.+26     	; 0x28ee <route+0x318>
    28d4:	90 34       	cpi	r25, 0x40	; 64
    28d6:	08 f4       	brcc	.+2      	; 0x28da <route+0x304>
    28d8:	d1 c0       	rjmp	.+418    	; 0x2a7c <route+0x4a6>
    28da:	80 91 48 03 	lds	r24, 0x0348
    28de:	81 34       	cpi	r24, 0x41	; 65
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <route+0x30e>
    28e2:	cc c0       	rjmp	.+408    	; 0x2a7c <route+0x4a6>
    28e4:	80 91 5c 03 	lds	r24, 0x035C
    28e8:	88 23       	and	r24, r24
    28ea:	b9 f2       	breq	.-82     	; 0x289a <route+0x2c4>
    28ec:	c7 c0       	rjmp	.+398    	; 0x2a7c <route+0x4a6>
		forward_mm(2);
		adc_sample();

	}

	if((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE) && (flag==0) && (last_choice!=6) && (last_choice!=9) && (obstflag==0) )
    28ee:	90 34       	cpi	r25, 0x40	; 64
    28f0:	08 f4       	brcc	.+2      	; 0x28f4 <route+0x31e>
    28f2:	c4 c0       	rjmp	.+392    	; 0x2a7c <route+0x4a6>
    28f4:	80 91 48 03 	lds	r24, 0x0348
    28f8:	80 34       	cpi	r24, 0x40	; 64
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <route+0x328>
    28fc:	bf c0       	rjmp	.+382    	; 0x2a7c <route+0x4a6>
    28fe:	80 91 49 03 	lds	r24, 0x0349
    2902:	88 23       	and	r24, r24
    2904:	09 f0       	breq	.+2      	; 0x2908 <route+0x332>
    2906:	ba c0       	rjmp	.+372    	; 0x2a7c <route+0x4a6>
    2908:	80 91 58 03 	lds	r24, 0x0358
    290c:	90 91 59 03 	lds	r25, 0x0359
    2910:	86 30       	cpi	r24, 0x06	; 6
    2912:	91 05       	cpc	r25, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <route+0x342>
    2916:	b2 c0       	rjmp	.+356    	; 0x2a7c <route+0x4a6>
    2918:	09 97       	sbiw	r24, 0x09	; 9
    291a:	09 f4       	brne	.+2      	; 0x291e <route+0x348>
    291c:	af c0       	rjmp	.+350    	; 0x2a7c <route+0x4a6>
    291e:	80 91 5c 03 	lds	r24, 0x035C
    2922:	88 23       	and	r24, r24
    2924:	09 f0       	breq	.+2      	; 0x2928 <route+0x352>
    2926:	aa c0       	rjmp	.+340    	; 0x2a7c <route+0x4a6>
	{
		last_choice=6;
    2928:	86 e0       	ldi	r24, 0x06	; 6
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	90 93 59 03 	sts	0x0359, r25
    2930:	80 93 58 03 	sts	0x0358, r24
		flag=1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 93 49 03 	sts	0x0349, r24
		back_s=0;
    293a:	10 92 7b 03 	sts	0x037B, r1
    293e:	10 92 7a 03 	sts	0x037A, r1
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2942:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2944:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    2946:	82 b9       	out	0x02, r24	; 2
	{
		last_choice=6;
		flag=1;
		back_s=0;
		stop();
		if(flagturn==0)									// Still matching present 'x' coordinate with destination 'x' coordinate
    2948:	80 91 82 03 	lds	r24, 0x0382
    294c:	90 91 83 03 	lds	r25, 0x0383
    2950:	89 2b       	or	r24, r25
    2952:	49 f4       	brne	.+18     	; 0x2966 <route+0x390>
		{
			currentcountx = currentcountx+1;			// Increment present 'x' coordinate
    2954:	80 91 76 03 	lds	r24, 0x0376
    2958:	90 91 77 03 	lds	r25, 0x0377
    295c:	01 96       	adiw	r24, 0x01	; 1
    295e:	90 93 77 03 	sts	0x0377, r25
    2962:	80 93 76 03 	sts	0x0376, r24
		}
		if(flagturn==1)									// 'x' coordinate has been matched
    2966:	80 91 82 03 	lds	r24, 0x0382
    296a:	90 91 83 03 	lds	r25, 0x0383
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	99 f4       	brne	.+38     	; 0x2998 <route+0x3c2>
		{
			if(take_left==1)							// Taken left turn after matching 'x' coordinate
    2972:	80 91 5d 03 	lds	r24, 0x035D
    2976:	90 91 5e 03 	lds	r25, 0x035E
    297a:	20 91 78 03 	lds	r18, 0x0378
    297e:	30 91 79 03 	lds	r19, 0x0379
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	19 f4       	brne	.+6      	; 0x298c <route+0x3b6>
			{
				currentcounty=currentcounty+1;			
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <route+0x3ba>
			}
			else 										// taken right after matchjing 'x' coordinate
			{
				currentcounty=currentcounty-1;			// Decrement 
    298c:	21 50       	subi	r18, 0x01	; 1
    298e:	30 40       	sbci	r19, 0x00	; 0
    2990:	30 93 79 03 	sts	0x0379, r19
    2994:	20 93 78 03 	sts	0x0378, r18
			}
		}

		forward_mm(5);
    2998:	85 e0       	ldi	r24, 0x05	; 5
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		if((currentcountx == des_countx) && x_reached==0 && (obstflag==0)) 		// 'x' coodinates matched
    29a0:	20 91 76 03 	lds	r18, 0x0376
    29a4:	30 91 77 03 	lds	r19, 0x0377
    29a8:	80 91 0a 02 	lds	r24, 0x020A
    29ac:	90 91 0b 02 	lds	r25, 0x020B
    29b0:	28 17       	cp	r18, r24
    29b2:	39 07       	cpc	r19, r25
    29b4:	d1 f5       	brne	.+116    	; 0x2a2a <route+0x454>
    29b6:	80 91 7c 03 	lds	r24, 0x037C
    29ba:	90 91 7d 03 	lds	r25, 0x037D
    29be:	89 2b       	or	r24, r25
    29c0:	a1 f5       	brne	.+104    	; 0x2a2a <route+0x454>
    29c2:	80 91 5c 03 	lds	r24, 0x035C
    29c6:	88 23       	and	r24, r24
    29c8:	81 f5       	brne	.+96     	; 0x2a2a <route+0x454>
		{
			//_delay_ms(500);
			flagturn=1;															// Take turn
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	90 93 83 03 	sts	0x0383, r25
    29d2:	80 93 82 03 	sts	0x0382, r24
			forward_mm(70); 													//Moves robot forward 100mm					
    29d6:	86 e4       	ldi	r24, 0x46	; 70
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
			if(take_left==1)													// take turn based in destination table
    29de:	80 91 5d 03 	lds	r24, 0x035D
    29e2:	90 91 5e 03 	lds	r25, 0x035E
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	29 f4       	brne	.+10     	; 0x29f4 <route+0x41e>
			{
				left_degrees(90);											
    29ea:	8a e5       	ldi	r24, 0x5A	; 90
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <route+0x426>
			}
			else
			{
				right_degrees(90);
    29f4:	8a e5       	ldi	r24, 0x5A	; 90
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
    29fc:	88 e8       	ldi	r24, 0x88	; 136
    29fe:	93 e1       	ldi	r25, 0x13	; 19
    2a00:	29 e1       	ldi	r18, 0x19	; 25
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	f9 01       	movw	r30, r18
    2a06:	31 97       	sbiw	r30, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <route+0x430>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	d9 f7       	brne	.-10     	; 0x2a04 <route+0x42e>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2a0e:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2a10:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    2a12:	86 60       	ori	r24, 0x06	; 6
	PORTA = PortARestore;    // executing the command
    2a14:	82 b9       	out	0x02, r24	; 2
			{
				right_degrees(90);
			}
			_delay_ms(500);
			forward();
			x_reached=1;														// 'x' matched
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	90 93 7d 03 	sts	0x037D, r25
    2a1e:	80 93 7c 03 	sts	0x037C, r24
			forward_mm(25);
    2a22:	89 e1       	ldi	r24, 0x19	; 25
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		}
		if(take_left==1)														// Take decision based on destination coordinates
    2a2a:	80 91 5d 03 	lds	r24, 0x035D
    2a2e:	90 91 5e 03 	lds	r25, 0x035E
    2a32:	20 91 78 03 	lds	r18, 0x0378
    2a36:	30 91 79 03 	lds	r19, 0x0379
    2a3a:	40 91 0c 02 	lds	r20, 0x020C
    2a3e:	50 91 0d 02 	lds	r21, 0x020D
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	69 f4       	brne	.+26     	; 0x2a60 <route+0x48a>
		{
			if((currentcounty == des_county))
    2a46:	24 17       	cp	r18, r20
    2a48:	35 07       	cpc	r19, r21
    2a4a:	c1 f4       	brne	.+48     	; 0x2a7c <route+0x4a6>
    2a4c:	88 e8       	ldi	r24, 0x88	; 136
    2a4e:	93 e1       	ldi	r25, 0x13	; 19
    2a50:	29 e1       	ldi	r18, 0x19	; 25
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	f9 01       	movw	r30, r18
    2a56:	31 97       	sbiw	r30, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <route+0x480>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	d9 f7       	brne	.-10     	; 0x2a54 <route+0x47e>
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <route+0x4a6>
				_delay_ms(500);
			}
		}
		else
		{
			if((currentcounty == (des_county+1)))
    2a60:	4f 5f       	subi	r20, 0xFF	; 255
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	24 17       	cp	r18, r20
    2a66:	35 07       	cpc	r19, r21
    2a68:	49 f4       	brne	.+18     	; 0x2a7c <route+0x4a6>
    2a6a:	88 e8       	ldi	r24, 0x88	; 136
    2a6c:	93 e1       	ldi	r25, 0x13	; 19
    2a6e:	29 e1       	ldi	r18, 0x19	; 25
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	f9 01       	movw	r30, r18
    2a74:	31 97       	sbiw	r30, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <route+0x49e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	d9 f7       	brne	.-10     	; 0x2a72 <route+0x49c>
			}
		}
	}
	// Both 'x' and 'y' coordinates matched
	// Moving towards table
	if(((currentcountx == des_countx) && (currentcounty == des_county) && (take_left==1) && (obstflag==0)) || ((currentcountx == des_countx) && (currentcounty == (des_county+1)) && (take_left==0) && (obstflag==0)))
    2a7c:	20 91 76 03 	lds	r18, 0x0376
    2a80:	30 91 77 03 	lds	r19, 0x0377
    2a84:	80 91 0a 02 	lds	r24, 0x020A
    2a88:	90 91 0b 02 	lds	r25, 0x020B
    2a8c:	28 17       	cp	r18, r24
    2a8e:	39 07       	cpc	r19, r25
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <route+0x4be>
    2a92:	70 c0       	rjmp	.+224    	; 0x2b74 <route+0x59e>
    2a94:	40 91 78 03 	lds	r20, 0x0378
    2a98:	50 91 79 03 	lds	r21, 0x0379
    2a9c:	20 91 0c 02 	lds	r18, 0x020C
    2aa0:	30 91 0d 02 	lds	r19, 0x020D
    2aa4:	42 17       	cp	r20, r18
    2aa6:	53 07       	cpc	r21, r19
    2aa8:	31 f4       	brne	.+12     	; 0x2ab6 <route+0x4e0>
    2aaa:	80 91 5d 03 	lds	r24, 0x035D
    2aae:	90 91 5e 03 	lds	r25, 0x035E
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	69 f0       	breq	.+26     	; 0x2ad0 <route+0x4fa>
    2ab6:	2f 5f       	subi	r18, 0xFF	; 255
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	42 17       	cp	r20, r18
    2abc:	53 07       	cpc	r21, r19
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <route+0x4ec>
    2ac0:	59 c0       	rjmp	.+178    	; 0x2b74 <route+0x59e>
    2ac2:	80 91 5d 03 	lds	r24, 0x035D
    2ac6:	90 91 5e 03 	lds	r25, 0x035E
    2aca:	89 2b       	or	r24, r25
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <route+0x4fa>
    2ace:	52 c0       	rjmp	.+164    	; 0x2b74 <route+0x59e>
    2ad0:	80 91 5c 03 	lds	r24, 0x035C
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <route+0x504>
    2ad8:	4d c0       	rjmp	.+154    	; 0x2b74 <route+0x59e>
	{
		last_choice=7;
    2ada:	87 e0       	ldi	r24, 0x07	; 7
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	90 93 59 03 	sts	0x0359, r25
    2ae2:	80 93 58 03 	sts	0x0358, r24
		if(take_left==1)
    2ae6:	80 91 5d 03 	lds	r24, 0x035D
    2aea:	90 91 5e 03 	lds	r25, 0x035E
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	19 f4       	brne	.+6      	; 0x2af8 <route+0x522>
		{
			forward_mm_totable(270);								
    2af2:	8e e0       	ldi	r24, 0x0E	; 14
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <route+0x526>
		}
		else
		{
			forward_mm_totable(200);
    2af8:	88 ec       	ldi	r24, 0xC8	; 200
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 19 12 	call	0x2432	; 0x2432 <forward_mm_totable>
		}
		if(take_left==1)
    2b00:	80 91 5d 03 	lds	r24, 0x035D
    2b04:	90 91 5e 03 	lds	r25, 0x035E
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	59 f4       	brne	.+22     	; 0x2b22 <route+0x54c>
		{
			left_degrees(90);
    2b0c:	8a e5       	ldi	r24, 0x5A	; 90
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
    2b14:	20 91 02 02 	lds	r18, 0x0202
    2b18:	30 91 03 02 	lds	r19, 0x0203
    2b1c:	48 e9       	ldi	r20, 0x98	; 152
    2b1e:	5a e3       	ldi	r21, 0x3A	; 58
    2b20:	0a c0       	rjmp	.+20     	; 0x2b36 <route+0x560>
		}
		else right_degrees(90);
    2b22:	8a e5       	ldi	r24, 0x5A	; 90
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
    2b2a:	f4 cf       	rjmp	.-24     	; 0x2b14 <route+0x53e>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <route+0x558>
    2b32:	21 50       	subi	r18, 0x01	; 1
    2b34:	30 40       	sbci	r19, 0x00	; 0


		while(count>0)
    2b36:	21 15       	cp	r18, r1
    2b38:	31 05       	cpc	r19, r1
    2b3a:	c1 f7       	brne	.-16     	; 0x2b2c <route+0x556>
		{
			_delay_ms(60);
			count--;
		}
		config_done=0;
    2b3c:	10 92 57 03 	sts	0x0357, r1
    2b40:	10 92 56 03 	sts	0x0356, r1
		flag_reached=1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	90 93 6b 03 	sts	0x036B, r25
    2b4c:	80 93 6a 03 	sts	0x036A, r24
		flagturn=0;
    2b50:	10 92 83 03 	sts	0x0383, r1
    2b54:	10 92 82 03 	sts	0x0382, r1
		x_reached=0;
    2b58:	10 92 7d 03 	sts	0x037D, r1
    2b5c:	10 92 7c 03 	sts	0x037C, r1
		back_s=0;
    2b60:	10 92 7b 03 	sts	0x037B, r1
    2b64:	10 92 7a 03 	sts	0x037A, r1
		count=100;
    2b68:	84 e6       	ldi	r24, 0x64	; 100
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	90 93 03 02 	sts	0x0203, r25
    2b70:	80 93 02 02 	sts	0x0202, r24
	}
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
    2b74:	80 91 47 03 	lds	r24, 0x0347
    2b78:	80 34       	cpi	r24, 0x40	; 64
    2b7a:	e0 f4       	brcc	.+56     	; 0x2bb4 <route+0x5de>
    2b7c:	80 91 46 03 	lds	r24, 0x0346
    2b80:	80 34       	cpi	r24, 0x40	; 64
    2b82:	c0 f4       	brcc	.+48     	; 0x2bb4 <route+0x5de>
    2b84:	80 91 48 03 	lds	r24, 0x0348
    2b88:	80 34       	cpi	r24, 0x40	; 64
    2b8a:	a0 f4       	brcc	.+40     	; 0x2bb4 <route+0x5de>
    2b8c:	80 91 5c 03 	lds	r24, 0x035C
    2b90:	88 23       	and	r24, r24
    2b92:	81 f4       	brne	.+32     	; 0x2bb4 <route+0x5de>
	{
		adjust_path();					// Adjust path if bot moves of the track
    2b94:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <adjust_path>
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <route+0x5de>
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0) )
	{
		//forward_mm(5);
		last_choice=9;
    2b9a:	10 93 59 03 	sts	0x0359, r17
    2b9e:	00 93 58 03 	sts	0x0358, r16
		checkobst();
    2ba2:	0e 94 94 11 	call	0x2328	; 0x2328 <checkobst>
		forward_mm(2);
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 58 05 	call	0xab0	; 0xab0 <forward_mm>
		adc_sample();
    2bae:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <adc_sample>
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <route+0x5e2>
		adjust_path();					// Adjust path if bot moves of the track
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0) )
	{
		//forward_mm(5);
		last_choice=9;
    2bb4:	09 e0       	ldi	r16, 0x09	; 9
    2bb6:	10 e0       	ldi	r17, 0x00	; 0
	}
	if(Center_white_line<BLACK_LINE && Left_white_line<BLACK_LINE && Right_white_line<BLACK_LINE && (obstflag==0))
	{
		adjust_path();					// Adjust path if bot moves of the track
	}
	while((Center_white_line>=BLACK_LINE) && (Left_white_line>=BLACK_LINE)  && (Right_white_line>=BLACK_LINE)  && (last_choice==6 || last_choice==9) && (obstflag==0) )
    2bb8:	80 91 47 03 	lds	r24, 0x0347
    2bbc:	80 34       	cpi	r24, 0x40	; 64
    2bbe:	a8 f0       	brcs	.+42     	; 0x2bea <route+0x614>
    2bc0:	80 91 46 03 	lds	r24, 0x0346
    2bc4:	80 34       	cpi	r24, 0x40	; 64
    2bc6:	88 f0       	brcs	.+34     	; 0x2bea <route+0x614>
    2bc8:	80 91 48 03 	lds	r24, 0x0348
    2bcc:	80 34       	cpi	r24, 0x40	; 64
    2bce:	68 f0       	brcs	.+26     	; 0x2bea <route+0x614>
    2bd0:	80 91 58 03 	lds	r24, 0x0358
    2bd4:	90 91 59 03 	lds	r25, 0x0359
    2bd8:	86 30       	cpi	r24, 0x06	; 6
    2bda:	91 05       	cpc	r25, r1
    2bdc:	11 f0       	breq	.+4      	; 0x2be2 <route+0x60c>
    2bde:	09 97       	sbiw	r24, 0x09	; 9
    2be0:	21 f4       	brne	.+8      	; 0x2bea <route+0x614>
    2be2:	80 91 5c 03 	lds	r24, 0x035C
    2be6:	88 23       	and	r24, r24
    2be8:	c1 f2       	breq	.-80     	; 0x2b9a <route+0x5c4>
		forward_mm(2);
		adc_sample();
	}
	//route(des_countx,des_county,0,0);
	return (1);
}
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	08 95       	ret

00002c06 <main>:
//				Again comes back and initializes for the next order
/**********************************************************************************/
//Main Function

int main(void)
{
    2c06:	9f 92       	push	r9
    2c08:	af 92       	push	r10
    2c0a:	bf 92       	push	r11
    2c0c:	cf 92       	push	r12
    2c0e:	df 92       	push	r13
    2c10:	ef 92       	push	r14
    2c12:	ff 92       	push	r15
    2c14:	0f 93       	push	r16
    2c16:	1f 93       	push	r17
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
	obstflag=0;
    2c1c:	10 92 5c 03 	sts	0x035C, r1
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
	UDR0 = '\n';//send a new line just to be sure
    2c20:	fa e0       	ldi	r31, 0x0A	; 10
    2c22:	9f 2e       	mov	r9, r31
		{
			take_left=0;
		}	
		else take_left=1;
		uart_sendstr(coordreply);
		freebot=1;
    2c24:	e1 e0       	ldi	r30, 0x01	; 1
    2c26:	ce 2e       	mov	r12, r30
    2c28:	d1 2c       	mov	r13, r1
    2c2a:	09 e1       	ldi	r16, 0x19	; 25
    2c2c:	10 e0       	ldi	r17, 0x00	; 0
			{
				right_degrees(90);
				_delay_ms(100);
				back_mm(50);
				des_countx = 0; 								//desired table no from Zigbee
				des_county = 2;
    2c2e:	78 ea       	ldi	r23, 0xA8	; 168
    2c30:	a7 2e       	mov	r10, r23
    2c32:	71 e6       	ldi	r23, 0x61	; 97
    2c34:	b7 2e       	mov	r11, r23
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	e6 2e       	mov	r14, r22
    2c3a:	f1 2c       	mov	r15, r1
int main(void)
{
	obstflag=0;
	while(1)
	{
		init_devices();								// Initialization
    2c3c:	0e 94 95 05 	call	0xb2a	; 0xb2a <init_devices>
		lcd_set_4bit();		
    2c40:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
		lcd_init();
    2c44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
		flag_startreached=0;						// clearing the flags
    2c48:	10 92 6d 03 	sts	0x036D, r1
    2c4c:	10 92 6c 03 	sts	0x036C, r1
		take_left=0;				
		back_reroute=0;
    2c50:	10 92 64 03 	sts	0x0364, r1
    2c54:	10 92 63 03 	sts	0x0363, r1
		while(config_done!=1);						// received current and destination points
    2c58:	40 91 56 03 	lds	r20, 0x0356
    2c5c:	50 91 57 03 	lds	r21, 0x0357
    2c60:	41 30       	cpi	r20, 0x01	; 1
    2c62:	51 05       	cpc	r21, r1
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <main+0x62>
    2c66:	09 c1       	rjmp	.+530    	; 0x2e7a <main+0x274>

		des_countx = x_dest; 						//desired table no from Zigbee
    2c68:	80 91 a1 03 	lds	r24, 0x03A1
    2c6c:	90 91 a2 03 	lds	r25, 0x03A2
    2c70:	90 93 0b 02 	sts	0x020B, r25
    2c74:	80 93 0a 02 	sts	0x020A, r24
		des_county = y_dest;				
    2c78:	20 91 90 03 	lds	r18, 0x0390
    2c7c:	30 91 91 03 	lds	r19, 0x0391
    2c80:	30 93 0d 02 	sts	0x020D, r19
    2c84:	20 93 0c 02 	sts	0x020C, r18
		currentcountx=x_coor;						//current position of the bot
    2c88:	80 91 9b 03 	lds	r24, 0x039B
    2c8c:	90 91 9c 03 	lds	r25, 0x039C
    2c90:	90 93 77 03 	sts	0x0377, r25
    2c94:	80 93 76 03 	sts	0x0376, r24
		currentcounty=y_coor;
    2c98:	80 91 8a 03 	lds	r24, 0x038A
    2c9c:	90 91 8b 03 	lds	r25, 0x038B
    2ca0:	90 93 79 03 	sts	0x0379, r25
    2ca4:	80 93 78 03 	sts	0x0378, r24
		if(currentcounty>y_dest)					// take decision to turn left or right
    2ca8:	28 17       	cp	r18, r24
    2caa:	39 07       	cpc	r19, r25
    2cac:	28 f4       	brcc	.+10     	; 0x2cb8 <main+0xb2>
		{
			take_left=0;
    2cae:	10 92 5e 03 	sts	0x035E, r1
    2cb2:	10 92 5d 03 	sts	0x035D, r1
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <main+0xba>
		}	
		else take_left=1;
    2cb8:	50 93 5e 03 	sts	0x035E, r21
    2cbc:	40 93 5d 03 	sts	0x035D, r20
    2cc0:	e0 e2       	ldi	r30, 0x20	; 32
    2cc2:	f2 e0       	ldi	r31, 0x02	; 2
    2cc4:	07 c0       	rjmp	.+14     	; 0x2cd4 <main+0xce>
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    2cc6:	80 91 c0 00 	lds	r24, 0x00C0
    2cca:	85 ff       	sbrs	r24, 5
    2ccc:	fc cf       	rjmp	.-8      	; 0x2cc6 <main+0xc0>
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
    2cce:	90 93 c6 00 	sts	0x00C6, r25
		data += 1;//go to new bit in string
    2cd2:	31 96       	adiw	r30, 0x01	; 1
{
	/*
	Use this to send a string, it will split it up into individual parts
	send those parts, and then send the new line code
	 */
	while (*data) {
    2cd4:	90 81       	ld	r25, Z
    2cd6:	99 23       	and	r25, r25
    2cd8:	b1 f7       	brne	.-20     	; 0x2cc6 <main+0xc0>
		while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
		UDR0 = *data; //goes through and splits the string into individual bits, sends them
		data += 1;//go to new bit in string
	}
	while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    2cda:	80 91 c0 00 	lds	r24, 0x00C0
    2cde:	85 ff       	sbrs	r24, 5
    2ce0:	fc cf       	rjmp	.-8      	; 0x2cda <main+0xd4>
	UDR0 = '\n';//send a new line just to be sure
    2ce2:	90 92 c6 00 	sts	0x00C6, r9
		else take_left=1;
		uart_sendstr(coordreply);
		freebot=1;
		while(1)
		{
			freebot=1;								// set bot in use variable
    2ce6:	d0 92 81 03 	sts	0x0381, r13
    2cea:	c0 92 80 03 	sts	0x0380, r12
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2cee:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    2cf0:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    2cf2:	88 b9       	out	0x08, r24	; 8
		freebot=1;
		while(1)
		{
			freebot=1;								// set bot in use variable
			buzzer_off();
			route();								// Route function
    2cf4:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <route>
			if (flag_reached ==1)					// reached table
    2cf8:	80 91 6a 03 	lds	r24, 0x036A
    2cfc:	90 91 6b 03 	lds	r25, 0x036B
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	89 f7       	brne	.-30     	; 0x2ce6 <main+0xe0>
		if (flag_reached ==1)
		{	
			int count=0;
			while(1)
			{
				Left_IR_sensor1 =ADC_Conversion(4);		// Checking the weight sensor
    2d04:	84 e0       	ldi	r24, 0x04	; 4
    2d06:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
    2d0a:	80 93 65 03 	sts	0x0365, r24
    2d0e:	c0 e0       	ldi	r28, 0x00	; 0
    2d10:	d0 e0       	ldi	r29, 0x00	; 0
    2d12:	16 c0       	rjmp	.+44     	; 0x2d40 <main+0x13a>
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F;     // removing upper nibbel for the protection
	PortARestore = PORTA;    // reading the PORTA original status
    2d14:	82 b1       	in	r24, 0x02	; 2
	PortARestore &= 0xF0;    // making lower direction nibbel to 0
    2d16:	80 7f       	andi	r24, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore;    // executing the command
    2d18:	82 b9       	out	0x02, r24	; 2
}

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2d1a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    2d1c:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    2d1e:	88 b9       	out	0x08, r24	; 8
    2d20:	88 e8       	ldi	r24, 0x88	; 136
    2d22:	93 e1       	ldi	r25, 0x13	; 19
    2d24:	f8 01       	movw	r30, r16
    2d26:	31 97       	sbiw	r30, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <main+0x120>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2c:	d9 f7       	brne	.-10     	; 0x2d24 <main+0x11e>
				{
					stop();
					//print_sensor(2,6,4);
					buzzer_on();
					_delay_ms(500);
					Left_IR_sensor1 =ADC_Conversion(4);
    2d2e:	84 e0       	ldi	r24, 0x04	; 4
    2d30:	0e 94 60 04 	call	0x8c0	; 0x8c0 <ADC_Conversion>
    2d34:	80 93 65 03 	sts	0x0365, r24
					count=count+1;
    2d38:	21 96       	adiw	r28, 0x01	; 1
					if(count>10)
    2d3a:	cb 30       	cpi	r28, 0x0B	; 11
    2d3c:	d1 05       	cpc	r29, r1
    2d3e:	51 f0       	breq	.+20     	; 0x2d54 <main+0x14e>
			int count=0;
			while(1)
			{
				Left_IR_sensor1 =ADC_Conversion(4);		// Checking the weight sensor
				//print_sensor(2,6,4);
				while(Left_IR_sensor1 < thresh_weightsensor)
    2d40:	80 91 65 03 	lds	r24, 0x0365
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	20 91 08 02 	lds	r18, 0x0208
    2d4a:	30 91 09 02 	lds	r19, 0x0209
    2d4e:	82 17       	cp	r24, r18
    2d50:	93 07       	cpc	r25, r19
    2d52:	00 f3       	brcs	.-64     	; 0x2d14 <main+0x10e>
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2d54:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    2d56:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    2d58:	88 b9       	out	0x08, r24	; 8
    2d5a:	80 e1       	ldi	r24, 0x10	; 16
    2d5c:	97 e2       	ldi	r25, 0x27	; 39
    2d5e:	f8 01       	movw	r30, r16
    2d60:	31 97       	sbiw	r30, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <main+0x15a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	d9 f7       	brne	.-10     	; 0x2d5e <main+0x158>
    2d68:	80 e1       	ldi	r24, 0x10	; 16
    2d6a:	97 e2       	ldi	r25, 0x27	; 39
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	31 97       	sbiw	r30, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <main+0x168>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	d9 f7       	brne	.-10     	; 0x2d6c <main+0x166>
			//buzzer_off();
			_delay_ms(1000);
			//buzzer_on();
			//_delay_ms(1000);
			//buzzer_off();
			lcd_print(2,8,y_dest,1);
    2d76:	40 91 90 03 	lds	r20, 0x0390
    2d7a:	50 91 91 03 	lds	r21, 0x0391
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	68 e0       	ldi	r22, 0x08	; 8
    2d82:	21 e0       	ldi	r18, 0x01	; 1
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			lcd_print(2,10,currentcounty,1);
    2d8a:	40 91 78 03 	lds	r20, 0x0378
    2d8e:	50 91 79 03 	lds	r21, 0x0379
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	6a e0       	ldi	r22, 0x0A	; 10
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_print>
			if(y_dest>=2)										// changing coordinates to counter coordinates
    2d9e:	80 91 90 03 	lds	r24, 0x0390
    2da2:	90 91 91 03 	lds	r25, 0x0391
    2da6:	02 97       	sbiw	r24, 0x02	; 2
    2da8:	10 f1       	brcs	.+68     	; 0x2dee <main+0x1e8>
			{
				left_degrees(90);
    2daa:	8a e5       	ldi	r24, 0x5A	; 90
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 66 05 	call	0xacc	; 0xacc <left_degrees>
				des_countx = 0; 								//desired table no from Zigbee
    2db2:	10 92 0b 02 	sts	0x020B, r1
    2db6:	10 92 0a 02 	sts	0x020A, r1
				des_county = 2;
    2dba:	f0 92 0d 02 	sts	0x020D, r15
    2dbe:	e0 92 0c 02 	sts	0x020C, r14
				currentcountx=x_dest;
    2dc2:	80 91 a1 03 	lds	r24, 0x03A1
    2dc6:	90 91 a2 03 	lds	r25, 0x03A2
    2dca:	90 93 77 03 	sts	0x0377, r25
    2dce:	80 93 76 03 	sts	0x0376, r24
				currentcounty=y_dest+1;
    2dd2:	80 91 90 03 	lds	r24, 0x0390
    2dd6:	90 91 91 03 	lds	r25, 0x0391
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	90 93 79 03 	sts	0x0379, r25
    2de0:	80 93 78 03 	sts	0x0378, r24
				dest_backward=1;
    2de4:	d0 92 5b 03 	sts	0x035B, r13
    2de8:	c0 92 5a 03 	sts	0x035A, r12
    2dec:	27 c0       	rjmp	.+78     	; 0x2e3c <main+0x236>
			}
			else
			{
				right_degrees(90);
    2dee:	8a e5       	ldi	r24, 0x5A	; 90
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 6d 05 	call	0xada	; 0xada <right_degrees>
    2df6:	c5 01       	movw	r24, r10
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <main+0x1f2>
				_delay_ms(100);
				back_mm(50);
    2dfc:	82 e3       	ldi	r24, 0x32	; 50
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 5f 05 	call	0xabe	; 0xabe <back_mm>
				des_countx = 0; 								//desired table no from Zigbee
    2e04:	10 92 0b 02 	sts	0x020B, r1
    2e08:	10 92 0a 02 	sts	0x020A, r1
				des_county = 2;
    2e0c:	f0 92 0d 02 	sts	0x020D, r15
    2e10:	e0 92 0c 02 	sts	0x020C, r14
				currentcountx=x_dest;
    2e14:	80 91 a1 03 	lds	r24, 0x03A1
    2e18:	90 91 a2 03 	lds	r25, 0x03A2
    2e1c:	90 93 77 03 	sts	0x0377, r25
    2e20:	80 93 76 03 	sts	0x0376, r24
				currentcounty=y_dest;
    2e24:	80 91 90 03 	lds	r24, 0x0390
    2e28:	90 91 91 03 	lds	r25, 0x0391
    2e2c:	90 93 79 03 	sts	0x0379, r25
    2e30:	80 93 78 03 	sts	0x0378, r24
				dest_backward=0;
    2e34:	10 92 5b 03 	sts	0x035B, r1
    2e38:	10 92 5a 03 	sts	0x035A, r1
			}
			flag_reached = 0;
    2e3c:	10 92 6b 03 	sts	0x036B, r1
    2e40:	10 92 6a 03 	sts	0x036A, r1
}

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    2e44:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    2e46:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    2e48:	88 b9       	out	0x08, r24	; 8
			}
			flag_reached = 0;
			while(1)
			{
				buzzer_off();
				backroute();
    2e4a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <backroute>
				if(flag_startreached==1)						// reached counter back
    2e4e:	80 91 6c 03 	lds	r24, 0x036C
    2e52:	90 91 6d 03 	lds	r25, 0x036D
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	a9 f7       	brne	.-22     	; 0x2e44 <main+0x23e>
    2e5a:	80 e1       	ldi	r24, 0x10	; 16
    2e5c:	97 e2       	ldi	r25, 0x27	; 39
    2e5e:	f8 01       	movw	r30, r16
    2e60:	31 97       	sbiw	r30, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <main+0x25a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e66:	d9 f7       	brne	.-10     	; 0x2e5e <main+0x258>
				{
					_delay_ms(1000);
					start=0;
    2e68:	10 92 4d 03 	sts	0x034D, r1
    2e6c:	10 92 4c 03 	sts	0x034C, r1
					freebot=0;
    2e70:	10 92 81 03 	sts	0x0381, r1
    2e74:	10 92 80 03 	sts	0x0380, r1
    2e78:	e1 ce       	rjmp	.-574    	; 0x2c3c <main+0x36>
    2e7a:	ff cf       	rjmp	.-2      	; 0x2e7a <main+0x274>

00002e7c <__fixunssfsi>:
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	7b 01       	movw	r14, r22
    2e86:	8c 01       	movw	r16, r24
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	5f e4       	ldi	r21, 0x4F	; 79
    2e90:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__gesf2>
    2e94:	88 23       	and	r24, r24
    2e96:	8c f0       	brlt	.+34     	; 0x2eba <__fixunssfsi+0x3e>
    2e98:	c8 01       	movw	r24, r16
    2e9a:	b7 01       	movw	r22, r14
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	5f e4       	ldi	r21, 0x4F	; 79
    2ea4:	0e 94 b6 18 	call	0x316c	; 0x316c <__subsf3>
    2ea8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__fixsfsi>
    2eac:	9b 01       	movw	r18, r22
    2eae:	ac 01       	movw	r20, r24
    2eb0:	20 50       	subi	r18, 0x00	; 0
    2eb2:	30 40       	sbci	r19, 0x00	; 0
    2eb4:	40 40       	sbci	r20, 0x00	; 0
    2eb6:	50 48       	sbci	r21, 0x80	; 128
    2eb8:	06 c0       	rjmp	.+12     	; 0x2ec6 <__fixunssfsi+0x4a>
    2eba:	c8 01       	movw	r24, r16
    2ebc:	b7 01       	movw	r22, r14
    2ebe:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__fixsfsi>
    2ec2:	9b 01       	movw	r18, r22
    2ec4:	ac 01       	movw	r20, r24
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	ca 01       	movw	r24, r20
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	ff 90       	pop	r15
    2ed0:	ef 90       	pop	r14
    2ed2:	08 95       	ret

00002ed4 <_fpadd_parts>:
    2ed4:	a0 e0       	ldi	r26, 0x00	; 0
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e0 e7       	ldi	r30, 0x70	; 112
    2eda:	f7 e1       	ldi	r31, 0x17	; 23
    2edc:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	2b 01       	movw	r4, r22
    2ee4:	fa 01       	movw	r30, r20
    2ee6:	9c 91       	ld	r25, X
    2ee8:	92 30       	cpi	r25, 0x02	; 2
    2eea:	08 f4       	brcc	.+2      	; 0x2eee <_fpadd_parts+0x1a>
    2eec:	39 c1       	rjmp	.+626    	; 0x3160 <_fpadd_parts+0x28c>
    2eee:	eb 01       	movw	r28, r22
    2ef0:	88 81       	ld	r24, Y
    2ef2:	82 30       	cpi	r24, 0x02	; 2
    2ef4:	08 f4       	brcc	.+2      	; 0x2ef8 <_fpadd_parts+0x24>
    2ef6:	33 c1       	rjmp	.+614    	; 0x315e <_fpadd_parts+0x28a>
    2ef8:	94 30       	cpi	r25, 0x04	; 4
    2efa:	69 f4       	brne	.+26     	; 0x2f16 <_fpadd_parts+0x42>
    2efc:	84 30       	cpi	r24, 0x04	; 4
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <_fpadd_parts+0x2e>
    2f00:	2f c1       	rjmp	.+606    	; 0x3160 <_fpadd_parts+0x28c>
    2f02:	11 96       	adiw	r26, 0x01	; 1
    2f04:	9c 91       	ld	r25, X
    2f06:	11 97       	sbiw	r26, 0x01	; 1
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	98 17       	cp	r25, r24
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <_fpadd_parts+0x3c>
    2f0e:	28 c1       	rjmp	.+592    	; 0x3160 <_fpadd_parts+0x28c>
    2f10:	a6 e3       	ldi	r26, 0x36	; 54
    2f12:	b2 e0       	ldi	r27, 0x02	; 2
    2f14:	25 c1       	rjmp	.+586    	; 0x3160 <_fpadd_parts+0x28c>
    2f16:	84 30       	cpi	r24, 0x04	; 4
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <_fpadd_parts+0x48>
    2f1a:	21 c1       	rjmp	.+578    	; 0x315e <_fpadd_parts+0x28a>
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	a9 f4       	brne	.+42     	; 0x2f4a <_fpadd_parts+0x76>
    2f20:	92 30       	cpi	r25, 0x02	; 2
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <_fpadd_parts+0x52>
    2f24:	1d c1       	rjmp	.+570    	; 0x3160 <_fpadd_parts+0x28c>
    2f26:	9a 01       	movw	r18, r20
    2f28:	ad 01       	movw	r20, r26
    2f2a:	88 e0       	ldi	r24, 0x08	; 8
    2f2c:	ea 01       	movw	r28, r20
    2f2e:	09 90       	ld	r0, Y+
    2f30:	ae 01       	movw	r20, r28
    2f32:	e9 01       	movw	r28, r18
    2f34:	09 92       	st	Y+, r0
    2f36:	9e 01       	movw	r18, r28
    2f38:	81 50       	subi	r24, 0x01	; 1
    2f3a:	c1 f7       	brne	.-16     	; 0x2f2c <_fpadd_parts+0x58>
    2f3c:	e2 01       	movw	r28, r4
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 91       	ld	r25, X
    2f44:	89 23       	and	r24, r25
    2f46:	81 83       	std	Z+1, r24	; 0x01
    2f48:	08 c1       	rjmp	.+528    	; 0x315a <_fpadd_parts+0x286>
    2f4a:	92 30       	cpi	r25, 0x02	; 2
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <_fpadd_parts+0x7c>
    2f4e:	07 c1       	rjmp	.+526    	; 0x315e <_fpadd_parts+0x28a>
    2f50:	12 96       	adiw	r26, 0x02	; 2
    2f52:	2d 90       	ld	r2, X+
    2f54:	3c 90       	ld	r3, X
    2f56:	13 97       	sbiw	r26, 0x03	; 3
    2f58:	eb 01       	movw	r28, r22
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5e:	14 96       	adiw	r26, 0x04	; 4
    2f60:	ad 90       	ld	r10, X+
    2f62:	bd 90       	ld	r11, X+
    2f64:	cd 90       	ld	r12, X+
    2f66:	dc 90       	ld	r13, X
    2f68:	17 97       	sbiw	r26, 0x07	; 7
    2f6a:	ec 80       	ldd	r14, Y+4	; 0x04
    2f6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f6e:	0e 81       	ldd	r16, Y+6	; 0x06
    2f70:	1f 81       	ldd	r17, Y+7	; 0x07
    2f72:	91 01       	movw	r18, r2
    2f74:	28 1b       	sub	r18, r24
    2f76:	39 0b       	sbc	r19, r25
    2f78:	b9 01       	movw	r22, r18
    2f7a:	37 ff       	sbrs	r19, 7
    2f7c:	04 c0       	rjmp	.+8      	; 0x2f86 <_fpadd_parts+0xb2>
    2f7e:	66 27       	eor	r22, r22
    2f80:	77 27       	eor	r23, r23
    2f82:	62 1b       	sub	r22, r18
    2f84:	73 0b       	sbc	r23, r19
    2f86:	60 32       	cpi	r22, 0x20	; 32
    2f88:	71 05       	cpc	r23, r1
    2f8a:	0c f0       	brlt	.+2      	; 0x2f8e <_fpadd_parts+0xba>
    2f8c:	61 c0       	rjmp	.+194    	; 0x3050 <_fpadd_parts+0x17c>
    2f8e:	12 16       	cp	r1, r18
    2f90:	13 06       	cpc	r1, r19
    2f92:	6c f5       	brge	.+90     	; 0x2fee <_fpadd_parts+0x11a>
    2f94:	37 01       	movw	r6, r14
    2f96:	48 01       	movw	r8, r16
    2f98:	06 2e       	mov	r0, r22
    2f9a:	04 c0       	rjmp	.+8      	; 0x2fa4 <_fpadd_parts+0xd0>
    2f9c:	96 94       	lsr	r9
    2f9e:	87 94       	ror	r8
    2fa0:	77 94       	ror	r7
    2fa2:	67 94       	ror	r6
    2fa4:	0a 94       	dec	r0
    2fa6:	d2 f7       	brpl	.-12     	; 0x2f9c <_fpadd_parts+0xc8>
    2fa8:	21 e0       	ldi	r18, 0x01	; 1
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	50 e0       	ldi	r21, 0x00	; 0
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <_fpadd_parts+0xe6>
    2fb2:	22 0f       	add	r18, r18
    2fb4:	33 1f       	adc	r19, r19
    2fb6:	44 1f       	adc	r20, r20
    2fb8:	55 1f       	adc	r21, r21
    2fba:	6a 95       	dec	r22
    2fbc:	d2 f7       	brpl	.-12     	; 0x2fb2 <_fpadd_parts+0xde>
    2fbe:	21 50       	subi	r18, 0x01	; 1
    2fc0:	30 40       	sbci	r19, 0x00	; 0
    2fc2:	40 40       	sbci	r20, 0x00	; 0
    2fc4:	50 40       	sbci	r21, 0x00	; 0
    2fc6:	2e 21       	and	r18, r14
    2fc8:	3f 21       	and	r19, r15
    2fca:	40 23       	and	r20, r16
    2fcc:	51 23       	and	r21, r17
    2fce:	21 15       	cp	r18, r1
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	41 05       	cpc	r20, r1
    2fd4:	51 05       	cpc	r21, r1
    2fd6:	21 f0       	breq	.+8      	; 0x2fe0 <_fpadd_parts+0x10c>
    2fd8:	21 e0       	ldi	r18, 0x01	; 1
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	79 01       	movw	r14, r18
    2fe2:	8a 01       	movw	r16, r20
    2fe4:	e6 28       	or	r14, r6
    2fe6:	f7 28       	or	r15, r7
    2fe8:	08 29       	or	r16, r8
    2fea:	19 29       	or	r17, r9
    2fec:	3c c0       	rjmp	.+120    	; 0x3066 <_fpadd_parts+0x192>
    2fee:	23 2b       	or	r18, r19
    2ff0:	d1 f1       	breq	.+116    	; 0x3066 <_fpadd_parts+0x192>
    2ff2:	26 0e       	add	r2, r22
    2ff4:	37 1e       	adc	r3, r23
    2ff6:	35 01       	movw	r6, r10
    2ff8:	46 01       	movw	r8, r12
    2ffa:	06 2e       	mov	r0, r22
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <_fpadd_parts+0x132>
    2ffe:	96 94       	lsr	r9
    3000:	87 94       	ror	r8
    3002:	77 94       	ror	r7
    3004:	67 94       	ror	r6
    3006:	0a 94       	dec	r0
    3008:	d2 f7       	brpl	.-12     	; 0x2ffe <_fpadd_parts+0x12a>
    300a:	21 e0       	ldi	r18, 0x01	; 1
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	04 c0       	rjmp	.+8      	; 0x301c <_fpadd_parts+0x148>
    3014:	22 0f       	add	r18, r18
    3016:	33 1f       	adc	r19, r19
    3018:	44 1f       	adc	r20, r20
    301a:	55 1f       	adc	r21, r21
    301c:	6a 95       	dec	r22
    301e:	d2 f7       	brpl	.-12     	; 0x3014 <_fpadd_parts+0x140>
    3020:	21 50       	subi	r18, 0x01	; 1
    3022:	30 40       	sbci	r19, 0x00	; 0
    3024:	40 40       	sbci	r20, 0x00	; 0
    3026:	50 40       	sbci	r21, 0x00	; 0
    3028:	2a 21       	and	r18, r10
    302a:	3b 21       	and	r19, r11
    302c:	4c 21       	and	r20, r12
    302e:	5d 21       	and	r21, r13
    3030:	21 15       	cp	r18, r1
    3032:	31 05       	cpc	r19, r1
    3034:	41 05       	cpc	r20, r1
    3036:	51 05       	cpc	r21, r1
    3038:	21 f0       	breq	.+8      	; 0x3042 <_fpadd_parts+0x16e>
    303a:	21 e0       	ldi	r18, 0x01	; 1
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	59 01       	movw	r10, r18
    3044:	6a 01       	movw	r12, r20
    3046:	a6 28       	or	r10, r6
    3048:	b7 28       	or	r11, r7
    304a:	c8 28       	or	r12, r8
    304c:	d9 28       	or	r13, r9
    304e:	0b c0       	rjmp	.+22     	; 0x3066 <_fpadd_parts+0x192>
    3050:	82 15       	cp	r24, r2
    3052:	93 05       	cpc	r25, r3
    3054:	2c f0       	brlt	.+10     	; 0x3060 <_fpadd_parts+0x18c>
    3056:	1c 01       	movw	r2, r24
    3058:	aa 24       	eor	r10, r10
    305a:	bb 24       	eor	r11, r11
    305c:	65 01       	movw	r12, r10
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <_fpadd_parts+0x192>
    3060:	ee 24       	eor	r14, r14
    3062:	ff 24       	eor	r15, r15
    3064:	87 01       	movw	r16, r14
    3066:	11 96       	adiw	r26, 0x01	; 1
    3068:	9c 91       	ld	r25, X
    306a:	d2 01       	movw	r26, r4
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	8c 91       	ld	r24, X
    3070:	98 17       	cp	r25, r24
    3072:	09 f4       	brne	.+2      	; 0x3076 <_fpadd_parts+0x1a2>
    3074:	45 c0       	rjmp	.+138    	; 0x3100 <_fpadd_parts+0x22c>
    3076:	99 23       	and	r25, r25
    3078:	39 f0       	breq	.+14     	; 0x3088 <_fpadd_parts+0x1b4>
    307a:	a8 01       	movw	r20, r16
    307c:	97 01       	movw	r18, r14
    307e:	2a 19       	sub	r18, r10
    3080:	3b 09       	sbc	r19, r11
    3082:	4c 09       	sbc	r20, r12
    3084:	5d 09       	sbc	r21, r13
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <_fpadd_parts+0x1c0>
    3088:	a6 01       	movw	r20, r12
    308a:	95 01       	movw	r18, r10
    308c:	2e 19       	sub	r18, r14
    308e:	3f 09       	sbc	r19, r15
    3090:	40 0b       	sbc	r20, r16
    3092:	51 0b       	sbc	r21, r17
    3094:	57 fd       	sbrc	r21, 7
    3096:	08 c0       	rjmp	.+16     	; 0x30a8 <_fpadd_parts+0x1d4>
    3098:	11 82       	std	Z+1, r1	; 0x01
    309a:	33 82       	std	Z+3, r3	; 0x03
    309c:	22 82       	std	Z+2, r2	; 0x02
    309e:	24 83       	std	Z+4, r18	; 0x04
    30a0:	35 83       	std	Z+5, r19	; 0x05
    30a2:	46 83       	std	Z+6, r20	; 0x06
    30a4:	57 83       	std	Z+7, r21	; 0x07
    30a6:	1d c0       	rjmp	.+58     	; 0x30e2 <_fpadd_parts+0x20e>
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	81 83       	std	Z+1, r24	; 0x01
    30ac:	33 82       	std	Z+3, r3	; 0x03
    30ae:	22 82       	std	Z+2, r2	; 0x02
    30b0:	88 27       	eor	r24, r24
    30b2:	99 27       	eor	r25, r25
    30b4:	dc 01       	movw	r26, r24
    30b6:	82 1b       	sub	r24, r18
    30b8:	93 0b       	sbc	r25, r19
    30ba:	a4 0b       	sbc	r26, r20
    30bc:	b5 0b       	sbc	r27, r21
    30be:	84 83       	std	Z+4, r24	; 0x04
    30c0:	95 83       	std	Z+5, r25	; 0x05
    30c2:	a6 83       	std	Z+6, r26	; 0x06
    30c4:	b7 83       	std	Z+7, r27	; 0x07
    30c6:	0d c0       	rjmp	.+26     	; 0x30e2 <_fpadd_parts+0x20e>
    30c8:	22 0f       	add	r18, r18
    30ca:	33 1f       	adc	r19, r19
    30cc:	44 1f       	adc	r20, r20
    30ce:	55 1f       	adc	r21, r21
    30d0:	24 83       	std	Z+4, r18	; 0x04
    30d2:	35 83       	std	Z+5, r19	; 0x05
    30d4:	46 83       	std	Z+6, r20	; 0x06
    30d6:	57 83       	std	Z+7, r21	; 0x07
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	93 83       	std	Z+3, r25	; 0x03
    30e0:	82 83       	std	Z+2, r24	; 0x02
    30e2:	24 81       	ldd	r18, Z+4	; 0x04
    30e4:	35 81       	ldd	r19, Z+5	; 0x05
    30e6:	46 81       	ldd	r20, Z+6	; 0x06
    30e8:	57 81       	ldd	r21, Z+7	; 0x07
    30ea:	da 01       	movw	r26, r20
    30ec:	c9 01       	movw	r24, r18
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	a1 09       	sbc	r26, r1
    30f2:	b1 09       	sbc	r27, r1
    30f4:	8f 5f       	subi	r24, 0xFF	; 255
    30f6:	9f 4f       	sbci	r25, 0xFF	; 255
    30f8:	af 4f       	sbci	r26, 0xFF	; 255
    30fa:	bf 43       	sbci	r27, 0x3F	; 63
    30fc:	28 f3       	brcs	.-54     	; 0x30c8 <_fpadd_parts+0x1f4>
    30fe:	0b c0       	rjmp	.+22     	; 0x3116 <_fpadd_parts+0x242>
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	33 82       	std	Z+3, r3	; 0x03
    3104:	22 82       	std	Z+2, r2	; 0x02
    3106:	ea 0c       	add	r14, r10
    3108:	fb 1c       	adc	r15, r11
    310a:	0c 1d       	adc	r16, r12
    310c:	1d 1d       	adc	r17, r13
    310e:	e4 82       	std	Z+4, r14	; 0x04
    3110:	f5 82       	std	Z+5, r15	; 0x05
    3112:	06 83       	std	Z+6, r16	; 0x06
    3114:	17 83       	std	Z+7, r17	; 0x07
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	80 83       	st	Z, r24
    311a:	24 81       	ldd	r18, Z+4	; 0x04
    311c:	35 81       	ldd	r19, Z+5	; 0x05
    311e:	46 81       	ldd	r20, Z+6	; 0x06
    3120:	57 81       	ldd	r21, Z+7	; 0x07
    3122:	57 ff       	sbrs	r21, 7
    3124:	1a c0       	rjmp	.+52     	; 0x315a <_fpadd_parts+0x286>
    3126:	c9 01       	movw	r24, r18
    3128:	aa 27       	eor	r26, r26
    312a:	97 fd       	sbrc	r25, 7
    312c:	a0 95       	com	r26
    312e:	ba 2f       	mov	r27, r26
    3130:	81 70       	andi	r24, 0x01	; 1
    3132:	90 70       	andi	r25, 0x00	; 0
    3134:	a0 70       	andi	r26, 0x00	; 0
    3136:	b0 70       	andi	r27, 0x00	; 0
    3138:	56 95       	lsr	r21
    313a:	47 95       	ror	r20
    313c:	37 95       	ror	r19
    313e:	27 95       	ror	r18
    3140:	82 2b       	or	r24, r18
    3142:	93 2b       	or	r25, r19
    3144:	a4 2b       	or	r26, r20
    3146:	b5 2b       	or	r27, r21
    3148:	84 83       	std	Z+4, r24	; 0x04
    314a:	95 83       	std	Z+5, r25	; 0x05
    314c:	a6 83       	std	Z+6, r26	; 0x06
    314e:	b7 83       	std	Z+7, r27	; 0x07
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	93 83       	std	Z+3, r25	; 0x03
    3158:	82 83       	std	Z+2, r24	; 0x02
    315a:	df 01       	movw	r26, r30
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <_fpadd_parts+0x28c>
    315e:	d2 01       	movw	r26, r4
    3160:	cd 01       	movw	r24, r26
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	e2 e1       	ldi	r30, 0x12	; 18
    3168:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__>

0000316c <__subsf3>:
    316c:	a0 e2       	ldi	r26, 0x20	; 32
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	ec eb       	ldi	r30, 0xBC	; 188
    3172:	f8 e1       	ldi	r31, 0x18	; 24
    3174:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x18>
    3178:	69 83       	std	Y+1, r22	; 0x01
    317a:	7a 83       	std	Y+2, r23	; 0x02
    317c:	8b 83       	std	Y+3, r24	; 0x03
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	2d 83       	std	Y+5, r18	; 0x05
    3182:	3e 83       	std	Y+6, r19	; 0x06
    3184:	4f 83       	std	Y+7, r20	; 0x07
    3186:	58 87       	std	Y+8, r21	; 0x08
    3188:	e9 e0       	ldi	r30, 0x09	; 9
    318a:	ee 2e       	mov	r14, r30
    318c:	f1 2c       	mov	r15, r1
    318e:	ec 0e       	add	r14, r28
    3190:	fd 1e       	adc	r15, r29
    3192:	ce 01       	movw	r24, r28
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	b7 01       	movw	r22, r14
    3198:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    319c:	8e 01       	movw	r16, r28
    319e:	0f 5e       	subi	r16, 0xEF	; 239
    31a0:	1f 4f       	sbci	r17, 0xFF	; 255
    31a2:	ce 01       	movw	r24, r28
    31a4:	05 96       	adiw	r24, 0x05	; 5
    31a6:	b8 01       	movw	r22, r16
    31a8:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    31ac:	8a 89       	ldd	r24, Y+18	; 0x12
    31ae:	91 e0       	ldi	r25, 0x01	; 1
    31b0:	89 27       	eor	r24, r25
    31b2:	8a 8b       	std	Y+18, r24	; 0x12
    31b4:	c7 01       	movw	r24, r14
    31b6:	b8 01       	movw	r22, r16
    31b8:	ae 01       	movw	r20, r28
    31ba:	47 5e       	subi	r20, 0xE7	; 231
    31bc:	5f 4f       	sbci	r21, 0xFF	; 255
    31be:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_fpadd_parts>
    31c2:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__pack_f>
    31c6:	a0 96       	adiw	r28, 0x20	; 32
    31c8:	e6 e0       	ldi	r30, 0x06	; 6
    31ca:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x18>

000031ce <__addsf3>:
    31ce:	a0 e2       	ldi	r26, 0x20	; 32
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	ed ee       	ldi	r30, 0xED	; 237
    31d4:	f8 e1       	ldi	r31, 0x18	; 24
    31d6:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x18>
    31da:	69 83       	std	Y+1, r22	; 0x01
    31dc:	7a 83       	std	Y+2, r23	; 0x02
    31de:	8b 83       	std	Y+3, r24	; 0x03
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	2d 83       	std	Y+5, r18	; 0x05
    31e4:	3e 83       	std	Y+6, r19	; 0x06
    31e6:	4f 83       	std	Y+7, r20	; 0x07
    31e8:	58 87       	std	Y+8, r21	; 0x08
    31ea:	f9 e0       	ldi	r31, 0x09	; 9
    31ec:	ef 2e       	mov	r14, r31
    31ee:	f1 2c       	mov	r15, r1
    31f0:	ec 0e       	add	r14, r28
    31f2:	fd 1e       	adc	r15, r29
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	b7 01       	movw	r22, r14
    31fa:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    31fe:	8e 01       	movw	r16, r28
    3200:	0f 5e       	subi	r16, 0xEF	; 239
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	ce 01       	movw	r24, r28
    3206:	05 96       	adiw	r24, 0x05	; 5
    3208:	b8 01       	movw	r22, r16
    320a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    320e:	c7 01       	movw	r24, r14
    3210:	b8 01       	movw	r22, r16
    3212:	ae 01       	movw	r20, r28
    3214:	47 5e       	subi	r20, 0xE7	; 231
    3216:	5f 4f       	sbci	r21, 0xFF	; 255
    3218:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <_fpadd_parts>
    321c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__pack_f>
    3220:	a0 96       	adiw	r28, 0x20	; 32
    3222:	e6 e0       	ldi	r30, 0x06	; 6
    3224:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x18>

00003228 <__mulsf3>:
    3228:	a0 e2       	ldi	r26, 0x20	; 32
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	ea e1       	ldi	r30, 0x1A	; 26
    322e:	f9 e1       	ldi	r31, 0x19	; 25
    3230:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__>
    3234:	69 83       	std	Y+1, r22	; 0x01
    3236:	7a 83       	std	Y+2, r23	; 0x02
    3238:	8b 83       	std	Y+3, r24	; 0x03
    323a:	9c 83       	std	Y+4, r25	; 0x04
    323c:	2d 83       	std	Y+5, r18	; 0x05
    323e:	3e 83       	std	Y+6, r19	; 0x06
    3240:	4f 83       	std	Y+7, r20	; 0x07
    3242:	58 87       	std	Y+8, r21	; 0x08
    3244:	ce 01       	movw	r24, r28
    3246:	01 96       	adiw	r24, 0x01	; 1
    3248:	be 01       	movw	r22, r28
    324a:	67 5f       	subi	r22, 0xF7	; 247
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3252:	ce 01       	movw	r24, r28
    3254:	05 96       	adiw	r24, 0x05	; 5
    3256:	be 01       	movw	r22, r28
    3258:	6f 5e       	subi	r22, 0xEF	; 239
    325a:	7f 4f       	sbci	r23, 0xFF	; 255
    325c:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3260:	99 85       	ldd	r25, Y+9	; 0x09
    3262:	92 30       	cpi	r25, 0x02	; 2
    3264:	88 f0       	brcs	.+34     	; 0x3288 <__mulsf3+0x60>
    3266:	89 89       	ldd	r24, Y+17	; 0x11
    3268:	82 30       	cpi	r24, 0x02	; 2
    326a:	c8 f0       	brcs	.+50     	; 0x329e <__mulsf3+0x76>
    326c:	94 30       	cpi	r25, 0x04	; 4
    326e:	19 f4       	brne	.+6      	; 0x3276 <__mulsf3+0x4e>
    3270:	82 30       	cpi	r24, 0x02	; 2
    3272:	51 f4       	brne	.+20     	; 0x3288 <__mulsf3+0x60>
    3274:	04 c0       	rjmp	.+8      	; 0x327e <__mulsf3+0x56>
    3276:	84 30       	cpi	r24, 0x04	; 4
    3278:	29 f4       	brne	.+10     	; 0x3284 <__mulsf3+0x5c>
    327a:	92 30       	cpi	r25, 0x02	; 2
    327c:	81 f4       	brne	.+32     	; 0x329e <__mulsf3+0x76>
    327e:	86 e3       	ldi	r24, 0x36	; 54
    3280:	92 e0       	ldi	r25, 0x02	; 2
    3282:	c6 c0       	rjmp	.+396    	; 0x3410 <__mulsf3+0x1e8>
    3284:	92 30       	cpi	r25, 0x02	; 2
    3286:	49 f4       	brne	.+18     	; 0x329a <__mulsf3+0x72>
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	8a 89       	ldd	r24, Y+18	; 0x12
    328e:	98 13       	cpse	r25, r24
    3290:	21 e0       	ldi	r18, 0x01	; 1
    3292:	2a 87       	std	Y+10, r18	; 0x0a
    3294:	ce 01       	movw	r24, r28
    3296:	09 96       	adiw	r24, 0x09	; 9
    3298:	bb c0       	rjmp	.+374    	; 0x3410 <__mulsf3+0x1e8>
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	49 f4       	brne	.+18     	; 0x32b0 <__mulsf3+0x88>
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a2:	8a 89       	ldd	r24, Y+18	; 0x12
    32a4:	98 13       	cpse	r25, r24
    32a6:	21 e0       	ldi	r18, 0x01	; 1
    32a8:	2a 8b       	std	Y+18, r18	; 0x12
    32aa:	ce 01       	movw	r24, r28
    32ac:	41 96       	adiw	r24, 0x11	; 17
    32ae:	b0 c0       	rjmp	.+352    	; 0x3410 <__mulsf3+0x1e8>
    32b0:	2d 84       	ldd	r2, Y+13	; 0x0d
    32b2:	3e 84       	ldd	r3, Y+14	; 0x0e
    32b4:	4f 84       	ldd	r4, Y+15	; 0x0f
    32b6:	58 88       	ldd	r5, Y+16	; 0x10
    32b8:	6d 88       	ldd	r6, Y+21	; 0x15
    32ba:	7e 88       	ldd	r7, Y+22	; 0x16
    32bc:	8f 88       	ldd	r8, Y+23	; 0x17
    32be:	98 8c       	ldd	r9, Y+24	; 0x18
    32c0:	ee 24       	eor	r14, r14
    32c2:	ff 24       	eor	r15, r15
    32c4:	87 01       	movw	r16, r14
    32c6:	aa 24       	eor	r10, r10
    32c8:	bb 24       	eor	r11, r11
    32ca:	65 01       	movw	r12, r10
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	e0 e0       	ldi	r30, 0x00	; 0
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	c1 01       	movw	r24, r2
    32da:	81 70       	andi	r24, 0x01	; 1
    32dc:	90 70       	andi	r25, 0x00	; 0
    32de:	89 2b       	or	r24, r25
    32e0:	e9 f0       	breq	.+58     	; 0x331c <__mulsf3+0xf4>
    32e2:	e6 0c       	add	r14, r6
    32e4:	f7 1c       	adc	r15, r7
    32e6:	08 1d       	adc	r16, r8
    32e8:	19 1d       	adc	r17, r9
    32ea:	9a 01       	movw	r18, r20
    32ec:	ab 01       	movw	r20, r22
    32ee:	2a 0d       	add	r18, r10
    32f0:	3b 1d       	adc	r19, r11
    32f2:	4c 1d       	adc	r20, r12
    32f4:	5d 1d       	adc	r21, r13
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 e0       	ldi	r26, 0x00	; 0
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	e6 14       	cp	r14, r6
    3300:	f7 04       	cpc	r15, r7
    3302:	08 05       	cpc	r16, r8
    3304:	19 05       	cpc	r17, r9
    3306:	20 f4       	brcc	.+8      	; 0x3310 <__mulsf3+0xe8>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	a0 e0       	ldi	r26, 0x00	; 0
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ba 01       	movw	r22, r20
    3312:	a9 01       	movw	r20, r18
    3314:	48 0f       	add	r20, r24
    3316:	59 1f       	adc	r21, r25
    3318:	6a 1f       	adc	r22, r26
    331a:	7b 1f       	adc	r23, r27
    331c:	aa 0c       	add	r10, r10
    331e:	bb 1c       	adc	r11, r11
    3320:	cc 1c       	adc	r12, r12
    3322:	dd 1c       	adc	r13, r13
    3324:	97 fe       	sbrs	r9, 7
    3326:	08 c0       	rjmp	.+16     	; 0x3338 <__mulsf3+0x110>
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	a8 2a       	or	r10, r24
    3332:	b9 2a       	or	r11, r25
    3334:	ca 2a       	or	r12, r26
    3336:	db 2a       	or	r13, r27
    3338:	31 96       	adiw	r30, 0x01	; 1
    333a:	e0 32       	cpi	r30, 0x20	; 32
    333c:	f1 05       	cpc	r31, r1
    333e:	49 f0       	breq	.+18     	; 0x3352 <__mulsf3+0x12a>
    3340:	66 0c       	add	r6, r6
    3342:	77 1c       	adc	r7, r7
    3344:	88 1c       	adc	r8, r8
    3346:	99 1c       	adc	r9, r9
    3348:	56 94       	lsr	r5
    334a:	47 94       	ror	r4
    334c:	37 94       	ror	r3
    334e:	27 94       	ror	r2
    3350:	c3 cf       	rjmp	.-122    	; 0x32d8 <__mulsf3+0xb0>
    3352:	fa 85       	ldd	r31, Y+10	; 0x0a
    3354:	ea 89       	ldd	r30, Y+18	; 0x12
    3356:	2b 89       	ldd	r18, Y+19	; 0x13
    3358:	3c 89       	ldd	r19, Y+20	; 0x14
    335a:	8b 85       	ldd	r24, Y+11	; 0x0b
    335c:	9c 85       	ldd	r25, Y+12	; 0x0c
    335e:	28 0f       	add	r18, r24
    3360:	39 1f       	adc	r19, r25
    3362:	2e 5f       	subi	r18, 0xFE	; 254
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	17 c0       	rjmp	.+46     	; 0x3396 <__mulsf3+0x16e>
    3368:	ca 01       	movw	r24, r20
    336a:	81 70       	andi	r24, 0x01	; 1
    336c:	90 70       	andi	r25, 0x00	; 0
    336e:	89 2b       	or	r24, r25
    3370:	61 f0       	breq	.+24     	; 0x338a <__mulsf3+0x162>
    3372:	16 95       	lsr	r17
    3374:	07 95       	ror	r16
    3376:	f7 94       	ror	r15
    3378:	e7 94       	ror	r14
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	a0 e0       	ldi	r26, 0x00	; 0
    3380:	b0 e8       	ldi	r27, 0x80	; 128
    3382:	e8 2a       	or	r14, r24
    3384:	f9 2a       	or	r15, r25
    3386:	0a 2b       	or	r16, r26
    3388:	1b 2b       	or	r17, r27
    338a:	76 95       	lsr	r23
    338c:	67 95       	ror	r22
    338e:	57 95       	ror	r21
    3390:	47 95       	ror	r20
    3392:	2f 5f       	subi	r18, 0xFF	; 255
    3394:	3f 4f       	sbci	r19, 0xFF	; 255
    3396:	77 fd       	sbrc	r23, 7
    3398:	e7 cf       	rjmp	.-50     	; 0x3368 <__mulsf3+0x140>
    339a:	0c c0       	rjmp	.+24     	; 0x33b4 <__mulsf3+0x18c>
    339c:	44 0f       	add	r20, r20
    339e:	55 1f       	adc	r21, r21
    33a0:	66 1f       	adc	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	17 fd       	sbrc	r17, 7
    33a6:	41 60       	ori	r20, 0x01	; 1
    33a8:	ee 0c       	add	r14, r14
    33aa:	ff 1c       	adc	r15, r15
    33ac:	00 1f       	adc	r16, r16
    33ae:	11 1f       	adc	r17, r17
    33b0:	21 50       	subi	r18, 0x01	; 1
    33b2:	30 40       	sbci	r19, 0x00	; 0
    33b4:	40 30       	cpi	r20, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	59 07       	cpc	r21, r25
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	69 07       	cpc	r22, r25
    33be:	90 e4       	ldi	r25, 0x40	; 64
    33c0:	79 07       	cpc	r23, r25
    33c2:	60 f3       	brcs	.-40     	; 0x339c <__mulsf3+0x174>
    33c4:	2b 8f       	std	Y+27, r18	; 0x1b
    33c6:	3c 8f       	std	Y+28, r19	; 0x1c
    33c8:	db 01       	movw	r26, r22
    33ca:	ca 01       	movw	r24, r20
    33cc:	8f 77       	andi	r24, 0x7F	; 127
    33ce:	90 70       	andi	r25, 0x00	; 0
    33d0:	a0 70       	andi	r26, 0x00	; 0
    33d2:	b0 70       	andi	r27, 0x00	; 0
    33d4:	80 34       	cpi	r24, 0x40	; 64
    33d6:	91 05       	cpc	r25, r1
    33d8:	a1 05       	cpc	r26, r1
    33da:	b1 05       	cpc	r27, r1
    33dc:	61 f4       	brne	.+24     	; 0x33f6 <__mulsf3+0x1ce>
    33de:	47 fd       	sbrc	r20, 7
    33e0:	0a c0       	rjmp	.+20     	; 0x33f6 <__mulsf3+0x1ce>
    33e2:	e1 14       	cp	r14, r1
    33e4:	f1 04       	cpc	r15, r1
    33e6:	01 05       	cpc	r16, r1
    33e8:	11 05       	cpc	r17, r1
    33ea:	29 f0       	breq	.+10     	; 0x33f6 <__mulsf3+0x1ce>
    33ec:	40 5c       	subi	r20, 0xC0	; 192
    33ee:	5f 4f       	sbci	r21, 0xFF	; 255
    33f0:	6f 4f       	sbci	r22, 0xFF	; 255
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	40 78       	andi	r20, 0x80	; 128
    33f6:	1a 8e       	std	Y+26, r1	; 0x1a
    33f8:	fe 17       	cp	r31, r30
    33fa:	11 f0       	breq	.+4      	; 0x3400 <__mulsf3+0x1d8>
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	8a 8f       	std	Y+26, r24	; 0x1a
    3400:	4d 8f       	std	Y+29, r20	; 0x1d
    3402:	5e 8f       	std	Y+30, r21	; 0x1e
    3404:	6f 8f       	std	Y+31, r22	; 0x1f
    3406:	78 a3       	std	Y+32, r23	; 0x20
    3408:	83 e0       	ldi	r24, 0x03	; 3
    340a:	89 8f       	std	Y+25, r24	; 0x19
    340c:	ce 01       	movw	r24, r28
    340e:	49 96       	adiw	r24, 0x19	; 25
    3410:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__pack_f>
    3414:	a0 96       	adiw	r28, 0x20	; 32
    3416:	e2 e1       	ldi	r30, 0x12	; 18
    3418:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__>

0000341c <__divsf3>:
    341c:	a8 e1       	ldi	r26, 0x18	; 24
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e4 e1       	ldi	r30, 0x14	; 20
    3422:	fa e1       	ldi	r31, 0x1A	; 26
    3424:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x10>
    3428:	69 83       	std	Y+1, r22	; 0x01
    342a:	7a 83       	std	Y+2, r23	; 0x02
    342c:	8b 83       	std	Y+3, r24	; 0x03
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	2d 83       	std	Y+5, r18	; 0x05
    3432:	3e 83       	std	Y+6, r19	; 0x06
    3434:	4f 83       	std	Y+7, r20	; 0x07
    3436:	58 87       	std	Y+8, r21	; 0x08
    3438:	b9 e0       	ldi	r27, 0x09	; 9
    343a:	eb 2e       	mov	r14, r27
    343c:	f1 2c       	mov	r15, r1
    343e:	ec 0e       	add	r14, r28
    3440:	fd 1e       	adc	r15, r29
    3442:	ce 01       	movw	r24, r28
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	b7 01       	movw	r22, r14
    3448:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    344c:	8e 01       	movw	r16, r28
    344e:	0f 5e       	subi	r16, 0xEF	; 239
    3450:	1f 4f       	sbci	r17, 0xFF	; 255
    3452:	ce 01       	movw	r24, r28
    3454:	05 96       	adiw	r24, 0x05	; 5
    3456:	b8 01       	movw	r22, r16
    3458:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    345c:	29 85       	ldd	r18, Y+9	; 0x09
    345e:	22 30       	cpi	r18, 0x02	; 2
    3460:	08 f4       	brcc	.+2      	; 0x3464 <__divsf3+0x48>
    3462:	7e c0       	rjmp	.+252    	; 0x3560 <__divsf3+0x144>
    3464:	39 89       	ldd	r19, Y+17	; 0x11
    3466:	32 30       	cpi	r19, 0x02	; 2
    3468:	10 f4       	brcc	.+4      	; 0x346e <__divsf3+0x52>
    346a:	b8 01       	movw	r22, r16
    346c:	7c c0       	rjmp	.+248    	; 0x3566 <__divsf3+0x14a>
    346e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3470:	9a 89       	ldd	r25, Y+18	; 0x12
    3472:	89 27       	eor	r24, r25
    3474:	8a 87       	std	Y+10, r24	; 0x0a
    3476:	24 30       	cpi	r18, 0x04	; 4
    3478:	11 f0       	breq	.+4      	; 0x347e <__divsf3+0x62>
    347a:	22 30       	cpi	r18, 0x02	; 2
    347c:	31 f4       	brne	.+12     	; 0x348a <__divsf3+0x6e>
    347e:	23 17       	cp	r18, r19
    3480:	09 f0       	breq	.+2      	; 0x3484 <__divsf3+0x68>
    3482:	6e c0       	rjmp	.+220    	; 0x3560 <__divsf3+0x144>
    3484:	66 e3       	ldi	r22, 0x36	; 54
    3486:	72 e0       	ldi	r23, 0x02	; 2
    3488:	6e c0       	rjmp	.+220    	; 0x3566 <__divsf3+0x14a>
    348a:	34 30       	cpi	r19, 0x04	; 4
    348c:	39 f4       	brne	.+14     	; 0x349c <__divsf3+0x80>
    348e:	1d 86       	std	Y+13, r1	; 0x0d
    3490:	1e 86       	std	Y+14, r1	; 0x0e
    3492:	1f 86       	std	Y+15, r1	; 0x0f
    3494:	18 8a       	std	Y+16, r1	; 0x10
    3496:	1c 86       	std	Y+12, r1	; 0x0c
    3498:	1b 86       	std	Y+11, r1	; 0x0b
    349a:	04 c0       	rjmp	.+8      	; 0x34a4 <__divsf3+0x88>
    349c:	32 30       	cpi	r19, 0x02	; 2
    349e:	21 f4       	brne	.+8      	; 0x34a8 <__divsf3+0x8c>
    34a0:	84 e0       	ldi	r24, 0x04	; 4
    34a2:	89 87       	std	Y+9, r24	; 0x09
    34a4:	b7 01       	movw	r22, r14
    34a6:	5f c0       	rjmp	.+190    	; 0x3566 <__divsf3+0x14a>
    34a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    34aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    34ac:	8b 89       	ldd	r24, Y+19	; 0x13
    34ae:	9c 89       	ldd	r25, Y+20	; 0x14
    34b0:	28 1b       	sub	r18, r24
    34b2:	39 0b       	sbc	r19, r25
    34b4:	3c 87       	std	Y+12, r19	; 0x0c
    34b6:	2b 87       	std	Y+11, r18	; 0x0b
    34b8:	ed 84       	ldd	r14, Y+13	; 0x0d
    34ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    34bc:	0f 85       	ldd	r16, Y+15	; 0x0f
    34be:	18 89       	ldd	r17, Y+16	; 0x10
    34c0:	ad 88       	ldd	r10, Y+21	; 0x15
    34c2:	be 88       	ldd	r11, Y+22	; 0x16
    34c4:	cf 88       	ldd	r12, Y+23	; 0x17
    34c6:	d8 8c       	ldd	r13, Y+24	; 0x18
    34c8:	ea 14       	cp	r14, r10
    34ca:	fb 04       	cpc	r15, r11
    34cc:	0c 05       	cpc	r16, r12
    34ce:	1d 05       	cpc	r17, r13
    34d0:	40 f4       	brcc	.+16     	; 0x34e2 <__divsf3+0xc6>
    34d2:	ee 0c       	add	r14, r14
    34d4:	ff 1c       	adc	r15, r15
    34d6:	00 1f       	adc	r16, r16
    34d8:	11 1f       	adc	r17, r17
    34da:	21 50       	subi	r18, 0x01	; 1
    34dc:	30 40       	sbci	r19, 0x00	; 0
    34de:	3c 87       	std	Y+12, r19	; 0x0c
    34e0:	2b 87       	std	Y+11, r18	; 0x0b
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	a0 e0       	ldi	r26, 0x00	; 0
    34f0:	b0 e4       	ldi	r27, 0x40	; 64
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	ea 14       	cp	r14, r10
    34f8:	fb 04       	cpc	r15, r11
    34fa:	0c 05       	cpc	r16, r12
    34fc:	1d 05       	cpc	r17, r13
    34fe:	40 f0       	brcs	.+16     	; 0x3510 <__divsf3+0xf4>
    3500:	28 2b       	or	r18, r24
    3502:	39 2b       	or	r19, r25
    3504:	4a 2b       	or	r20, r26
    3506:	5b 2b       	or	r21, r27
    3508:	ea 18       	sub	r14, r10
    350a:	fb 08       	sbc	r15, r11
    350c:	0c 09       	sbc	r16, r12
    350e:	1d 09       	sbc	r17, r13
    3510:	b6 95       	lsr	r27
    3512:	a7 95       	ror	r26
    3514:	97 95       	ror	r25
    3516:	87 95       	ror	r24
    3518:	ee 0c       	add	r14, r14
    351a:	ff 1c       	adc	r15, r15
    351c:	00 1f       	adc	r16, r16
    351e:	11 1f       	adc	r17, r17
    3520:	6f 5f       	subi	r22, 0xFF	; 255
    3522:	7f 4f       	sbci	r23, 0xFF	; 255
    3524:	6f 31       	cpi	r22, 0x1F	; 31
    3526:	71 05       	cpc	r23, r1
    3528:	31 f7       	brne	.-52     	; 0x34f6 <__divsf3+0xda>
    352a:	da 01       	movw	r26, r20
    352c:	c9 01       	movw	r24, r18
    352e:	8f 77       	andi	r24, 0x7F	; 127
    3530:	90 70       	andi	r25, 0x00	; 0
    3532:	a0 70       	andi	r26, 0x00	; 0
    3534:	b0 70       	andi	r27, 0x00	; 0
    3536:	80 34       	cpi	r24, 0x40	; 64
    3538:	91 05       	cpc	r25, r1
    353a:	a1 05       	cpc	r26, r1
    353c:	b1 05       	cpc	r27, r1
    353e:	61 f4       	brne	.+24     	; 0x3558 <__divsf3+0x13c>
    3540:	27 fd       	sbrc	r18, 7
    3542:	0a c0       	rjmp	.+20     	; 0x3558 <__divsf3+0x13c>
    3544:	e1 14       	cp	r14, r1
    3546:	f1 04       	cpc	r15, r1
    3548:	01 05       	cpc	r16, r1
    354a:	11 05       	cpc	r17, r1
    354c:	29 f0       	breq	.+10     	; 0x3558 <__divsf3+0x13c>
    354e:	20 5c       	subi	r18, 0xC0	; 192
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	4f 4f       	sbci	r20, 0xFF	; 255
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	20 78       	andi	r18, 0x80	; 128
    3558:	2d 87       	std	Y+13, r18	; 0x0d
    355a:	3e 87       	std	Y+14, r19	; 0x0e
    355c:	4f 87       	std	Y+15, r20	; 0x0f
    355e:	58 8b       	std	Y+16, r21	; 0x10
    3560:	be 01       	movw	r22, r28
    3562:	67 5f       	subi	r22, 0xF7	; 247
    3564:	7f 4f       	sbci	r23, 0xFF	; 255
    3566:	cb 01       	movw	r24, r22
    3568:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__pack_f>
    356c:	68 96       	adiw	r28, 0x18	; 24
    356e:	ea e0       	ldi	r30, 0x0A	; 10
    3570:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x10>

00003574 <__gtsf2>:
    3574:	a8 e1       	ldi	r26, 0x18	; 24
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	e0 ec       	ldi	r30, 0xC0	; 192
    357a:	fa e1       	ldi	r31, 0x1A	; 26
    357c:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x18>
    3580:	69 83       	std	Y+1, r22	; 0x01
    3582:	7a 83       	std	Y+2, r23	; 0x02
    3584:	8b 83       	std	Y+3, r24	; 0x03
    3586:	9c 83       	std	Y+4, r25	; 0x04
    3588:	2d 83       	std	Y+5, r18	; 0x05
    358a:	3e 83       	std	Y+6, r19	; 0x06
    358c:	4f 83       	std	Y+7, r20	; 0x07
    358e:	58 87       	std	Y+8, r21	; 0x08
    3590:	89 e0       	ldi	r24, 0x09	; 9
    3592:	e8 2e       	mov	r14, r24
    3594:	f1 2c       	mov	r15, r1
    3596:	ec 0e       	add	r14, r28
    3598:	fd 1e       	adc	r15, r29
    359a:	ce 01       	movw	r24, r28
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	b7 01       	movw	r22, r14
    35a0:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    35a4:	8e 01       	movw	r16, r28
    35a6:	0f 5e       	subi	r16, 0xEF	; 239
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	ce 01       	movw	r24, r28
    35ac:	05 96       	adiw	r24, 0x05	; 5
    35ae:	b8 01       	movw	r22, r16
    35b0:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	82 30       	cpi	r24, 0x02	; 2
    35b8:	40 f0       	brcs	.+16     	; 0x35ca <__gtsf2+0x56>
    35ba:	89 89       	ldd	r24, Y+17	; 0x11
    35bc:	82 30       	cpi	r24, 0x02	; 2
    35be:	28 f0       	brcs	.+10     	; 0x35ca <__gtsf2+0x56>
    35c0:	c7 01       	movw	r24, r14
    35c2:	b8 01       	movw	r22, r16
    35c4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__fpcmp_parts_f>
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <__gtsf2+0x58>
    35ca:	8f ef       	ldi	r24, 0xFF	; 255
    35cc:	68 96       	adiw	r28, 0x18	; 24
    35ce:	e6 e0       	ldi	r30, 0x06	; 6
    35d0:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x18>

000035d4 <__gesf2>:
    35d4:	a8 e1       	ldi	r26, 0x18	; 24
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e0 ef       	ldi	r30, 0xF0	; 240
    35da:	fa e1       	ldi	r31, 0x1A	; 26
    35dc:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x18>
    35e0:	69 83       	std	Y+1, r22	; 0x01
    35e2:	7a 83       	std	Y+2, r23	; 0x02
    35e4:	8b 83       	std	Y+3, r24	; 0x03
    35e6:	9c 83       	std	Y+4, r25	; 0x04
    35e8:	2d 83       	std	Y+5, r18	; 0x05
    35ea:	3e 83       	std	Y+6, r19	; 0x06
    35ec:	4f 83       	std	Y+7, r20	; 0x07
    35ee:	58 87       	std	Y+8, r21	; 0x08
    35f0:	89 e0       	ldi	r24, 0x09	; 9
    35f2:	e8 2e       	mov	r14, r24
    35f4:	f1 2c       	mov	r15, r1
    35f6:	ec 0e       	add	r14, r28
    35f8:	fd 1e       	adc	r15, r29
    35fa:	ce 01       	movw	r24, r28
    35fc:	01 96       	adiw	r24, 0x01	; 1
    35fe:	b7 01       	movw	r22, r14
    3600:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3604:	8e 01       	movw	r16, r28
    3606:	0f 5e       	subi	r16, 0xEF	; 239
    3608:	1f 4f       	sbci	r17, 0xFF	; 255
    360a:	ce 01       	movw	r24, r28
    360c:	05 96       	adiw	r24, 0x05	; 5
    360e:	b8 01       	movw	r22, r16
    3610:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	82 30       	cpi	r24, 0x02	; 2
    3618:	40 f0       	brcs	.+16     	; 0x362a <__gesf2+0x56>
    361a:	89 89       	ldd	r24, Y+17	; 0x11
    361c:	82 30       	cpi	r24, 0x02	; 2
    361e:	28 f0       	brcs	.+10     	; 0x362a <__gesf2+0x56>
    3620:	c7 01       	movw	r24, r14
    3622:	b8 01       	movw	r22, r16
    3624:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__fpcmp_parts_f>
    3628:	01 c0       	rjmp	.+2      	; 0x362c <__gesf2+0x58>
    362a:	8f ef       	ldi	r24, 0xFF	; 255
    362c:	68 96       	adiw	r28, 0x18	; 24
    362e:	e6 e0       	ldi	r30, 0x06	; 6
    3630:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x18>

00003634 <__ltsf2>:
    3634:	a8 e1       	ldi	r26, 0x18	; 24
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e0 e2       	ldi	r30, 0x20	; 32
    363a:	fb e1       	ldi	r31, 0x1B	; 27
    363c:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__prologue_saves__+0x18>
    3640:	69 83       	std	Y+1, r22	; 0x01
    3642:	7a 83       	std	Y+2, r23	; 0x02
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	9c 83       	std	Y+4, r25	; 0x04
    3648:	2d 83       	std	Y+5, r18	; 0x05
    364a:	3e 83       	std	Y+6, r19	; 0x06
    364c:	4f 83       	std	Y+7, r20	; 0x07
    364e:	58 87       	std	Y+8, r21	; 0x08
    3650:	89 e0       	ldi	r24, 0x09	; 9
    3652:	e8 2e       	mov	r14, r24
    3654:	f1 2c       	mov	r15, r1
    3656:	ec 0e       	add	r14, r28
    3658:	fd 1e       	adc	r15, r29
    365a:	ce 01       	movw	r24, r28
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	b7 01       	movw	r22, r14
    3660:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3664:	8e 01       	movw	r16, r28
    3666:	0f 5e       	subi	r16, 0xEF	; 239
    3668:	1f 4f       	sbci	r17, 0xFF	; 255
    366a:	ce 01       	movw	r24, r28
    366c:	05 96       	adiw	r24, 0x05	; 5
    366e:	b8 01       	movw	r22, r16
    3670:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	40 f0       	brcs	.+16     	; 0x368a <__ltsf2+0x56>
    367a:	89 89       	ldd	r24, Y+17	; 0x11
    367c:	82 30       	cpi	r24, 0x02	; 2
    367e:	28 f0       	brcs	.+10     	; 0x368a <__ltsf2+0x56>
    3680:	c7 01       	movw	r24, r14
    3682:	b8 01       	movw	r22, r16
    3684:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__fpcmp_parts_f>
    3688:	01 c0       	rjmp	.+2      	; 0x368c <__ltsf2+0x58>
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	68 96       	adiw	r28, 0x18	; 24
    368e:	e6 e0       	ldi	r30, 0x06	; 6
    3690:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__epilogue_restores__+0x18>

00003694 <__fixsfsi>:
    3694:	ac e0       	ldi	r26, 0x0C	; 12
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	e0 e5       	ldi	r30, 0x50	; 80
    369a:	fb e1       	ldi	r31, 0x1B	; 27
    369c:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__prologue_saves__+0x20>
    36a0:	69 83       	std	Y+1, r22	; 0x01
    36a2:	7a 83       	std	Y+2, r23	; 0x02
    36a4:	8b 83       	std	Y+3, r24	; 0x03
    36a6:	9c 83       	std	Y+4, r25	; 0x04
    36a8:	ce 01       	movw	r24, r28
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	be 01       	movw	r22, r28
    36ae:	6b 5f       	subi	r22, 0xFB	; 251
    36b0:	7f 4f       	sbci	r23, 0xFF	; 255
    36b2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__unpack_f>
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	82 30       	cpi	r24, 0x02	; 2
    36ba:	61 f1       	breq	.+88     	; 0x3714 <__fixsfsi+0x80>
    36bc:	82 30       	cpi	r24, 0x02	; 2
    36be:	50 f1       	brcs	.+84     	; 0x3714 <__fixsfsi+0x80>
    36c0:	84 30       	cpi	r24, 0x04	; 4
    36c2:	21 f4       	brne	.+8      	; 0x36cc <__fixsfsi+0x38>
    36c4:	8e 81       	ldd	r24, Y+6	; 0x06
    36c6:	88 23       	and	r24, r24
    36c8:	51 f1       	breq	.+84     	; 0x371e <__fixsfsi+0x8a>
    36ca:	2e c0       	rjmp	.+92     	; 0x3728 <__fixsfsi+0x94>
    36cc:	2f 81       	ldd	r18, Y+7	; 0x07
    36ce:	38 85       	ldd	r19, Y+8	; 0x08
    36d0:	37 fd       	sbrc	r19, 7
    36d2:	20 c0       	rjmp	.+64     	; 0x3714 <__fixsfsi+0x80>
    36d4:	6e 81       	ldd	r22, Y+6	; 0x06
    36d6:	2f 31       	cpi	r18, 0x1F	; 31
    36d8:	31 05       	cpc	r19, r1
    36da:	1c f0       	brlt	.+6      	; 0x36e2 <__fixsfsi+0x4e>
    36dc:	66 23       	and	r22, r22
    36de:	f9 f0       	breq	.+62     	; 0x371e <__fixsfsi+0x8a>
    36e0:	23 c0       	rjmp	.+70     	; 0x3728 <__fixsfsi+0x94>
    36e2:	8e e1       	ldi	r24, 0x1E	; 30
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	82 1b       	sub	r24, r18
    36e8:	93 0b       	sbc	r25, r19
    36ea:	29 85       	ldd	r18, Y+9	; 0x09
    36ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    36ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    36f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <__fixsfsi+0x68>
    36f4:	56 95       	lsr	r21
    36f6:	47 95       	ror	r20
    36f8:	37 95       	ror	r19
    36fa:	27 95       	ror	r18
    36fc:	8a 95       	dec	r24
    36fe:	d2 f7       	brpl	.-12     	; 0x36f4 <__fixsfsi+0x60>
    3700:	66 23       	and	r22, r22
    3702:	b1 f0       	breq	.+44     	; 0x3730 <__fixsfsi+0x9c>
    3704:	50 95       	com	r21
    3706:	40 95       	com	r20
    3708:	30 95       	com	r19
    370a:	21 95       	neg	r18
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	4f 4f       	sbci	r20, 0xFF	; 255
    3710:	5f 4f       	sbci	r21, 0xFF	; 255
    3712:	0e c0       	rjmp	.+28     	; 0x3730 <__fixsfsi+0x9c>
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	50 e0       	ldi	r21, 0x00	; 0
    371c:	09 c0       	rjmp	.+18     	; 0x3730 <__fixsfsi+0x9c>
    371e:	2f ef       	ldi	r18, 0xFF	; 255
    3720:	3f ef       	ldi	r19, 0xFF	; 255
    3722:	4f ef       	ldi	r20, 0xFF	; 255
    3724:	5f e7       	ldi	r21, 0x7F	; 127
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <__fixsfsi+0x9c>
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e8       	ldi	r21, 0x80	; 128
    3730:	b9 01       	movw	r22, r18
    3732:	ca 01       	movw	r24, r20
    3734:	2c 96       	adiw	r28, 0x0c	; 12
    3736:	e2 e0       	ldi	r30, 0x02	; 2
    3738:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__epilogue_restores__+0x20>

0000373c <__floatunsisf>:
    373c:	a8 e0       	ldi	r26, 0x08	; 8
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	e4 ea       	ldi	r30, 0xA4	; 164
    3742:	fb e1       	ldi	r31, 0x1B	; 27
    3744:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__prologue_saves__+0x10>
    3748:	7b 01       	movw	r14, r22
    374a:	8c 01       	movw	r16, r24
    374c:	61 15       	cp	r22, r1
    374e:	71 05       	cpc	r23, r1
    3750:	81 05       	cpc	r24, r1
    3752:	91 05       	cpc	r25, r1
    3754:	19 f4       	brne	.+6      	; 0x375c <__floatunsisf+0x20>
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	60 c0       	rjmp	.+192    	; 0x381c <__floatunsisf+0xe0>
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	89 83       	std	Y+1, r24	; 0x01
    3760:	8e e1       	ldi	r24, 0x1E	; 30
    3762:	c8 2e       	mov	r12, r24
    3764:	d1 2c       	mov	r13, r1
    3766:	dc 82       	std	Y+4, r13	; 0x04
    3768:	cb 82       	std	Y+3, r12	; 0x03
    376a:	ed 82       	std	Y+5, r14	; 0x05
    376c:	fe 82       	std	Y+6, r15	; 0x06
    376e:	0f 83       	std	Y+7, r16	; 0x07
    3770:	18 87       	std	Y+8, r17	; 0x08
    3772:	c8 01       	movw	r24, r16
    3774:	b7 01       	movw	r22, r14
    3776:	0e 94 17 1c 	call	0x382e	; 0x382e <__clzsi2>
    377a:	fc 01       	movw	r30, r24
    377c:	31 97       	sbiw	r30, 0x01	; 1
    377e:	f7 ff       	sbrs	r31, 7
    3780:	3b c0       	rjmp	.+118    	; 0x37f8 <__floatunsisf+0xbc>
    3782:	22 27       	eor	r18, r18
    3784:	33 27       	eor	r19, r19
    3786:	2e 1b       	sub	r18, r30
    3788:	3f 0b       	sbc	r19, r31
    378a:	57 01       	movw	r10, r14
    378c:	68 01       	movw	r12, r16
    378e:	02 2e       	mov	r0, r18
    3790:	04 c0       	rjmp	.+8      	; 0x379a <__floatunsisf+0x5e>
    3792:	d6 94       	lsr	r13
    3794:	c7 94       	ror	r12
    3796:	b7 94       	ror	r11
    3798:	a7 94       	ror	r10
    379a:	0a 94       	dec	r0
    379c:	d2 f7       	brpl	.-12     	; 0x3792 <__floatunsisf+0x56>
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	50 e0       	ldi	r21, 0x00	; 0
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a0 e0       	ldi	r26, 0x00	; 0
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	04 c0       	rjmp	.+8      	; 0x37b8 <__floatunsisf+0x7c>
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	aa 1f       	adc	r26, r26
    37b6:	bb 1f       	adc	r27, r27
    37b8:	2a 95       	dec	r18
    37ba:	d2 f7       	brpl	.-12     	; 0x37b0 <__floatunsisf+0x74>
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	a1 09       	sbc	r26, r1
    37c0:	b1 09       	sbc	r27, r1
    37c2:	8e 21       	and	r24, r14
    37c4:	9f 21       	and	r25, r15
    37c6:	a0 23       	and	r26, r16
    37c8:	b1 23       	and	r27, r17
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	a1 05       	cpc	r26, r1
    37ce:	b1 05       	cpc	r27, r1
    37d0:	21 f0       	breq	.+8      	; 0x37da <__floatunsisf+0x9e>
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	4a 29       	or	r20, r10
    37dc:	5b 29       	or	r21, r11
    37de:	6c 29       	or	r22, r12
    37e0:	7d 29       	or	r23, r13
    37e2:	4d 83       	std	Y+5, r20	; 0x05
    37e4:	5e 83       	std	Y+6, r21	; 0x06
    37e6:	6f 83       	std	Y+7, r22	; 0x07
    37e8:	78 87       	std	Y+8, r23	; 0x08
    37ea:	8e e1       	ldi	r24, 0x1E	; 30
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	8e 1b       	sub	r24, r30
    37f0:	9f 0b       	sbc	r25, r31
    37f2:	9c 83       	std	Y+4, r25	; 0x04
    37f4:	8b 83       	std	Y+3, r24	; 0x03
    37f6:	12 c0       	rjmp	.+36     	; 0x381c <__floatunsisf+0xe0>
    37f8:	30 97       	sbiw	r30, 0x00	; 0
    37fa:	81 f0       	breq	.+32     	; 0x381c <__floatunsisf+0xe0>
    37fc:	0e 2e       	mov	r0, r30
    37fe:	04 c0       	rjmp	.+8      	; 0x3808 <__floatunsisf+0xcc>
    3800:	ee 0c       	add	r14, r14
    3802:	ff 1c       	adc	r15, r15
    3804:	00 1f       	adc	r16, r16
    3806:	11 1f       	adc	r17, r17
    3808:	0a 94       	dec	r0
    380a:	d2 f7       	brpl	.-12     	; 0x3800 <__floatunsisf+0xc4>
    380c:	ed 82       	std	Y+5, r14	; 0x05
    380e:	fe 82       	std	Y+6, r15	; 0x06
    3810:	0f 83       	std	Y+7, r16	; 0x07
    3812:	18 87       	std	Y+8, r17	; 0x08
    3814:	ce 1a       	sub	r12, r30
    3816:	df 0a       	sbc	r13, r31
    3818:	dc 82       	std	Y+4, r13	; 0x04
    381a:	cb 82       	std	Y+3, r12	; 0x03
    381c:	1a 82       	std	Y+2, r1	; 0x02
    381e:	ce 01       	movw	r24, r28
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__pack_f>
    3826:	28 96       	adiw	r28, 0x08	; 8
    3828:	ea e0       	ldi	r30, 0x0A	; 10
    382a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__epilogue_restores__+0x10>

0000382e <__clzsi2>:
    382e:	ef 92       	push	r14
    3830:	ff 92       	push	r15
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	7b 01       	movw	r14, r22
    3838:	8c 01       	movw	r16, r24
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	e8 16       	cp	r14, r24
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	f8 06       	cpc	r15, r24
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	08 07       	cpc	r16, r24
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	18 07       	cpc	r17, r24
    384a:	88 f4       	brcc	.+34     	; 0x386e <__clzsi2+0x40>
    384c:	8f ef       	ldi	r24, 0xFF	; 255
    384e:	e8 16       	cp	r14, r24
    3850:	f1 04       	cpc	r15, r1
    3852:	01 05       	cpc	r16, r1
    3854:	11 05       	cpc	r17, r1
    3856:	31 f0       	breq	.+12     	; 0x3864 <__clzsi2+0x36>
    3858:	28 f0       	brcs	.+10     	; 0x3864 <__clzsi2+0x36>
    385a:	88 e0       	ldi	r24, 0x08	; 8
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	17 c0       	rjmp	.+46     	; 0x3892 <__clzsi2+0x64>
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a0 e0       	ldi	r26, 0x00	; 0
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	12 c0       	rjmp	.+36     	; 0x3892 <__clzsi2+0x64>
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	e8 16       	cp	r14, r24
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	f8 06       	cpc	r15, r24
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	08 07       	cpc	r16, r24
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	18 07       	cpc	r17, r24
    387e:	28 f0       	brcs	.+10     	; 0x388a <__clzsi2+0x5c>
    3880:	88 e1       	ldi	r24, 0x18	; 24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a0 e0       	ldi	r26, 0x00	; 0
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	04 c0       	rjmp	.+8      	; 0x3892 <__clzsi2+0x64>
    388a:	80 e1       	ldi	r24, 0x10	; 16
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e0       	ldi	r26, 0x00	; 0
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	20 e2       	ldi	r18, 0x20	; 32
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	28 1b       	sub	r18, r24
    389c:	39 0b       	sbc	r19, r25
    389e:	4a 0b       	sbc	r20, r26
    38a0:	5b 0b       	sbc	r21, r27
    38a2:	04 c0       	rjmp	.+8      	; 0x38ac <__clzsi2+0x7e>
    38a4:	16 95       	lsr	r17
    38a6:	07 95       	ror	r16
    38a8:	f7 94       	ror	r15
    38aa:	e7 94       	ror	r14
    38ac:	8a 95       	dec	r24
    38ae:	d2 f7       	brpl	.-12     	; 0x38a4 <__clzsi2+0x76>
    38b0:	f7 01       	movw	r30, r14
    38b2:	e2 5c       	subi	r30, 0xC2	; 194
    38b4:	fd 4f       	sbci	r31, 0xFD	; 253
    38b6:	80 81       	ld	r24, Z
    38b8:	28 1b       	sub	r18, r24
    38ba:	31 09       	sbc	r19, r1
    38bc:	41 09       	sbc	r20, r1
    38be:	51 09       	sbc	r21, r1
    38c0:	c9 01       	movw	r24, r18
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	08 95       	ret

000038cc <__pack_f>:
    38cc:	df 92       	push	r13
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	fc 01       	movw	r30, r24
    38d8:	e4 80       	ldd	r14, Z+4	; 0x04
    38da:	f5 80       	ldd	r15, Z+5	; 0x05
    38dc:	06 81       	ldd	r16, Z+6	; 0x06
    38de:	17 81       	ldd	r17, Z+7	; 0x07
    38e0:	d1 80       	ldd	r13, Z+1	; 0x01
    38e2:	80 81       	ld	r24, Z
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	48 f4       	brcc	.+18     	; 0x38fa <__pack_f+0x2e>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a0 e1       	ldi	r26, 0x10	; 16
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	e8 2a       	or	r14, r24
    38f2:	f9 2a       	or	r15, r25
    38f4:	0a 2b       	or	r16, r26
    38f6:	1b 2b       	or	r17, r27
    38f8:	a5 c0       	rjmp	.+330    	; 0x3a44 <__pack_f+0x178>
    38fa:	84 30       	cpi	r24, 0x04	; 4
    38fc:	09 f4       	brne	.+2      	; 0x3900 <__pack_f+0x34>
    38fe:	9f c0       	rjmp	.+318    	; 0x3a3e <__pack_f+0x172>
    3900:	82 30       	cpi	r24, 0x02	; 2
    3902:	21 f4       	brne	.+8      	; 0x390c <__pack_f+0x40>
    3904:	ee 24       	eor	r14, r14
    3906:	ff 24       	eor	r15, r15
    3908:	87 01       	movw	r16, r14
    390a:	05 c0       	rjmp	.+10     	; 0x3916 <__pack_f+0x4a>
    390c:	e1 14       	cp	r14, r1
    390e:	f1 04       	cpc	r15, r1
    3910:	01 05       	cpc	r16, r1
    3912:	11 05       	cpc	r17, r1
    3914:	19 f4       	brne	.+6      	; 0x391c <__pack_f+0x50>
    3916:	e0 e0       	ldi	r30, 0x00	; 0
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	96 c0       	rjmp	.+300    	; 0x3a48 <__pack_f+0x17c>
    391c:	62 81       	ldd	r22, Z+2	; 0x02
    391e:	73 81       	ldd	r23, Z+3	; 0x03
    3920:	9f ef       	ldi	r25, 0xFF	; 255
    3922:	62 38       	cpi	r22, 0x82	; 130
    3924:	79 07       	cpc	r23, r25
    3926:	0c f0       	brlt	.+2      	; 0x392a <__pack_f+0x5e>
    3928:	5b c0       	rjmp	.+182    	; 0x39e0 <__pack_f+0x114>
    392a:	22 e8       	ldi	r18, 0x82	; 130
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	26 1b       	sub	r18, r22
    3930:	37 0b       	sbc	r19, r23
    3932:	2a 31       	cpi	r18, 0x1A	; 26
    3934:	31 05       	cpc	r19, r1
    3936:	2c f0       	brlt	.+10     	; 0x3942 <__pack_f+0x76>
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	2a c0       	rjmp	.+84     	; 0x3996 <__pack_f+0xca>
    3942:	b8 01       	movw	r22, r16
    3944:	a7 01       	movw	r20, r14
    3946:	02 2e       	mov	r0, r18
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <__pack_f+0x86>
    394a:	76 95       	lsr	r23
    394c:	67 95       	ror	r22
    394e:	57 95       	ror	r21
    3950:	47 95       	ror	r20
    3952:	0a 94       	dec	r0
    3954:	d2 f7       	brpl	.-12     	; 0x394a <__pack_f+0x7e>
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	a0 e0       	ldi	r26, 0x00	; 0
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <__pack_f+0x9c>
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	aa 1f       	adc	r26, r26
    3966:	bb 1f       	adc	r27, r27
    3968:	2a 95       	dec	r18
    396a:	d2 f7       	brpl	.-12     	; 0x3960 <__pack_f+0x94>
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	a1 09       	sbc	r26, r1
    3970:	b1 09       	sbc	r27, r1
    3972:	8e 21       	and	r24, r14
    3974:	9f 21       	and	r25, r15
    3976:	a0 23       	and	r26, r16
    3978:	b1 23       	and	r27, r17
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	a1 05       	cpc	r26, r1
    397e:	b1 05       	cpc	r27, r1
    3980:	21 f0       	breq	.+8      	; 0x398a <__pack_f+0xbe>
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 e0       	ldi	r26, 0x00	; 0
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	9a 01       	movw	r18, r20
    398c:	ab 01       	movw	r20, r22
    398e:	28 2b       	or	r18, r24
    3990:	39 2b       	or	r19, r25
    3992:	4a 2b       	or	r20, r26
    3994:	5b 2b       	or	r21, r27
    3996:	da 01       	movw	r26, r20
    3998:	c9 01       	movw	r24, r18
    399a:	8f 77       	andi	r24, 0x7F	; 127
    399c:	90 70       	andi	r25, 0x00	; 0
    399e:	a0 70       	andi	r26, 0x00	; 0
    39a0:	b0 70       	andi	r27, 0x00	; 0
    39a2:	80 34       	cpi	r24, 0x40	; 64
    39a4:	91 05       	cpc	r25, r1
    39a6:	a1 05       	cpc	r26, r1
    39a8:	b1 05       	cpc	r27, r1
    39aa:	39 f4       	brne	.+14     	; 0x39ba <__pack_f+0xee>
    39ac:	27 ff       	sbrs	r18, 7
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <__pack_f+0xf6>
    39b0:	20 5c       	subi	r18, 0xC0	; 192
    39b2:	3f 4f       	sbci	r19, 0xFF	; 255
    39b4:	4f 4f       	sbci	r20, 0xFF	; 255
    39b6:	5f 4f       	sbci	r21, 0xFF	; 255
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <__pack_f+0xf6>
    39ba:	21 5c       	subi	r18, 0xC1	; 193
    39bc:	3f 4f       	sbci	r19, 0xFF	; 255
    39be:	4f 4f       	sbci	r20, 0xFF	; 255
    39c0:	5f 4f       	sbci	r21, 0xFF	; 255
    39c2:	e0 e0       	ldi	r30, 0x00	; 0
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	20 30       	cpi	r18, 0x00	; 0
    39c8:	a0 e0       	ldi	r26, 0x00	; 0
    39ca:	3a 07       	cpc	r19, r26
    39cc:	a0 e0       	ldi	r26, 0x00	; 0
    39ce:	4a 07       	cpc	r20, r26
    39d0:	a0 e4       	ldi	r26, 0x40	; 64
    39d2:	5a 07       	cpc	r21, r26
    39d4:	10 f0       	brcs	.+4      	; 0x39da <__pack_f+0x10e>
    39d6:	e1 e0       	ldi	r30, 0x01	; 1
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	79 01       	movw	r14, r18
    39dc:	8a 01       	movw	r16, r20
    39de:	27 c0       	rjmp	.+78     	; 0x3a2e <__pack_f+0x162>
    39e0:	60 38       	cpi	r22, 0x80	; 128
    39e2:	71 05       	cpc	r23, r1
    39e4:	64 f5       	brge	.+88     	; 0x3a3e <__pack_f+0x172>
    39e6:	fb 01       	movw	r30, r22
    39e8:	e1 58       	subi	r30, 0x81	; 129
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	d8 01       	movw	r26, r16
    39ee:	c7 01       	movw	r24, r14
    39f0:	8f 77       	andi	r24, 0x7F	; 127
    39f2:	90 70       	andi	r25, 0x00	; 0
    39f4:	a0 70       	andi	r26, 0x00	; 0
    39f6:	b0 70       	andi	r27, 0x00	; 0
    39f8:	80 34       	cpi	r24, 0x40	; 64
    39fa:	91 05       	cpc	r25, r1
    39fc:	a1 05       	cpc	r26, r1
    39fe:	b1 05       	cpc	r27, r1
    3a00:	39 f4       	brne	.+14     	; 0x3a10 <__pack_f+0x144>
    3a02:	e7 fe       	sbrs	r14, 7
    3a04:	0d c0       	rjmp	.+26     	; 0x3a20 <__pack_f+0x154>
    3a06:	80 e4       	ldi	r24, 0x40	; 64
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	a0 e0       	ldi	r26, 0x00	; 0
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	04 c0       	rjmp	.+8      	; 0x3a18 <__pack_f+0x14c>
    3a10:	8f e3       	ldi	r24, 0x3F	; 63
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	a0 e0       	ldi	r26, 0x00	; 0
    3a16:	b0 e0       	ldi	r27, 0x00	; 0
    3a18:	e8 0e       	add	r14, r24
    3a1a:	f9 1e       	adc	r15, r25
    3a1c:	0a 1f       	adc	r16, r26
    3a1e:	1b 1f       	adc	r17, r27
    3a20:	17 ff       	sbrs	r17, 7
    3a22:	05 c0       	rjmp	.+10     	; 0x3a2e <__pack_f+0x162>
    3a24:	16 95       	lsr	r17
    3a26:	07 95       	ror	r16
    3a28:	f7 94       	ror	r15
    3a2a:	e7 94       	ror	r14
    3a2c:	31 96       	adiw	r30, 0x01	; 1
    3a2e:	87 e0       	ldi	r24, 0x07	; 7
    3a30:	16 95       	lsr	r17
    3a32:	07 95       	ror	r16
    3a34:	f7 94       	ror	r15
    3a36:	e7 94       	ror	r14
    3a38:	8a 95       	dec	r24
    3a3a:	d1 f7       	brne	.-12     	; 0x3a30 <__pack_f+0x164>
    3a3c:	05 c0       	rjmp	.+10     	; 0x3a48 <__pack_f+0x17c>
    3a3e:	ee 24       	eor	r14, r14
    3a40:	ff 24       	eor	r15, r15
    3a42:	87 01       	movw	r16, r14
    3a44:	ef ef       	ldi	r30, 0xFF	; 255
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	6e 2f       	mov	r22, r30
    3a4a:	67 95       	ror	r22
    3a4c:	66 27       	eor	r22, r22
    3a4e:	67 95       	ror	r22
    3a50:	90 2f       	mov	r25, r16
    3a52:	9f 77       	andi	r25, 0x7F	; 127
    3a54:	d7 94       	ror	r13
    3a56:	dd 24       	eor	r13, r13
    3a58:	d7 94       	ror	r13
    3a5a:	8e 2f       	mov	r24, r30
    3a5c:	86 95       	lsr	r24
    3a5e:	49 2f       	mov	r20, r25
    3a60:	46 2b       	or	r20, r22
    3a62:	58 2f       	mov	r21, r24
    3a64:	5d 29       	or	r21, r13
    3a66:	b7 01       	movw	r22, r14
    3a68:	ca 01       	movw	r24, r20
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	df 90       	pop	r13
    3a74:	08 95       	ret

00003a76 <__unpack_f>:
    3a76:	fc 01       	movw	r30, r24
    3a78:	db 01       	movw	r26, r22
    3a7a:	40 81       	ld	r20, Z
    3a7c:	51 81       	ldd	r21, Z+1	; 0x01
    3a7e:	22 81       	ldd	r18, Z+2	; 0x02
    3a80:	62 2f       	mov	r22, r18
    3a82:	6f 77       	andi	r22, 0x7F	; 127
    3a84:	70 e0       	ldi	r23, 0x00	; 0
    3a86:	22 1f       	adc	r18, r18
    3a88:	22 27       	eor	r18, r18
    3a8a:	22 1f       	adc	r18, r18
    3a8c:	93 81       	ldd	r25, Z+3	; 0x03
    3a8e:	89 2f       	mov	r24, r25
    3a90:	88 0f       	add	r24, r24
    3a92:	82 2b       	or	r24, r18
    3a94:	28 2f       	mov	r18, r24
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	99 1f       	adc	r25, r25
    3a9a:	99 27       	eor	r25, r25
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	11 96       	adiw	r26, 0x01	; 1
    3aa0:	9c 93       	st	X, r25
    3aa2:	11 97       	sbiw	r26, 0x01	; 1
    3aa4:	21 15       	cp	r18, r1
    3aa6:	31 05       	cpc	r19, r1
    3aa8:	a9 f5       	brne	.+106    	; 0x3b14 <__unpack_f+0x9e>
    3aaa:	41 15       	cp	r20, r1
    3aac:	51 05       	cpc	r21, r1
    3aae:	61 05       	cpc	r22, r1
    3ab0:	71 05       	cpc	r23, r1
    3ab2:	11 f4       	brne	.+4      	; 0x3ab8 <__unpack_f+0x42>
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	37 c0       	rjmp	.+110    	; 0x3b26 <__unpack_f+0xb0>
    3ab8:	82 e8       	ldi	r24, 0x82	; 130
    3aba:	9f ef       	ldi	r25, 0xFF	; 255
    3abc:	13 96       	adiw	r26, 0x03	; 3
    3abe:	9c 93       	st	X, r25
    3ac0:	8e 93       	st	-X, r24
    3ac2:	12 97       	sbiw	r26, 0x02	; 2
    3ac4:	9a 01       	movw	r18, r20
    3ac6:	ab 01       	movw	r20, r22
    3ac8:	67 e0       	ldi	r22, 0x07	; 7
    3aca:	22 0f       	add	r18, r18
    3acc:	33 1f       	adc	r19, r19
    3ace:	44 1f       	adc	r20, r20
    3ad0:	55 1f       	adc	r21, r21
    3ad2:	6a 95       	dec	r22
    3ad4:	d1 f7       	brne	.-12     	; 0x3aca <__unpack_f+0x54>
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	8c 93       	st	X, r24
    3ada:	0d c0       	rjmp	.+26     	; 0x3af6 <__unpack_f+0x80>
    3adc:	22 0f       	add	r18, r18
    3ade:	33 1f       	adc	r19, r19
    3ae0:	44 1f       	adc	r20, r20
    3ae2:	55 1f       	adc	r21, r21
    3ae4:	12 96       	adiw	r26, 0x02	; 2
    3ae6:	8d 91       	ld	r24, X+
    3ae8:	9c 91       	ld	r25, X
    3aea:	13 97       	sbiw	r26, 0x03	; 3
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	13 96       	adiw	r26, 0x03	; 3
    3af0:	9c 93       	st	X, r25
    3af2:	8e 93       	st	-X, r24
    3af4:	12 97       	sbiw	r26, 0x02	; 2
    3af6:	20 30       	cpi	r18, 0x00	; 0
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	38 07       	cpc	r19, r24
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	48 07       	cpc	r20, r24
    3b00:	80 e4       	ldi	r24, 0x40	; 64
    3b02:	58 07       	cpc	r21, r24
    3b04:	58 f3       	brcs	.-42     	; 0x3adc <__unpack_f+0x66>
    3b06:	14 96       	adiw	r26, 0x04	; 4
    3b08:	2d 93       	st	X+, r18
    3b0a:	3d 93       	st	X+, r19
    3b0c:	4d 93       	st	X+, r20
    3b0e:	5c 93       	st	X, r21
    3b10:	17 97       	sbiw	r26, 0x07	; 7
    3b12:	08 95       	ret
    3b14:	2f 3f       	cpi	r18, 0xFF	; 255
    3b16:	31 05       	cpc	r19, r1
    3b18:	79 f4       	brne	.+30     	; 0x3b38 <__unpack_f+0xc2>
    3b1a:	41 15       	cp	r20, r1
    3b1c:	51 05       	cpc	r21, r1
    3b1e:	61 05       	cpc	r22, r1
    3b20:	71 05       	cpc	r23, r1
    3b22:	19 f4       	brne	.+6      	; 0x3b2a <__unpack_f+0xb4>
    3b24:	84 e0       	ldi	r24, 0x04	; 4
    3b26:	8c 93       	st	X, r24
    3b28:	08 95       	ret
    3b2a:	64 ff       	sbrs	r22, 4
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <__unpack_f+0xbe>
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	8c 93       	st	X, r24
    3b32:	12 c0       	rjmp	.+36     	; 0x3b58 <__unpack_f+0xe2>
    3b34:	1c 92       	st	X, r1
    3b36:	10 c0       	rjmp	.+32     	; 0x3b58 <__unpack_f+0xe2>
    3b38:	2f 57       	subi	r18, 0x7F	; 127
    3b3a:	30 40       	sbci	r19, 0x00	; 0
    3b3c:	13 96       	adiw	r26, 0x03	; 3
    3b3e:	3c 93       	st	X, r19
    3b40:	2e 93       	st	-X, r18
    3b42:	12 97       	sbiw	r26, 0x02	; 2
    3b44:	83 e0       	ldi	r24, 0x03	; 3
    3b46:	8c 93       	st	X, r24
    3b48:	87 e0       	ldi	r24, 0x07	; 7
    3b4a:	44 0f       	add	r20, r20
    3b4c:	55 1f       	adc	r21, r21
    3b4e:	66 1f       	adc	r22, r22
    3b50:	77 1f       	adc	r23, r23
    3b52:	8a 95       	dec	r24
    3b54:	d1 f7       	brne	.-12     	; 0x3b4a <__unpack_f+0xd4>
    3b56:	70 64       	ori	r23, 0x40	; 64
    3b58:	14 96       	adiw	r26, 0x04	; 4
    3b5a:	4d 93       	st	X+, r20
    3b5c:	5d 93       	st	X+, r21
    3b5e:	6d 93       	st	X+, r22
    3b60:	7c 93       	st	X, r23
    3b62:	17 97       	sbiw	r26, 0x07	; 7
    3b64:	08 95       	ret

00003b66 <__fpcmp_parts_f>:
    3b66:	1f 93       	push	r17
    3b68:	dc 01       	movw	r26, r24
    3b6a:	fb 01       	movw	r30, r22
    3b6c:	9c 91       	ld	r25, X
    3b6e:	92 30       	cpi	r25, 0x02	; 2
    3b70:	08 f4       	brcc	.+2      	; 0x3b74 <__fpcmp_parts_f+0xe>
    3b72:	47 c0       	rjmp	.+142    	; 0x3c02 <__fpcmp_parts_f+0x9c>
    3b74:	80 81       	ld	r24, Z
    3b76:	82 30       	cpi	r24, 0x02	; 2
    3b78:	08 f4       	brcc	.+2      	; 0x3b7c <__fpcmp_parts_f+0x16>
    3b7a:	43 c0       	rjmp	.+134    	; 0x3c02 <__fpcmp_parts_f+0x9c>
    3b7c:	94 30       	cpi	r25, 0x04	; 4
    3b7e:	51 f4       	brne	.+20     	; 0x3b94 <__fpcmp_parts_f+0x2e>
    3b80:	11 96       	adiw	r26, 0x01	; 1
    3b82:	1c 91       	ld	r17, X
    3b84:	84 30       	cpi	r24, 0x04	; 4
    3b86:	99 f5       	brne	.+102    	; 0x3bee <__fpcmp_parts_f+0x88>
    3b88:	81 81       	ldd	r24, Z+1	; 0x01
    3b8a:	68 2f       	mov	r22, r24
    3b8c:	70 e0       	ldi	r23, 0x00	; 0
    3b8e:	61 1b       	sub	r22, r17
    3b90:	71 09       	sbc	r23, r1
    3b92:	3f c0       	rjmp	.+126    	; 0x3c12 <__fpcmp_parts_f+0xac>
    3b94:	84 30       	cpi	r24, 0x04	; 4
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <__fpcmp_parts_f+0x3a>
    3b98:	92 30       	cpi	r25, 0x02	; 2
    3b9a:	31 f4       	brne	.+12     	; 0x3ba8 <__fpcmp_parts_f+0x42>
    3b9c:	82 30       	cpi	r24, 0x02	; 2
    3b9e:	b9 f1       	breq	.+110    	; 0x3c0e <__fpcmp_parts_f+0xa8>
    3ba0:	81 81       	ldd	r24, Z+1	; 0x01
    3ba2:	88 23       	and	r24, r24
    3ba4:	89 f1       	breq	.+98     	; 0x3c08 <__fpcmp_parts_f+0xa2>
    3ba6:	2d c0       	rjmp	.+90     	; 0x3c02 <__fpcmp_parts_f+0x9c>
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	1c 91       	ld	r17, X
    3bac:	11 97       	sbiw	r26, 0x01	; 1
    3bae:	82 30       	cpi	r24, 0x02	; 2
    3bb0:	f1 f0       	breq	.+60     	; 0x3bee <__fpcmp_parts_f+0x88>
    3bb2:	81 81       	ldd	r24, Z+1	; 0x01
    3bb4:	18 17       	cp	r17, r24
    3bb6:	d9 f4       	brne	.+54     	; 0x3bee <__fpcmp_parts_f+0x88>
    3bb8:	12 96       	adiw	r26, 0x02	; 2
    3bba:	2d 91       	ld	r18, X+
    3bbc:	3c 91       	ld	r19, X
    3bbe:	13 97       	sbiw	r26, 0x03	; 3
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	82 17       	cp	r24, r18
    3bc6:	93 07       	cpc	r25, r19
    3bc8:	94 f0       	brlt	.+36     	; 0x3bee <__fpcmp_parts_f+0x88>
    3bca:	28 17       	cp	r18, r24
    3bcc:	39 07       	cpc	r19, r25
    3bce:	bc f0       	brlt	.+46     	; 0x3bfe <__fpcmp_parts_f+0x98>
    3bd0:	14 96       	adiw	r26, 0x04	; 4
    3bd2:	8d 91       	ld	r24, X+
    3bd4:	9d 91       	ld	r25, X+
    3bd6:	0d 90       	ld	r0, X+
    3bd8:	bc 91       	ld	r27, X
    3bda:	a0 2d       	mov	r26, r0
    3bdc:	24 81       	ldd	r18, Z+4	; 0x04
    3bde:	35 81       	ldd	r19, Z+5	; 0x05
    3be0:	46 81       	ldd	r20, Z+6	; 0x06
    3be2:	57 81       	ldd	r21, Z+7	; 0x07
    3be4:	28 17       	cp	r18, r24
    3be6:	39 07       	cpc	r19, r25
    3be8:	4a 07       	cpc	r20, r26
    3bea:	5b 07       	cpc	r21, r27
    3bec:	18 f4       	brcc	.+6      	; 0x3bf4 <__fpcmp_parts_f+0x8e>
    3bee:	11 23       	and	r17, r17
    3bf0:	41 f0       	breq	.+16     	; 0x3c02 <__fpcmp_parts_f+0x9c>
    3bf2:	0a c0       	rjmp	.+20     	; 0x3c08 <__fpcmp_parts_f+0xa2>
    3bf4:	82 17       	cp	r24, r18
    3bf6:	93 07       	cpc	r25, r19
    3bf8:	a4 07       	cpc	r26, r20
    3bfa:	b5 07       	cpc	r27, r21
    3bfc:	40 f4       	brcc	.+16     	; 0x3c0e <__fpcmp_parts_f+0xa8>
    3bfe:	11 23       	and	r17, r17
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <__fpcmp_parts_f+0xa2>
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	70 e0       	ldi	r23, 0x00	; 0
    3c06:	05 c0       	rjmp	.+10     	; 0x3c12 <__fpcmp_parts_f+0xac>
    3c08:	6f ef       	ldi	r22, 0xFF	; 255
    3c0a:	7f ef       	ldi	r23, 0xFF	; 255
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <__fpcmp_parts_f+0xac>
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	cb 01       	movw	r24, r22
    3c14:	1f 91       	pop	r17
    3c16:	08 95       	ret

00003c18 <__udivmodhi4>:
    3c18:	aa 1b       	sub	r26, r26
    3c1a:	bb 1b       	sub	r27, r27
    3c1c:	51 e1       	ldi	r21, 0x11	; 17
    3c1e:	07 c0       	rjmp	.+14     	; 0x3c2e <__udivmodhi4_ep>

00003c20 <__udivmodhi4_loop>:
    3c20:	aa 1f       	adc	r26, r26
    3c22:	bb 1f       	adc	r27, r27
    3c24:	a6 17       	cp	r26, r22
    3c26:	b7 07       	cpc	r27, r23
    3c28:	10 f0       	brcs	.+4      	; 0x3c2e <__udivmodhi4_ep>
    3c2a:	a6 1b       	sub	r26, r22
    3c2c:	b7 0b       	sbc	r27, r23

00003c2e <__udivmodhi4_ep>:
    3c2e:	88 1f       	adc	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	5a 95       	dec	r21
    3c34:	a9 f7       	brne	.-22     	; 0x3c20 <__udivmodhi4_loop>
    3c36:	80 95       	com	r24
    3c38:	90 95       	com	r25
    3c3a:	bc 01       	movw	r22, r24
    3c3c:	cd 01       	movw	r24, r26
    3c3e:	08 95       	ret

00003c40 <__prologue_saves__>:
    3c40:	2f 92       	push	r2
    3c42:	3f 92       	push	r3
    3c44:	4f 92       	push	r4
    3c46:	5f 92       	push	r5
    3c48:	6f 92       	push	r6
    3c4a:	7f 92       	push	r7
    3c4c:	8f 92       	push	r8
    3c4e:	9f 92       	push	r9
    3c50:	af 92       	push	r10
    3c52:	bf 92       	push	r11
    3c54:	cf 92       	push	r12
    3c56:	df 92       	push	r13
    3c58:	ef 92       	push	r14
    3c5a:	ff 92       	push	r15
    3c5c:	0f 93       	push	r16
    3c5e:	1f 93       	push	r17
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	ca 1b       	sub	r28, r26
    3c6a:	db 0b       	sbc	r29, r27
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	19 94       	eijmp

00003c78 <__epilogue_restores__>:
    3c78:	2a 88       	ldd	r2, Y+18	; 0x12
    3c7a:	39 88       	ldd	r3, Y+17	; 0x11
    3c7c:	48 88       	ldd	r4, Y+16	; 0x10
    3c7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c80:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c82:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c84:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c86:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c88:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c8a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c8c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c8e:	df 80       	ldd	r13, Y+7	; 0x07
    3c90:	ee 80       	ldd	r14, Y+6	; 0x06
    3c92:	fd 80       	ldd	r15, Y+5	; 0x05
    3c94:	0c 81       	ldd	r16, Y+4	; 0x04
    3c96:	1b 81       	ldd	r17, Y+3	; 0x03
    3c98:	aa 81       	ldd	r26, Y+2	; 0x02
    3c9a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c9c:	ce 0f       	add	r28, r30
    3c9e:	d1 1d       	adc	r29, r1
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	ed 01       	movw	r28, r26
    3cac:	08 95       	ret

00003cae <_exit>:
    3cae:	f8 94       	cli

00003cb0 <__stop_program>:
    3cb0:	ff cf       	rjmp	.-2      	; 0x3cb0 <__stop_program>
